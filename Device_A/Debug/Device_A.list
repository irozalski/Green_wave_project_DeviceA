
Device_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a4c  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e8c  08007e8c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e94  08007e94  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08007e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000034  08007ed0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac0  08007ed0  00021ac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e61c  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258e  00000000  00000000  0002e67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00031a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018199  00000000  00000000  000327a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e7b  00000000  00000000  0004a941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b18  00000000  00000000  0005d7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000ee2d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b10  00000000  00000000  000ee3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000034 	.word	0x20000034
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007428 	.word	0x08007428

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000038 	.word	0x20000038
 80001d4:	08007428 	.word	0x08007428

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;

//Normal NEC protocol
static pulse_t calc_pulse(uint32_t time)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2bf9      	cmp	r3, #249	; 0xf9
 80004e8:	d801      	bhi.n	80004ee <calc_pulse+0x12>
		return PULSE_ERROR;
 80004ea:	2305      	movs	r3, #5
 80004ec:	e021      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 1200)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80004f4:	d201      	bcs.n	80004fa <calc_pulse+0x1e>
		return PULSE_SHORT;
 80004f6:	2304      	movs	r3, #4
 80004f8:	e01b      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 2000)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000500:	d201      	bcs.n	8000506 <calc_pulse+0x2a>
		return PULSE_LONG;
 8000502:	2303      	movs	r3, #3
 8000504:	e015      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 3000)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800050c:	4293      	cmp	r3, r2
 800050e:	d801      	bhi.n	8000514 <calc_pulse+0x38>
		return PULSE_2MS;
 8000510:	2302      	movs	r3, #2
 8000512:	e00e      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 6000)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f241 726f 	movw	r2, #5999	; 0x176f
 800051a:	4293      	cmp	r3, r2
 800051c:	d801      	bhi.n	8000522 <calc_pulse+0x46>
		return PULSE_4MS;
 800051e:	2301      	movs	r3, #1
 8000520:	e007      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 12000)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000528:	4293      	cmp	r3, r2
 800052a:	d801      	bhi.n	8000530 <calc_pulse+0x54>
		return PULSE_9MS;
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000530:	2305      	movs	r3, #5
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <ir_tim_interrupt>:
	else
		return PULSE_ERROR;
}

void ir_tim_interrupt(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b1f      	cmp	r3, #31
 8000548:	dc43      	bgt.n	80005d2 <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 800054a:	2100      	movs	r1, #0
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <ir_tim_interrupt+0xa8>)
 800054e:	f004 f979 	bl	8004844 <HAL_TIM_ReadCapturedValue>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffc1 	bl	80004dc <calc_pulse>
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3b01      	subs	r3, #1
 8000562:	2b03      	cmp	r3, #3
 8000564:	d831      	bhi.n	80005ca <ir_tim_interrupt+0x8e>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <ir_tim_interrupt+0x30>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	08000593 	.word	0x08000593
 8000578:	0800057d 	.word	0x0800057d
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <ir_tim_interrupt+0xac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	085b      	lsrs	r3, r3, #1
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000584:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <ir_tim_interrupt+0xa4>)
 800058e:	6013      	str	r3, [r2, #0]
		break;
 8000590:	e022      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <ir_tim_interrupt+0xac>)
 800059e:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
		break;
 80005aa:	e015      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ir_tim_interrupt+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		break;
 80005b8:	e00e      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	601a      	str	r2, [r3, #0]
		break;
 80005c8:	e005      	b.n	80005d6 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		break;
 80005d0:	e002      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		return;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000054 	.word	0x20000054
 80005e4:	20000148 	.word	0x20000148
 80005e8:	20000050 	.word	0x20000050

080005ec <ir_receiver_init>:

void ir_receiver_init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ir_receiver_init+0x18>)
 80005f2:	f003 fa89 	bl	8003b08 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <ir_receiver_init+0x18>)
 80005fa:	f003 fc99 	bl	8003f30 <HAL_TIM_IC_Start_IT>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000148 	.word	0x20000148

08000608 <ir_read>:

int ir_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <ir_read+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b20      	cmp	r3, #32
 8000614:	d002      	beq.n	800061c <ir_read+0x14>
		return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e007      	b.n	800062c <ir_read+0x24>

	uint8_t value = received_value >> 16;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <ir_read+0x34>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <ir_read+0x30>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	return value;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000054 	.word	0x20000054
 800063c:	20000050 	.word	0x20000050

08000640 <ir_sender_init>:
#include "ir_sender.h"
#include "tim.h"

void ir_sender_init(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Nie potrzebne bo start jest przy wysyłaniu komendy
    HAL_TIM_Base_Start(&htim2);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <ir_sender_init+0x10>)
 8000646:	f003 fa5f 	bl	8003b08 <HAL_TIM_Base_Start>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000100 	.word	0x20000100

08000654 <delay_us>:


void delay_us (uint16_t delay){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <delay_us+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2)<delay);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <delay_us+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <delay_us+0x14>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000100 	.word	0x20000100

08000684 <NEC_SendCommand>:


// Funkcja do wysyłania całej komendy NEC
void NEC_SendCommand(uint8_t command) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    // Wyślij ramkę startową
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start nośnej
 800068e:	2100      	movs	r1, #0
 8000690:	4841      	ldr	r0, [pc, #260]	; (8000798 <NEC_SendCommand+0x114>)
 8000692:	f003 fae1 	bl	8003c58 <HAL_TIM_PWM_Start>
    delay_us(NEC_START_PULSE);         // Impuls 9ms
 8000696:	f242 3028 	movw	r0, #9000	; 0x2328
 800069a:	f7ff ffdb 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Stop nośnej
 800069e:	2100      	movs	r1, #0
 80006a0:	483d      	ldr	r0, [pc, #244]	; (8000798 <NEC_SendCommand+0x114>)
 80006a2:	f003 fb89 	bl	8003db8 <HAL_TIM_PWM_Stop>
    delay_us(NEC_START_PAUSE);         // Pauza 4.5ms
 80006a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80006aa:	f7ff ffd3 	bl	8000654 <delay_us>


    //Adres i negacja adresu
    for (int i = 0; i < 8; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e012      	b.n	80006da <NEC_SendCommand+0x56>
    	// Zawsze najpierw krótki impuls 560µs
    	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006b4:	2100      	movs	r1, #0
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <NEC_SendCommand+0x114>)
 80006b8:	f003 face 	bl	8003c58 <HAL_TIM_PWM_Start>
    	    delay_us(NEC_PULSE);
 80006bc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006c0:	f7ff ffc8 	bl	8000654 <delay_us>
    	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006c4:	2100      	movs	r1, #0
 80006c6:	4834      	ldr	r0, [pc, #208]	; (8000798 <NEC_SendCommand+0x114>)
 80006c8:	f003 fb76 	bl	8003db8 <HAL_TIM_PWM_Stop>
    	    delay_us(NEC_PAUSE_0);
 80006cc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006d0:	f7ff ffc0 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	dde9      	ble.n	80006b4 <NEC_SendCommand+0x30>
    }

    for (int i = 0; i < 8; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	e012      	b.n	800070c <NEC_SendCommand+0x88>
        	// Zawsze najpierw krótki impuls 560µs
        	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006e6:	2100      	movs	r1, #0
 80006e8:	482b      	ldr	r0, [pc, #172]	; (8000798 <NEC_SendCommand+0x114>)
 80006ea:	f003 fab5 	bl	8003c58 <HAL_TIM_PWM_Start>
        	    delay_us(NEC_PULSE);
 80006ee:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006f2:	f7ff ffaf 	bl	8000654 <delay_us>
        	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006f6:	2100      	movs	r1, #0
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <NEC_SendCommand+0x114>)
 80006fa:	f003 fb5d 	bl	8003db8 <HAL_TIM_PWM_Stop>
        	    delay_us(NEC_PAUSE_1);
 80006fe:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000702:	f7ff ffa7 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3301      	adds	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b07      	cmp	r3, #7
 8000710:	dde9      	ble.n	80006e6 <NEC_SendCommand+0x62>
        }

    // Wyślij bity komendy (zakładamy 8-bitową komendę)
    for (int i = 0; i < 8; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00d      	b.n	8000734 <NEC_SendCommand+0xb0>
        NEC_SendBit((command >> i) & 0x01);
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	fa42 f303 	asr.w	r3, r2, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f837 	bl	800079c <NEC_SendBit>
    for (int i = 0; i < 8; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b07      	cmp	r3, #7
 8000738:	ddee      	ble.n	8000718 <NEC_SendCommand+0x94>
    }

    // Wyślij bity zanegowanej komendy (zakładamy 8-bitową komendę)
        for (int i = 0; i < 8; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	e010      	b.n	8000762 <NEC_SendCommand+0xde>
            NEC_SendBit(~(command >> i) & 0x01);
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	fa42 f303 	asr.w	r3, r2, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf0c      	ite	eq
 8000750:	2301      	moveq	r3, #1
 8000752:	2300      	movne	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f820 	bl	800079c <NEC_SendBit>
        for (int i = 0; i < 8; i++) {
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddeb      	ble.n	8000740 <NEC_SendCommand+0xbc>
        }

        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 8000768:	2100      	movs	r1, #0
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <NEC_SendCommand+0x114>)
 800076c:	f003 fa74 	bl	8003c58 <HAL_TIM_PWM_Start>
                	    delay_us(NEC_PULSE);
 8000770:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000774:	f7ff ff6e 	bl	8000654 <delay_us>
                	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 8000778:	2100      	movs	r1, #0
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <NEC_SendCommand+0x114>)
 800077c:	f003 fb1c 	bl	8003db8 <HAL_TIM_PWM_Stop>
                	    delay_us(NEC_PAUSE_1);
 8000780:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000784:	f7ff ff66 	bl	8000654 <delay_us>

    // Opcjonalnie dodaj pauzę końcową
    delay_us(560);  // Koniec transmisji
 8000788:	f44f 700c 	mov.w	r0, #560	; 0x230
 800078c:	f7ff ff62 	bl	8000654 <delay_us>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000b8 	.word	0x200000b8

0800079c <NEC_SendBit>:

// Funkcja do wysyłania pojedynczego bitu
void NEC_SendBit(uint8_t bit) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    // Zawsze najpierw krótki impuls 560µs
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80007a6:	2100      	movs	r1, #0
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <NEC_SendBit+0x44>)
 80007aa:	f003 fa55 	bl	8003c58 <HAL_TIM_PWM_Start>
    delay_us(NEC_PULSE);
 80007ae:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007b2:	f7ff ff4f 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <NEC_SendBit+0x44>)
 80007ba:	f003 fafd 	bl	8003db8 <HAL_TIM_PWM_Stop>

    // Pauza zależna od wartości bitu (bit 0 - 560µs, bit 1 - 1680µs)
    if (bit == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <NEC_SendBit+0x32>
    	delay_us(NEC_PAUSE_0);
 80007c4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007c8:	f7ff ff44 	bl	8000654 <delay_us>
    } else {
    	delay_us(NEC_PAUSE_1);
    }
}
 80007cc:	e003      	b.n	80007d6 <NEC_SendBit+0x3a>
    	delay_us(NEC_PAUSE_1);
 80007ce:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 80007d2:	f7ff ff3f 	bl	8000654 <delay_us>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000b8 	.word	0x200000b8

080007e4 <HAL_TIM_IC_CaptureCallback>:
static void MX_SPI1_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d108      	bne.n	8000806 <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim3))
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f6:	f004 f88d 	bl	8004914 <HAL_TIM_GetActiveChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8000800:	f7ff fe9c 	bl	800053c <ir_tim_interrupt>
        break;
 8000804:	e002      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 800080a:	bf00      	nop
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000148 	.word	0x20000148

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f001 fbc5 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f8bf 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 facb 	bl	8000dc0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800082a:	f000 f96d 	bl	8000b08 <MX_TIM1_Init>
  MX_TIM2_Init();
 800082e:	f000 f9ef 	bl	8000c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000832:	f000 fa39 	bl	8000ca8 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000836:	f000 f931 	bl	8000a9c <MX_SPI1_Init>
  MX_CRC_Init();
 800083a:	f000 f91b 	bl	8000a74 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi1);
 800083e:	4846      	ldr	r0, [pc, #280]	; (8000958 <main+0x140>)
 8000840:	f000 ff70 	bl	8001724 <nRF24_Init>
    RSA_Driver_init(0);
 8000844:	2000      	movs	r0, #0
 8000846:	f001 f959 	bl	8001afc <RSA_Driver_init>

        //IR Config
        ir_sender_init();
 800084a:	f7ff fef9 	bl	8000640 <ir_sender_init>
        ir_receiver_init();
 800084e:	f7ff fecd 	bl	80005ec <ir_receiver_init>

    /* Enable CRC clock */
    __CRC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <main+0x144>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a40      	ldr	r2, [pc, #256]	; (800095c <main+0x144>)
 800085c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <main+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

    nRF24_SetRXAddress(0,(uint8_t *)"Nad");
 800086e:	493c      	ldr	r1, [pc, #240]	; (8000960 <main+0x148>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fe04 	bl	800147e <nRF24_SetRXAddress>
    nRF24_SetTXAddress((uint8_t *)"Nad");
 8000876:	483a      	ldr	r0, [pc, #232]	; (8000960 <main+0x148>)
 8000878:	f000 fe3a 	bl	80014f0 <nRF24_SetTXAddress>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (transmission_step) {
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <main+0x14c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b05      	cmp	r3, #5
 8000882:	d8fb      	bhi.n	800087c <main+0x64>
 8000884:	a201      	add	r2, pc, #4	; (adr r2, 800088c <main+0x74>)
 8000886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088a:	bf00      	nop
 800088c:	080008a5 	.word	0x080008a5
 8000890:	080008ed 	.word	0x080008ed
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000913 	.word	0x08000913
 800089c:	08000927 	.word	0x08000927
 80008a0:	08000943 	.word	0x08000943
	    case 0: {
	      uint32_t currentTime = HAL_GetTick();  // Pobranie aktualnego czasu w ms
 80008a4:	f001 fbe6 	bl	8002074 <HAL_GetTick>
 80008a8:	60f8      	str	r0, [r7, #12]
	      if ((currentTime - lastCommandTime) >= 1000) {
 80008aa:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <main+0x150>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008b6:	d307      	bcc.n	80008c8 <main+0xb0>
	        NEC_SendCommand(command);       // Wysłanie komendy
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <main+0x154>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fee1 	bl	8000684 <NEC_SendCommand>
	        lastCommandTime = currentTime;  // Aktualizacja czasu ostatniego wysłania
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <main+0x150>)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6013      	str	r3, [r2, #0]
	      }
	      int value = ir_read();
 80008c8:	f7ff fe9e 	bl	8000608 <ir_read>
 80008cc:	60b8      	str	r0, [r7, #8]
	      if (value != -1) {
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d039      	beq.n	800094a <main+0x132>
	        if (value == IR_CODE_ONOFF) {
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b0e      	cmp	r3, #14
 80008da:	d136      	bne.n	800094a <main+0x132>
	          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008dc:	2120      	movs	r1, #32
 80008de:	4824      	ldr	r0, [pc, #144]	; (8000970 <main+0x158>)
 80008e0:	f001 feba 	bl	8002658 <HAL_GPIO_TogglePin>
	          transmission_step = 1;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <main+0x14c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
	        }
	      }
	      break;
 80008ea:	e02e      	b.n	800094a <main+0x132>
	    }

	    case 1: {
	      nRF24_RX_Mode();
 80008ec:	f000 fbc2 	bl	8001074 <nRF24_RX_Mode>
	      transmission_step = 2;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <main+0x14c>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	701a      	strb	r2, [r3, #0]
	      break;
 80008f6:	e02d      	b.n	8000954 <main+0x13c>
	    }

	    case 2: {
	      rv_status = receive_message();
 80008f8:	f001 f8a2 	bl	8001a40 <receive_message>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <main+0x15c>)
 8000900:	6013      	str	r3, [r2, #0]
	      if (rv_status == 1) {
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <main+0x15c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d121      	bne.n	800094e <main+0x136>
	        transmission_step = 3;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0x14c>)
 800090c:	2203      	movs	r2, #3
 800090e:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8000910:	e01d      	b.n	800094e <main+0x136>
	    }
	    case 3: {
	      nRF24_TX_Mode();
 8000912:	f000 fbdd 	bl	80010d0 <nRF24_TX_Mode>

	      transmission_step = 4;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <main+0x14c>)
 8000918:	2204      	movs	r2, #4
 800091a:	701a      	strb	r2, [r3, #0]
	      HAL_Delay(5000);
 800091c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000920:	f001 fbb2 	bl	8002088 <HAL_Delay>
	      break;
 8000924:	e016      	b.n	8000954 <main+0x13c>
	    }

	    case 4: {
	      sd_status = send_message(200);
 8000926:	20c8      	movs	r0, #200	; 0xc8
 8000928:	f000 ffd0 	bl	80018cc <send_message>
 800092c:	4603      	mov	r3, r0
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <main+0x160>)
 8000930:	6013      	str	r3, [r2, #0]
	      if (sd_status == 1) {
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x160>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <main+0x13a>
	        transmission_step = 5;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <main+0x14c>)
 800093c:	2205      	movs	r2, #5
 800093e:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8000940:	e007      	b.n	8000952 <main+0x13a>
	    }

	    case 5: {
	      transmission_step = 0;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <main+0x14c>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
	      break;
 8000948:	e004      	b.n	8000954 <main+0x13c>
	      break;
 800094a:	bf00      	nop
 800094c:	e796      	b.n	800087c <main+0x64>
	      break;
 800094e:	bf00      	nop
 8000950:	e794      	b.n	800087c <main+0x64>
	      break;
 8000952:	bf00      	nop
	  switch (transmission_step) {
 8000954:	e792      	b.n	800087c <main+0x64>
 8000956:	bf00      	nop
 8000958:	20000060 	.word	0x20000060
 800095c:	40023800 	.word	0x40023800
 8000960:	08007440 	.word	0x08007440
 8000964:	20000198 	.word	0x20000198
 8000968:	20000194 	.word	0x20000194
 800096c:	20000000 	.word	0x20000000
 8000970:	40020000 	.word	0x40020000
 8000974:	2000019c 	.word	0x2000019c
 8000978:	200001a0 	.word	0x200001a0

0800097c <Error_Handler>:
  /* USER CODE END 3 */
}


void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000980:	2120      	movs	r1, #32
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <Error_Handler+0x24>)
 8000984:	f001 fe68 	bl	8002658 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000988:	20fa      	movs	r0, #250	; 0xfa
 800098a:	f001 fb7d 	bl	8002088 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800098e:	2120      	movs	r1, #32
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <Error_Handler+0x24>)
 8000992:	f001 fe61 	bl	8002658 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000996:	20fa      	movs	r0, #250	; 0xfa
 8000998:	f001 fb76 	bl	8002088 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800099c:	e7f0      	b.n	8000980 <Error_Handler+0x4>
 800099e:	bf00      	nop
 80009a0:	40020000 	.word	0x40020000

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 fd30 	bl	8007418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <SystemClock_Config+0xc8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <SystemClock_Config+0xc8>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <SystemClock_Config+0xc8>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <SystemClock_Config+0xcc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fe51 	bl	80026d0 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a34:	f7ff ffa2 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2103      	movs	r1, #3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 f8b3 	bl	8002bc0 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a60:	f7ff ff8c 	bl	800097c <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3750      	adds	r7, #80	; 0x50
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CRC_Init+0x20>)
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <MX_CRC_Init+0x24>)
 8000a7c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_CRC_Init+0x20>)
 8000a80:	f001 fc33 	bl	80022ea <HAL_CRC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a8a:	f7ff ff77 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000058 	.word	0x20000058
 8000a98:	40023000 	.word	0x40023000

08000a9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <MX_SPI1_Init+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000acc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ad0:	2218      	movs	r2, #24
 8000ad2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000aee:	f002 fa13 	bl	8002f18 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af8:	f7ff ff40 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000060 	.word	0x20000060
 8000b04:	40013000 	.word	0x40013000

08000b08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b092      	sub	sp, #72	; 0x48
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2220      	movs	r2, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f006 fc70 	bl	8007418 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b38:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b3a:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <MX_TIM1_Init+0x104>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b4c:	f640 2247 	movw	r2, #2631	; 0xa47
 8000b50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b66:	f003 f827 	bl	8003bb8 <HAL_TIM_PWM_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b70:	f7ff ff04 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b80:	4619      	mov	r1, r3
 8000b82:	4821      	ldr	r0, [pc, #132]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000b84:	f004 fb3e 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f7ff fef5 	bl	800097c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b92:	2360      	movs	r3, #96	; 0x60
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000b96:	f240 5323 	movw	r3, #1315	; 0x523
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000bba:	f003 fc77 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000bc4:	f7ff feda 	bl	800097c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000bec:	f004 fb76 	bl	80052dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000bf6:	f7ff fec1 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM1_Init+0x100>)
 8000bfc:	f001 f92a 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 8000c00:	bf00      	nop
 8000c02:	3748      	adds	r7, #72	; 0x48
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000b8 	.word	0x200000b8
 8000c0c:	40010000 	.word	0x40010000

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c36:	2263      	movs	r2, #99	; 0x63
 8000c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c56:	f002 ff07 	bl	8003a68 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c60:	f7ff fe8c 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c72:	f003 fcdd 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f7ff fe7e 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c8e:	f004 fab9 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f7ff fe70 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000100 	.word	0x20000100

08000ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce2:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000ce4:	4a35      	ldr	r2, [pc, #212]	; (8000dbc <MX_TIM3_Init+0x114>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000cea:	2263      	movs	r2, #99	; 0x63
 8000cec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d08:	482b      	ldr	r0, [pc, #172]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000d0a:	f002 fead 	bl	8003a68 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d14:	f7ff fe32 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d22:	4619      	mov	r1, r3
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000d26:	f003 fc83 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f7ff fe24 	bl	800097c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d34:	4820      	ldr	r0, [pc, #128]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000d36:	f003 f8a3 	bl	8003e80 <HAL_TIM_IC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d40:	f7ff fe1c 	bl	800097c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d44:	2304      	movs	r3, #4
 8000d46:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000d48:	2340      	movs	r3, #64	; 0x40
 8000d4a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4817      	ldr	r0, [pc, #92]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000d5c:	f003 fd2f 	bl	80047be <HAL_TIM_SlaveConfigSynchro>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000d66:	f7ff fe09 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000d7a:	f004 fa43 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000d84:	f7ff fdfa 	bl	800097c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM3_Init+0x110>)
 8000da0:	f003 fae8 	bl	8004374 <HAL_TIM_IC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000daa:	f7ff fde7 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000148 	.word	0x20000148
 8000dbc:	40000400 	.word	0x40000400

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a2b      	ldr	r2, [pc, #172]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_GPIO_Init+0x104>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_NRF_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2103      	movs	r1, #3
 8000e4a:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0x108>)
 8000e4c:	f001 fbec 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_GPIO_Init+0x10c>)
 8000e56:	f001 fbe7 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_NRF_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_NRF_Pin|CE_NRF_Pin;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <MX_GPIO_Init+0x108>)
 8000e72:	f001 fa57 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e76:	2320      	movs	r3, #32
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480f      	ldr	r0, [pc, #60]	; (8000ecc <MX_GPIO_Init+0x10c>)
 8000e8e:	f001 fa49 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000e92:	2340      	movs	r3, #64	; 0x40
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <MX_GPIO_Init+0x110>)
 8000ea8:	f001 fa3c 	bl	8002324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2017      	movs	r0, #23
 8000eb2:	f001 f9e4 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eb6:	2017      	movs	r0, #23
 8000eb8:	f001 f9fd 	bl	80022b6 <HAL_NVIC_EnableIRQ>

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f8d1 	bl	8002088 <HAL_Delay>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <nRF24_SendSpi+0x28>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	f002 f88e 	bl	800302a <HAL_SPI_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200001a4 	.word	0x200001a4

08000f1c <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <nRF24_ReadSpi+0x28>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	f002 f9b4 	bl	80032a2 <HAL_SPI_Receive>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001a4 	.word	0x200001a4

08000f48 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <nRF24_ReadRegister+0x44>)
 8000f5c:	f001 fb64 	bl	8002628 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ffc3 	bl	8000ef0 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000f6a:	f107 030f 	add.w	r3, r7, #15
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ffd3 	bl	8000f1c <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <nRF24_ReadRegister+0x44>)
 8000f7c:	f001 fb54 	bl	8002628 <HAL_GPIO_WritePin>

	return result;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020800 	.word	0x40020800

08000f90 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <nRF24_ReadRegisters+0x44>)
 8000faa:	f001 fb3d 	bl	8002628 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff9c 	bl	8000ef0 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff ffad 	bl	8000f1c <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <nRF24_ReadRegisters+0x44>)
 8000fc8:	f001 fb2e 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <nRF24_WriteRegister+0x48>)
 8000ffc:	f001 fb14 	bl	8002628 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2102      	movs	r1, #2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff72 	bl	8000ef0 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 800100c:	2201      	movs	r2, #1
 800100e:	2101      	movs	r1, #1
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <nRF24_WriteRegister+0x48>)
 8001012:	f001 fb09 	bl	8002628 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020800 	.word	0x40020800

08001024 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	b2db      	uxtb	r3, r3
 800103c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <nRF24_WriteRegisters+0x4c>)
 8001044:	f001 faf0 	bl	8002628 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff4f 	bl	8000ef0 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	4619      	mov	r1, r3
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f7ff ff4a 	bl	8000ef0 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 800105c:	2201      	movs	r2, #1
 800105e:	2101      	movs	r1, #1
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <nRF24_WriteRegisters+0x4c>)
 8001062:	f001 fae1 	bl	8002628 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800

08001074 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	//NRF24_CE_LOW;
	uint8_t config = nRF24_ReadConfig();
 800107a:	f000 f851 	bl	8001120 <nRF24_ReadConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001082:	4911      	ldr	r1, [pc, #68]	; (80010c8 <nRF24_RX_Mode+0x54>)
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f9fa 	bl	800147e <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f847 	bl	8001130 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80010a2:	2070      	movs	r0, #112	; 0x70
 80010a4:	f000 f89f 	bl	80011e6 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80010a8:	f000 f8ac 	bl	8001204 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80010ac:	f000 f8c4 	bl	8001238 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80010b0:	2201      	movs	r2, #1
 80010b2:	2102      	movs	r1, #2
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <nRF24_RX_Mode+0x58>)
 80010b6:	f001 fab7 	bl	8002628 <HAL_GPIO_WritePin>
	nRF24_Delay(20);
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ff0a 	bl	8000ed4 <nRF24_Delay>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001a8 	.word	0x200001a8
 80010cc:	40020800 	.word	0x40020800

080010d0 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <nRF24_TX_Mode+0x4c>)
 80010dc:	f001 faa4 	bl	8002628 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 80010e0:	f000 f81e 	bl	8001120 <nRF24_ReadConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f023 0301 	bic.w	r3, r3, #1
 80010f6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f818 	bl	8001130 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001100:	2070      	movs	r0, #112	; 0x70
 8001102:	f000 f870 	bl	80011e6 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001106:	f000 f87d 	bl	8001204 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800110a:	f000 f895 	bl	8001238 <nRF24_FlushTX>

	nRF24_Delay(20);
 800110e:	2014      	movs	r0, #20
 8001110:	f7ff fee0 	bl	8000ed4 <nRF24_Delay>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020800 	.word	0x40020800

08001120 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ff0f 	bl	8000f48 <nRF24_ReadRegister>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	bd80      	pop	{r7, pc}

08001130 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4619      	mov	r1, r3
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff ff4a 	bl	8000fd8 <nRF24_WriteRegister>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001156:	2006      	movs	r0, #6
 8001158:	f7ff fef6 	bl	8000f48 <nRF24_ReadRegister>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f023 0307 	bic.w	r3, r3, #7
 8001166:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	b25a      	sxtb	r2, r3
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4313      	orrs	r3, r2
 8001174:	b25b      	sxtb	r3, r3
 8001176:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4619      	mov	r1, r3
 800117c:	2006      	movs	r0, #6
 800117e:	f7ff ff2b 	bl	8000fd8 <nRF24_WriteRegister>
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001194:	2006      	movs	r0, #6
 8001196:	f7ff fed7 	bl	8000f48 <nRF24_ReadRegister>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80011a4:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d104      	bne.n	80011b6 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e006      	b.n	80011c4 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d103      	bne.n	80011c4 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	4619      	mov	r1, r3
 80011c8:	2006      	movs	r0, #6
 80011ca:	f7ff ff05 	bl	8000fd8 <nRF24_WriteRegister>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80011da:	2007      	movs	r0, #7
 80011dc:	f7ff feb4 	bl	8000f48 <nRF24_ReadRegister>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4619      	mov	r1, r3
 80011f4:	2007      	movs	r0, #7
 80011f6:	f7ff feef 	bl	8000fd8 <nRF24_WriteRegister>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800120a:	23e2      	movs	r3, #226	; 0xe2
 800120c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <nRF24_FlushRX+0x30>)
 8001214:	f001 fa08 	bl	8002628 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	2101      	movs	r1, #1
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe67 	bl	8000ef0 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001222:	2201      	movs	r2, #1
 8001224:	2101      	movs	r1, #1
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <nRF24_FlushRX+0x30>)
 8001228:	f001 f9fe 	bl	8002628 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020800 	.word	0x40020800

08001238 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800123e:	23e1      	movs	r3, #225	; 0xe1
 8001240:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001242:	2200      	movs	r2, #0
 8001244:	2101      	movs	r1, #1
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <nRF24_FlushTX+0x30>)
 8001248:	f001 f9ee 	bl	8002628 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	2101      	movs	r1, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe4d 	bl	8000ef0 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001256:	2201      	movs	r2, #1
 8001258:	2101      	movs	r1, #1
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <nRF24_FlushTX+0x30>)
 800125c:	f001 f9e4 	bl	8002628 <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020800 	.word	0x40020800

0800126c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001276:	f7ff ff53 	bl	8001120 <nRF24_ReadConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e003      	b.n	8001296 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	f023 0308 	bic.w	r3, r3, #8
 8001294:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff49 	bl	8001130 <nRF24_WriteConfig>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80012b0:	f7ff ff36 	bl	8001120 <nRF24_ReadConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d104      	bne.n	80012c8 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e003      	b.n	80012d0 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff2c 	bl	8001130 <nRF24_WriteConfig>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	2004      	movs	r0, #4
 800130a:	f7ff fe65 	bl	8000fd8 <nRF24_WriteRegister>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	2005      	movs	r0, #5
 800132c:	f7ff fe54 	bl	8000fd8 <nRF24_WriteRegister>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d901      	bls.n	8001352 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800134e:	2305      	movs	r3, #5
 8001350:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	3311      	adds	r3, #17
 8001356:	b2da      	uxtb	r2, r3
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fe38 	bl	8000fd8 <nRF24_WriteRegister>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d901      	bls.n	800138a <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001386:	2305      	movs	r3, #5
 8001388:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800138a:	2002      	movs	r0, #2
 800138c:	f7ff fddc 	bl	8000f48 <nRF24_ReadRegister>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10a      	bne.n	80013b0 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2201      	movs	r2, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e00b      	b.n	80013c8 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2201      	movs	r2, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4013      	ands	r3, r2
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	4619      	mov	r1, r3
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff fe03 	bl	8000fd8 <nRF24_WriteRegister>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	460a      	mov	r2, r1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4613      	mov	r3, r2
 80013e8:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d901      	bls.n	80013f4 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80013f0:	2305      	movs	r3, #5
 80013f2:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fda7 	bl	8000f48 <nRF24_ReadRegister>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10a      	bne.n	800141a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2201      	movs	r2, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	b25a      	sxtb	r2, r3
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e00b      	b.n	8001432 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2201      	movs	r2, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	b25b      	sxtb	r3, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	b25a      	sxtb	r2, r3
 8001428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142c:	4013      	ands	r3, r2
 800142e:	b25b      	sxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4619      	mov	r1, r3
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fdce 	bl	8000fd8 <nRF24_WriteRegister>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d901      	bls.n	8001458 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001454:	2305      	movs	r3, #5
 8001456:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d801      	bhi.n	8001462 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800145e:	2303      	movs	r3, #3
 8001460:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b02      	subs	r3, #2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	2003      	movs	r0, #3
 8001472:	f7ff fdb1 	bl	8000fd8 <nRF24_WriteRegister>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	6039      	str	r1, [r7, #0]
 8001488:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <nRF24_SetRXAddress+0x18>
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d11d      	bne.n	80014d2 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e00d      	b.n	80014b8 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	441a      	add	r2, r3
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f1c3 0302 	rsb	r3, r3, #2
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	3310      	adds	r3, #16
 80014ac:	443b      	add	r3, r7
 80014ae:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d9ee      	bls.n	800149c <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	330a      	adds	r3, #10
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f107 010c 	add.w	r1, r7, #12
 80014c8:	2203      	movs	r2, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fdaa 	bl	8001024 <nRF24_WriteRegisters>
	{
 80014d0:	e00a      	b.n	80014e8 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	330a      	adds	r3, #10
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3302      	adds	r3, #2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7ff fd79 	bl	8000fd8 <nRF24_WriteRegister>
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2203      	movs	r2, #3
 80014fe:	4619      	mov	r1, r3
 8001500:	200a      	movs	r0, #10
 8001502:	f7ff fd45 	bl	8000f90 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e00c      	b.n	8001526 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f1c3 0302 	rsb	r3, r3, #2
 8001514:	3210      	adds	r2, #16
 8001516:	443a      	add	r2, r7
 8001518:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800151c:	4a16      	ldr	r2, [pc, #88]	; (8001578 <nRF24_SetTXAddress+0x88>)
 800151e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d9ef      	bls.n	800150c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e00d      	b.n	800154e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	441a      	add	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f1c3 0302 	rsb	r3, r3, #2
 800153e:	7812      	ldrb	r2, [r2, #0]
 8001540:	3310      	adds	r3, #16
 8001542:	443b      	add	r3, r7
 8001544:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	3301      	adds	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d9ee      	bls.n	8001532 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2203      	movs	r2, #3
 800155a:	4619      	mov	r1, r3
 800155c:	200a      	movs	r0, #10
 800155e:	f7ff fd61 	bl	8001024 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2203      	movs	r2, #3
 8001568:	4619      	mov	r1, r3
 800156a:	2010      	movs	r0, #16
 800156c:	f7ff fd5a 	bl	8001024 <nRF24_WriteRegisters>

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001a8 	.word	0x200001a8

0800157c <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001582:	f7ff fe28 	bl	80011d6 <nRF24_ReadStatus>
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001590:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe26 	bl	80011e6 <nRF24_WriteStatus>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80015ac:	f7ff fdb8 	bl	8001120 <nRF24_ReadConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e003      	b.n	80015cc <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ca:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fdae 	bl	8001130 <nRF24_WriteConfig>
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80015e6:	f7ff fd9b 	bl	8001120 <nRF24_ReadConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d104      	bne.n	80015fe <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e003      	b.n	8001606 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f023 0320 	bic.w	r3, r3, #32
 8001604:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd91 	bl	8001130 <nRF24_WriteConfig>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001620:	f7ff fd7e 	bl	8001120 <nRF24_ReadConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e003      	b.n	8001640 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	f023 0310 	bic.w	r3, r3, #16
 800163e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fd74 	bl	8001130 <nRF24_WriteConfig>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001658:	2220      	movs	r2, #32
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	20a0      	movs	r0, #160	; 0xa0
 800165e:	f7ff fce1 	bl	8001024 <nRF24_WriteRegisters>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8001672:	2201      	movs	r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	4811      	ldr	r0, [pc, #68]	; (80016bc <nRF24_WaitTX+0x50>)
 8001678:	f000 ffd6 	bl	8002628 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fc29 	bl	8000ed4 <nRF24_Delay>
	NRF24_CE_LOW;
 8001682:	2200      	movs	r2, #0
 8001684:	2102      	movs	r1, #2
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <nRF24_WaitTX+0x50>)
 8001688:	f000 ffce 	bl	8002628 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff fc21 	bl	8000ed4 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8001692:	f7ff fda0 	bl	80011d6 <nRF24_ReadStatus>
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d104      	bne.n	80016ae <nRF24_WaitTX+0x42>
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <nRF24_WaitTX+0x20>

	// Clear the relevant status flags
	    nRF24_WriteStatus((1 << NRF24_MAX_RT) | (1 << NRF24_TX_DS));
 80016ae:	2030      	movs	r0, #48	; 0x30
 80016b0:	f7ff fd99 	bl	80011e6 <nRF24_WriteStatus>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40020800 	.word	0x40020800

080016c0 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80016c8:	2220      	movs	r2, #32
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	2061      	movs	r0, #97	; 0x61
 80016ce:	f7ff fc5f 	bl	8000f90 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	2007      	movs	r0, #7
 80016d6:	f7ff fc7f 	bl	8000fd8 <nRF24_WriteRegister>
	//nRF24_FlushRX();
	//if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
		//nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
	//}
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80016ea:	f7ff fd74 	bl	80011d6 <nRF24_ReadStatus>
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <nRF24_RXAvailible+0x3c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001708:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fd6a 	bl	80011e6 <nRF24_WriteStatus>
		return 1;
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000190 	.word	0x20000190

08001724 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <nRF24_Init+0xa0>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001732:	2200      	movs	r2, #0
 8001734:	2102      	movs	r1, #2
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <nRF24_Init+0xa4>)
 8001738:	f000 ff76 	bl	8002628 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800173c:	2201      	movs	r2, #1
 800173e:	2101      	movs	r1, #1
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <nRF24_Init+0xa4>)
 8001742:	f000 ff71 	bl	8002628 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001746:	2005      	movs	r0, #5
 8001748:	f7ff fbc4 	bl	8000ed4 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800174c:	2003      	movs	r0, #3
 800174e:	f7ff fcfd 	bl	800114c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff fd19 	bl	800118a <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fd87 	bl	800126c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff fda1 	bl	80012a6 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001764:	2107      	movs	r1, #7
 8001766:	2004      	movs	r0, #4
 8001768:	f7ff fdba 	bl	80012e0 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f7ff fc32 	bl	8000fd8 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001774:	200a      	movs	r0, #10
 8001776:	f7ff fdce 	bl	8001316 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 800177a:	2120      	movs	r1, #32
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fddb 	bl	8001338 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001782:	2101      	movs	r1, #1
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fdf3 	bl	8001370 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800178a:	2101      	movs	r1, #1
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fe24 	bl	80013da <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001792:	2003      	movs	r0, #3
 8001794:	f7ff fe56 	bl	8001444 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8001798:	2014      	movs	r0, #20
 800179a:	f7ff fb9b 	bl	8000ed4 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff feff 	bl	80015a2 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff ff19 	bl	80015dc <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff ff33 	bl	8001616 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80017b0:	2014      	movs	r0, #20
 80017b2:	f7ff fb8f 	bl	8000ed4 <nRF24_Delay>

	nRF24_ClearInterrupts();
 80017b6:	f7ff fee1 	bl	800157c <nRF24_ClearInterrupts>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001a4 	.word	0x200001a4
 80017c8:	40020800 	.word	0x40020800

080017cc <buffer_add>:
uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk
uint32_t PackageTimer;

//TRANSMISSION
// Add data to the ring buffer
void buffer_add(uint8_t* data, uint16_t length) {
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	81fb      	strh	r3, [r7, #14]
 80017dc:	e020      	b.n	8001820 <buffer_add+0x54>
        tx_ring_buffer[tx_head] = data[i];
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <buffer_add+0x68>)
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <buffer_add+0x6c>)
 80017ec:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % BUFFER_SIZE;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <buffer_add+0x68>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a11      	ldr	r2, [pc, #68]	; (800183c <buffer_add+0x70>)
 80017f6:	fb82 1203 	smull	r1, r2, r2, r3
 80017fa:	1191      	asrs	r1, r2, #6
 80017fc:	17da      	asrs	r2, r3, #31
 80017fe:	1a8a      	subs	r2, r1, r2
 8001800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001804:	fb01 f202 	mul.w	r2, r1, r2
 8001808:	1a9a      	subs	r2, r3, r2
 800180a:	b292      	uxth	r2, r2
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <buffer_add+0x68>)
 800180e:	801a      	strh	r2, [r3, #0]
        tx_size++;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <buffer_add+0x74>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <buffer_add+0x74>)
 8001818:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < length; i++) {
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	3301      	adds	r3, #1
 800181e:	81fb      	strh	r3, [r7, #14]
 8001820:	89fa      	ldrh	r2, [r7, #14]
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3da      	bcc.n	80017de <buffer_add+0x12>
    }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000594 	.word	0x20000594
 8001838:	200001ac 	.word	0x200001ac
 800183c:	10624dd3 	.word	0x10624dd3
 8001840:	20000598 	.word	0x20000598

08001844 <buffer_get_chunk>:

// Get 32-byte chunk from the ring buffer
uint8_t buffer_get_chunk(uint8_t* chunk) {
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    if (tx_size == 0) return 0;  // No data to send
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <buffer_get_chunk+0x78>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <buffer_get_chunk+0x14>
 8001854:	2300      	movs	r3, #0
 8001856:	e02c      	b.n	80018b2 <buffer_get_chunk+0x6e>

    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e021      	b.n	80018a2 <buffer_get_chunk+0x5e>
        chunk[i] = tx_ring_buffer[tx_tail];
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <buffer_get_chunk+0x7c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <buffer_get_chunk+0x80>)
 800186c:	5c52      	ldrb	r2, [r2, r1]
 800186e:	701a      	strb	r2, [r3, #0]
        tx_tail = (tx_tail + 1) % BUFFER_SIZE;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <buffer_get_chunk+0x7c>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <buffer_get_chunk+0x84>)
 8001878:	fb82 1203 	smull	r1, r2, r2, r3
 800187c:	1191      	asrs	r1, r2, #6
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	1a8a      	subs	r2, r1, r2
 8001882:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001886:	fb01 f202 	mul.w	r2, r1, r2
 800188a:	1a9a      	subs	r2, r3, r2
 800188c:	b292      	uxth	r2, r2
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <buffer_get_chunk+0x7c>)
 8001890:	801a      	strh	r2, [r3, #0]
        tx_size--;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <buffer_get_chunk+0x78>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <buffer_get_chunk+0x78>)
 800189a:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3301      	adds	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b1f      	cmp	r3, #31
 80018a6:	d803      	bhi.n	80018b0 <buffer_get_chunk+0x6c>
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <buffer_get_chunk+0x78>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1d6      	bne.n	800185e <buffer_get_chunk+0x1a>
    }
    return 1;  // Chunk is ready to send
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000598 	.word	0x20000598
 80018c0:	20000596 	.word	0x20000596
 80018c4:	200001ac 	.word	0x200001ac
 80018c8:	10624dd3 	.word	0x10624dd3

080018cc <send_message>:

int32_t send_message(uint32_t delay_time){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if(tx_size == 0){
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <send_message+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <send_message+0x14>
			return 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	e021      	b.n	8001924 <send_message+0x58>
		}
	if (tx_size > 0 && HAL_GetTick() - PackageTimer > delay_time) {
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <send_message+0x60>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01c      	beq.n	8001922 <send_message+0x56>
 80018e8:	f000 fbc4 	bl	8002074 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <send_message+0x64>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d213      	bcs.n	8001922 <send_message+0x56>
		if (buffer_get_chunk(chunk)) {
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <send_message+0x68>)
 80018fc:	f7ff ffa2 	bl	8001844 <buffer_get_chunk>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <send_message+0x44>
		    nRF24_WriteTXPayload(chunk);  // Send 32-byte chunk
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <send_message+0x68>)
 8001908:	f7ff fea2 	bl	8001650 <nRF24_WriteTXPayload>
		    nRF24_WaitTX();               // Wait until the transmission is completed
 800190c:	f7ff feae 	bl	800166c <nRF24_WaitTX>
		    }
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate transmission
 8001910:	2120      	movs	r1, #32
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <send_message+0x6c>)
 8001914:	f000 fea0 	bl	8002658 <HAL_GPIO_TogglePin>
		PackageTimer = HAL_GetTick();
 8001918:	f000 fbac 	bl	8002074 <HAL_GetTick>
 800191c:	4603      	mov	r3, r0
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <send_message+0x64>)
 8001920:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000598 	.word	0x20000598
 8001930:	200005bc 	.word	0x200005bc
 8001934:	2000059c 	.word	0x2000059c
 8001938:	40020000 	.word	0x40020000

0800193c <buffer_add_rx>:
uint8_t rx_ring_buffer[BUFFER_SIZE];  // Ring buffer to store received data
uint16_t rx_head = 0, rx_tail = 0;    // Head and tail for the ring buffer
//uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk

// Add received chunk to the ring buffer
void buffer_add_rx(uint8_t* data, uint16_t length) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	81fb      	strh	r3, [r7, #14]
 800194c:	e01b      	b.n	8001986 <buffer_add_rx+0x4a>
        rx_ring_buffer[rx_head] = data[i];
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <buffer_add_rx+0x60>)
 8001956:	8812      	ldrh	r2, [r2, #0]
 8001958:	7819      	ldrb	r1, [r3, #0]
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <buffer_add_rx+0x64>)
 800195c:	5499      	strb	r1, [r3, r2]
        rx_head = (rx_head + 1) % BUFFER_SIZE;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <buffer_add_rx+0x60>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <buffer_add_rx+0x68>)
 8001966:	fb82 1203 	smull	r1, r2, r2, r3
 800196a:	1191      	asrs	r1, r2, #6
 800196c:	17da      	asrs	r2, r3, #31
 800196e:	1a8a      	subs	r2, r1, r2
 8001970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001974:	fb01 f202 	mul.w	r2, r1, r2
 8001978:	1a9a      	subs	r2, r3, r2
 800197a:	b292      	uxth	r2, r2
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <buffer_add_rx+0x60>)
 800197e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	3301      	adds	r3, #1
 8001984:	81fb      	strh	r3, [r7, #14]
 8001986:	89fa      	ldrh	r2, [r7, #14]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	429a      	cmp	r2, r3
 800198c:	d3df      	bcc.n	800194e <buffer_add_rx+0x12>
    }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200009a8 	.word	0x200009a8
 80019a0:	200005c0 	.word	0x200005c0
 80019a4:	10624dd3 	.word	0x10624dd3

080019a8 <buffer_get_full_message>:

// Extract full message from the ring buffer
void buffer_get_full_message(uint8_t* message, uint16_t length) {
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80019b4:	2300      	movs	r3, #0
 80019b6:	81fb      	strh	r3, [r7, #14]
 80019b8:	e01c      	b.n	80019f4 <buffer_get_full_message+0x4c>
        message[i] = rx_ring_buffer[rx_tail];
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <buffer_get_full_message+0x60>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <buffer_get_full_message+0x64>)
 80019c8:	5c52      	ldrb	r2, [r2, r1]
 80019ca:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % BUFFER_SIZE;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <buffer_get_full_message+0x60>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <buffer_get_full_message+0x68>)
 80019d4:	fb82 1203 	smull	r1, r2, r2, r3
 80019d8:	1191      	asrs	r1, r2, #6
 80019da:	17da      	asrs	r2, r3, #31
 80019dc:	1a8a      	subs	r2, r1, r2
 80019de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e2:	fb01 f202 	mul.w	r2, r1, r2
 80019e6:	1a9a      	subs	r2, r3, r2
 80019e8:	b292      	uxth	r2, r2
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <buffer_get_full_message+0x60>)
 80019ec:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	3301      	adds	r3, #1
 80019f2:	81fb      	strh	r3, [r7, #14]
 80019f4:	89fa      	ldrh	r2, [r7, #14]
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3de      	bcc.n	80019ba <buffer_get_full_message+0x12>
    }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	200009aa 	.word	0x200009aa
 8001a0c:	200005c0 	.word	0x200005c0
 8001a10:	10624dd3 	.word	0x10624dd3

08001a14 <flush_rx_buffer>:

// Function to flush the transmission ring buffer
void flush_rx_buffer() {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
    // Reset the head, tail, and size to flush the buffer
    rx_head = 0;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <flush_rx_buffer+0x20>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	801a      	strh	r2, [r3, #0]
    rx_tail = 0;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <flush_rx_buffer+0x24>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
    //rx_size = 0;

    // Optionally clear the buffer content
    memset(rx_ring_buffer, 0, sizeof(rx_ring_buffer));
 8001a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <flush_rx_buffer+0x28>)
 8001a2c:	f005 fcf4 	bl	8007418 <memset>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200009a8 	.word	0x200009a8
 8001a38:	200009aa 	.word	0x200009aa
 8001a3c:	200005c0 	.word	0x200005c0

08001a40 <receive_message>:

int32_t receive_message(){
 8001a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
	if (nRF24_RXAvailible()) {
 8001a48:	f7ff fe4c 	bl	80016e4 <nRF24_RXAvailible>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d045      	beq.n	8001ade <receive_message+0x9e>
		    nRF24_ReadRXPaylaod(chunk);  // Receive 32-byte chunk
 8001a52:	4826      	ldr	r0, [pc, #152]	; (8001aec <receive_message+0xac>)
 8001a54:	f7ff fe34 	bl	80016c0 <nRF24_ReadRXPaylaod>
		    buffer_add_rx(chunk, NRF24_PAYLOAD_SIZE);  // Store received chunk in the buffer
 8001a58:	2120      	movs	r1, #32
 8001a5a:	4824      	ldr	r0, [pc, #144]	; (8001aec <receive_message+0xac>)
 8001a5c:	f7ff ff6e 	bl	800193c <buffer_add_rx>
		    //MessageLength = sprintf(Message, "%s\n\r", chunk);
		    //HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);

		    // Optionally, you can check if the entire message is received and process it
		    if (rx_head >= expected_message_size) {
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <receive_message+0xb0>)
 8001a62:	881a      	ldrh	r2, [r3, #0]
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <receive_message+0xb4>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d334      	bcc.n	8001ad6 <receive_message+0x96>
 8001a6c:	466b      	mov	r3, sp
 8001a6e:	461e      	mov	r6, r3
		    uint8_t received_message[expected_message_size];
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <receive_message+0xb4>)
 8001a72:	8819      	ldrh	r1, [r3, #0]
 8001a74:	460b      	mov	r3, r1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	b28b      	uxth	r3, r1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4698      	mov	r8, r3
 8001a80:	4691      	mov	r9, r2
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a96:	b28b      	uxth	r3, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	4615      	mov	r5, r2
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	00eb      	lsls	r3, r5, #3
 8001aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aac:	00e2      	lsls	r2, r4, #3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	ebad 0d03 	sub.w	sp, sp, r3
 8001aba:	466b      	mov	r3, sp
 8001abc:	3300      	adds	r3, #0
 8001abe:	603b      	str	r3, [r7, #0]
		    buffer_get_full_message(received_message, expected_message_size);  // Extract full message
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <receive_message+0xb4>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f7ff ff6e 	bl	80019a8 <buffer_get_full_message>
//		          PrivKey_st.mModulusSize = sizeof(Modulus);
//		          PrivKey_st.pmExponent = (uint8_t *) PrivateExponent;
//		          PrivKey_st.pmModulus = (uint8_t *) Modulus;
//		          status = RSA_Decrypt(&PrivKey_st, received_message, output, &outputSize);

		     flush_rx_buffer();
 8001acc:	f7ff ffa2 	bl	8001a14 <flush_rx_buffer>
		     return 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	46b5      	mov	sp, r6
 8001ad4:	e004      	b.n	8001ae0 <receive_message+0xa0>
		     }

		     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate reception
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	4807      	ldr	r0, [pc, #28]	; (8001af8 <receive_message+0xb8>)
 8001ada:	f000 fdbd 	bl	8002658 <HAL_GPIO_TogglePin>
		}
	return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aea:	bf00      	nop
 8001aec:	2000059c 	.word	0x2000059c
 8001af0:	200009a8 	.word	0x200009a8
 8001af4:	20000002 	.word	0x20000002
 8001af8:	40020000 	.word	0x40020000

08001afc <RSA_Driver_init>:

RSApubKey_stt PubKey_st;
RSAprivKey_stt PrivKey_st;


void RSA_Driver_init(uint8_t key_number){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	const uint8_t* key_data = get_rsa_key_set(key_number);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f86f 	bl	8001bec <get_rsa_key_set>
 8001b0e:	60f8      	str	r0, [r7, #12]
	if (key_data != NULL) {
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00e      	beq.n	8001b34 <RSA_Driver_init+0x38>
		PubKey_st.mExponentSize = 3;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <RSA_Driver_init+0x64>)
 8001b18:	2203      	movs	r2, #3
 8001b1a:	60da      	str	r2, [r3, #12]
		PubKey_st.mModulusSize = 256;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <RSA_Driver_init+0x64>)
 8001b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b22:	605a      	str	r2, [r3, #4]
		PubKey_st.pmExponent = (uint8_t *) key_data + 256;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <RSA_Driver_init+0x64>)
 8001b2c:	6093      	str	r3, [r2, #8]
		PubKey_st.pmModulus = (uint8_t *) key_data;
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <RSA_Driver_init+0x64>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6013      	str	r3, [r2, #0]
	}
	status = RSA_Encrypt(&PubKey_st, Message, sizeof(Message), output);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <RSA_Driver_init+0x68>)
 8001b36:	2210      	movs	r2, #16
 8001b38:	490b      	ldr	r1, [pc, #44]	; (8001b68 <RSA_Driver_init+0x6c>)
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <RSA_Driver_init+0x64>)
 8001b3c:	f000 f818 	bl	8001b70 <RSA_Encrypt>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <RSA_Driver_init+0x70>)
 8001b44:	6013      	str	r3, [r2, #0]
	if (status == RSA_SUCCESS){
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <RSA_Driver_init+0x70>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d104      	bne.n	8001b58 <RSA_Driver_init+0x5c>
		buffer_add(output, sizeof(output));
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <RSA_Driver_init+0x68>)
 8001b54:	f7ff fe3a 	bl	80017cc <buffer_add>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20001aac 	.word	0x20001aac
 8001b64:	200019ac 	.word	0x200019ac
 8001b68:	08007740 	.word	0x08007740
 8001b6c:	20000024 	.word	0x20000024

08001b70 <RSA_Encrypt>:

int32_t RSA_Encrypt(RSApubKey_stt *P_pPubKey,
                    const uint8_t *P_pInputMessage,
                    int32_t P_InputSize,
                    uint8_t *P_pOutput)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09c      	sub	sp, #112	; 0x70
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  int32_t status = RNG_SUCCESS ;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  RNGstate_stt RNGstate;
  RNGinitInput_stt RNGinit_st;
  RNGinit_st.pmEntropyData = entropy_data;
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <RSA_Encrypt+0x74>)
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  RNGinit_st.mEntropyDataSize = sizeof(entropy_data);
 8001b86:	2320      	movs	r3, #32
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RNGinit_st.mPersDataSize = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RNGinit_st.mNonceSize = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34

  status = RNGinit(&RNGinit_st, &RNGstate);
 8001b92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 fbed 	bl	800737c <RNGinit>
 8001ba2:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (status == RNG_SUCCESS)
 8001ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d116      	bne.n	8001bd8 <RSA_Encrypt+0x68>
  {
    RSAinOut_stt inOut_st;
    membuf_stt mb;

    mb.mSize = sizeof(preallocated_buffer);
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	833b      	strh	r3, [r7, #24]
    mb.mUsed = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	837b      	strh	r3, [r7, #26]
    mb.pmBuf = preallocated_buffer;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <RSA_Encrypt+0x78>)
 8001bb6:	617b      	str	r3, [r7, #20]

    /* Fill the RSAinOut_stt */
    inOut_st.pmInput = P_pInputMessage;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	61fb      	str	r3, [r7, #28]
    inOut_st.mInputSize = P_InputSize;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	623b      	str	r3, [r7, #32]
    inOut_st.pmOutput = P_pOutput;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Encrypt the message, this function will write sizeof(modulus) data */
    status = RSA_PKCS1v15_Encrypt(P_pPubKey, &inOut_st, &RNGstate, &mb);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bcc:	f107 011c 	add.w	r1, r7, #28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f005 fa55 	bl	8007080 <RSA_PKCS1v15_Encrypt>
 8001bd6:	66f8      	str	r0, [r7, #108]	; 0x6c
  }
  return(status);
 8001bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3770      	adds	r7, #112	; 0x70
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000004 	.word	0x20000004
 8001be8:	200009ac 	.word	0x200009ac

08001bec <get_rsa_key_set>:
		    0x41, 0xD9, 0x4A, 0x32, 0x3C, 0x75, 0x43, 0x19, 0xA8, 0x1F, 0x41, 0x90, 0x92, 0x1E, 0xF7, 0x18, 0xE8, 0x0C,
		    0x55, 0xC2, 0x98, 0x01
};

// Funkcja do pobrania wskaźnika na wybrany zestaw kluczy w tablicy
const uint8_t* get_rsa_key_set(uint8_t index) {
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
    if (index >= RSA_KEY_SETS_COUNT) {
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b31      	cmp	r3, #49	; 0x31
 8001bfa:	d901      	bls.n	8001c00 <get_rsa_key_set+0x14>
        return 0; // Zwraca 0, jeśli indeks jest poza zakresem
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e007      	b.n	8001c10 <get_rsa_key_set+0x24>
    }
    return &rsa_keys_bin[index * RSA_KEY_SET_SIZE];
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	4613      	mov	r3, r2
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <get_rsa_key_set+0x30>)
 8001c0e:	4413      	add	r3, r2
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	08007750 	.word	0x08007750

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_MspInit+0x48>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_MspInit+0x48>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_MspInit+0x48>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_MspInit+0x48>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_MspInit+0x48>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_MspInit+0x48>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_CRC_MspInit+0x38>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10d      	bne.n	8001c9a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_CRC_MspInit+0x3c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_CRC_MspInit+0x3c>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_CRC_MspInit+0x3c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40023000 	.word	0x40023000
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_SPI_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12b      	bne.n	8001d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d06:	2338      	movs	r3, #56	; 0x38
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d16:	2305      	movs	r3, #5
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x8c>)
 8001d22:	f000 faff 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40013000 	.word	0x40013000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020400 	.word	0x40020400

08001d3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_TIM_PWM_MspInit+0x38>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10d      	bne.n	8001d6a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d116      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	201c      	movs	r0, #28
 8001dc0:	f000 fa5d 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc4:	201c      	movs	r0, #28
 8001dc6:	f000 fa76 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dca:	e038      	b.n	8001e3e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_TIM_Base_MspInit+0xd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d133      	bne.n	8001e3e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_TIM_Base_MspInit+0xcc>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e0e:	2340      	movs	r3, #64	; 0x40
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <HAL_TIM_Base_MspInit+0xd4>)
 8001e2a:	f000 fa7b 	bl	8002324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	201d      	movs	r0, #29
 8001e34:	f000 fa23 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e38:	201d      	movs	r0, #29
 8001e3a:	f000 fa3c 	bl	80022b6 <HAL_NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_TIM_MspPostInit+0x68>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d11e      	bne.n	8001eb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_TIM_MspPostInit+0x6c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <HAL_TIM_MspPostInit+0x6c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_TIM_MspPostInit+0x6c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_TIM_MspPostInit+0x70>)
 8001eb0:	f000 fa38 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <MemManage_Handler+0x4>

08001eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0e:	f000 f89f 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 8001f1a:	2040      	movs	r0, #64	; 0x40
 8001f1c:	f000 fbb6 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TIM2_IRQHandler+0x10>)
 8001f2a:	f002 f91b 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000100 	.word	0x20000100

08001f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM3_IRQHandler+0x10>)
 8001f3e:	f002 f911 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000148 	.word	0x20000148

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f74:	4c0b      	ldr	r4, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f82:	f7ff ffe3 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f86:	f005 fa15 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8a:	f7fe fc45 	bl	8000818 <main>
  bx  lr    
 8001f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001f9c:	08007e9c 	.word	0x08007e9c
  ldr r2, =_sbss
 8001fa0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001fa4:	20001ac0 	.word	0x20001ac0

08001fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_Init+0x40>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_Init+0x40>)
 8001fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_Init+0x40>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f947 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7ff fe1e 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f95f 	bl	80022d2 <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 f927 	bl	800227e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000028 	.word	0x20000028
 8002048:	20000030 	.word	0x20000030
 800204c:	2000002c 	.word	0x2000002c

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_IncTick+0x1c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_IncTick+0x20>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_IncTick+0x20>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000030 	.word	0x20000030
 8002070:	20001abc 	.word	0x20001abc

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_GetTick+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20001abc 	.word	0x20001abc

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff fff0 	bl	8002074 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffe0 	bl	8002074 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000030 	.word	0x20000030

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4906      	ldr	r1, [pc, #24]	; (8002168 <__NVIC_EnableIRQ+0x34>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
         );
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ff90 	bl	800216c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff2d 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff42 	bl	8002118 <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff90 	bl	80021c0 <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5f 	bl	800216c <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff35 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e00e      	b.n	800231a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	795b      	ldrb	r3, [r3, #5]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fcad 	bl	8001c6c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e159      	b.n	80025f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8148 	bne.w	80025ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	2b02      	cmp	r3, #2
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d017      	beq.n	8002414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a2 	beq.w	80025ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a55      	ldr	r2, [pc, #340]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a51      	ldr	r2, [pc, #324]	; (800260c <HAL_GPIO_Init+0x2e8>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a48      	ldr	r2, [pc, #288]	; (8002610 <HAL_GPIO_Init+0x2ec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x202>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x2f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x1fe>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_GPIO_Init+0x2f4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x1fa>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x2f8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x1f6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x1f2>
 8002512:	2304      	movs	r3, #4
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002516:	2307      	movs	r3, #7
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4934      	ldr	r1, [pc, #208]	; (800260c <HAL_GPIO_Init+0x2e8>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x300>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_GPIO_Init+0x300>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_GPIO_Init+0x300>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_GPIO_Init+0x300>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_GPIO_Init+0x300>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_GPIO_Init+0x300>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_GPIO_Init+0x300>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <HAL_GPIO_Init+0x300>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f aea2 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40020000 	.word	0x40020000
 8002614:	40020400 	.word	0x40020400
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021000 	.word	0x40021000
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43d9      	mvns	r1, r3
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	400b      	ands	r3, r1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	619a      	str	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
	...

0800268c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f806 	bl	80026bc <HAL_GPIO_EXTI_Callback>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40013c00 	.word	0x40013c00

080026bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e267      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d075      	beq.n	80027da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ee:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d00c      	beq.n	8002714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	4b85      	ldr	r3, [pc, #532]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002702:	2b08      	cmp	r3, #8
 8002704:	d112      	bne.n	800272c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002712:	d10b      	bne.n	800272c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	4b7e      	ldr	r3, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d05b      	beq.n	80027d8 <HAL_RCC_OscConfig+0x108>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d157      	bne.n	80027d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e242      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002734:	d106      	bne.n	8002744 <HAL_RCC_OscConfig+0x74>
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e01d      	b.n	8002780 <HAL_RCC_OscConfig+0xb0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x98>
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6f      	ldr	r2, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0xb0>
 8002768:	4b69      	ldr	r3, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a68      	ldr	r2, [pc, #416]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b66      	ldr	r3, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fc74 	bl	8002074 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fc70 	bl	8002074 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e207      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0xc0>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fc60 	bl	8002074 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff fc5c 	bl	8002074 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1f3      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	4b51      	ldr	r3, [pc, #324]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0xe8>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d063      	beq.n	80028ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e6:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d11c      	bne.n	8002838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d116      	bne.n	8002838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x152>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1c7      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4937      	ldr	r1, [pc, #220]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	e03a      	b.n	80028ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002840:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x244>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7ff fc15 	bl	8002074 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284e:	f7ff fc11 	bl	8002074 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1a8      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4925      	ldr	r1, [pc, #148]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x244>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7ff fbf4 	bl	8002074 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002890:	f7ff fbf0 	bl	8002074 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e187      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d036      	beq.n	8002928 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_RCC_OscConfig+0x248>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7ff fbd4 	bl	8002074 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d0:	f7ff fbd0 	bl	8002074 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e167      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x240>)
 80028e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x200>
 80028ee:	e01b      	b.n	8002928 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_OscConfig+0x248>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fbbd 	bl	8002074 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	e00e      	b.n	800291c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fe:	f7ff fbb9 	bl	8002074 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d907      	bls.n	800291c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e150      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
 8002910:	40023800 	.word	0x40023800
 8002914:	42470000 	.word	0x42470000
 8002918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ea      	bne.n	80028fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8097 	beq.w	8002a64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	4b7d      	ldr	r3, [pc, #500]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a7c      	ldr	r2, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b7a      	ldr	r3, [pc, #488]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b77      	ldr	r3, [pc, #476]	; (8002b44 <HAL_RCC_OscConfig+0x474>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d118      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b74      	ldr	r3, [pc, #464]	; (8002b44 <HAL_RCC_OscConfig+0x474>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a73      	ldr	r2, [pc, #460]	; (8002b44 <HAL_RCC_OscConfig+0x474>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7ff fb79 	bl	8002074 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002986:	f7ff fb75 	bl	8002074 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e10c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_OscConfig+0x474>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x2ea>
 80029ac:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	e01c      	b.n	80029f4 <HAL_RCC_OscConfig+0x324>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x30c>
 80029c2:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a5e      	ldr	r2, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a5b      	ldr	r2, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0x324>
 80029dc:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7ff fb3a 	bl	8002074 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7ff fb36 	bl	8002074 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0cb      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ee      	beq.n	8002a04 <HAL_RCC_OscConfig+0x334>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7ff fb24 	bl	8002074 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7ff fb20 	bl	8002074 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0b5      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ee      	bne.n	8002a30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80a1 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d05c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d141      	bne.n	8002b06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_RCC_OscConfig+0x478>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff faf4 	bl	8002074 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a90:	f7ff faf0 	bl	8002074 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e087      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	041b      	lsls	r3, r3, #16
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	491b      	ldr	r1, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x478>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7ff fac9 	bl	8002074 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7ff fac5 	bl	8002074 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e05c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x416>
 8002b04:	e054      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x478>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fab2 	bl	8002074 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b14:	f7ff faae 	bl	8002074 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e045      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x470>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x444>
 8002b32:	e03d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e038      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x4ec>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d028      	beq.n	8002bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d121      	bne.n	8002bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d11a      	bne.n	8002bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d111      	bne.n	8002bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	3b01      	subs	r3, #1
 8002b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0cc      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d90c      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b8      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d044      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d119      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e06f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e067      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4934      	ldr	r1, [pc, #208]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb0:	f7ff f9e0 	bl	8002074 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7ff f9dc 	bl	8002074 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e04f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d20c      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e032      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f821 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f942 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023c00 	.word	0x40023c00
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08007954 	.word	0x08007954
 8002d84:	20000028 	.word	0x20000028
 8002d88:	2000002c 	.word	0x2000002c

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d90:	b090      	sub	sp, #64	; 0x40
 8002d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d00d      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x40>
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	f200 80a2 	bhi.w	8002efa <HAL_RCC_GetSysClockFreq+0x16e>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dbe:	e09c      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc0:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dc4:	e09c      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc6:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dca:	e099      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd6:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d027      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	2200      	movs	r2, #0
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	627a      	str	r2, [r7, #36]	; 0x24
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002df4:	2100      	movs	r1, #0
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002df8:	fb03 f201 	mul.w	r2, r3, r1
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	4a43      	ldr	r2, [pc, #268]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e06:	fba0 2102 	umull	r2, r1, r0, r2
 8002e0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e10:	4413      	add	r3, r2
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	2200      	movs	r2, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	61fa      	str	r2, [r7, #28]
 8002e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e24:	f7fd f9d8 	bl	80001d8 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e30:	e055      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	2200      	movs	r2, #0
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	617a      	str	r2, [r7, #20]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	4652      	mov	r2, sl
 8002e4a:	465b      	mov	r3, fp
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	0159      	lsls	r1, r3, #5
 8002e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5a:	0150      	lsls	r0, r2, #5
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	ebb2 080a 	subs.w	r8, r2, sl
 8002e64:	eb63 090b 	sbc.w	r9, r3, fp
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e74:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e78:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e7c:	ebb2 0408 	subs.w	r4, r2, r8
 8002e80:	eb63 0509 	sbc.w	r5, r3, r9
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	00eb      	lsls	r3, r5, #3
 8002e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e92:	00e2      	lsls	r2, r4, #3
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	eb14 030a 	adds.w	r3, r4, sl
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	eb45 030b 	adc.w	r3, r5, fp
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	028b      	lsls	r3, r1, #10
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	4604      	mov	r4, r0
 8002eba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	028a      	lsls	r2, r1, #10
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2200      	movs	r2, #0
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	60fa      	str	r2, [r7, #12]
 8002ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed2:	f7fd f981 	bl	80001d8 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4613      	mov	r3, r2
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef8:	e002      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3740      	adds	r7, #64	; 0x40
 8002f06:	46bd      	mov	sp, r7
 8002f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	00f42400 	.word	0x00f42400
 8002f14:	017d7840 	.word	0x017d7840

08002f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07b      	b.n	8003022 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3a:	d009      	beq.n	8002f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
 8002f42:	e005      	b.n	8002f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe fe9e 	bl	8001cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0104 	and.w	r1, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0210 	and.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_SPI_Transmit+0x22>
 8003048:	2302      	movs	r3, #2
 800304a:	e126      	b.n	800329a <HAL_SPI_Transmit+0x270>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003054:	f7ff f80e 	bl	8002074 <HAL_GetTick>
 8003058:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800306e:	e10b      	b.n	8003288 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_SPI_Transmit+0x52>
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003080:	e102      	b.n	8003288 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	d10f      	bne.n	80030ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d007      	beq.n	8003108 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003110:	d14b      	bne.n	80031aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_Transmit+0xf6>
 800311a:	8afb      	ldrh	r3, [r7, #22]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d13e      	bne.n	800319e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	881a      	ldrh	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003144:	e02b      	b.n	800319e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	d112      	bne.n	800317a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	881a      	ldrh	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	86da      	strh	r2, [r3, #54]	; 0x36
 8003178:	e011      	b.n	800319e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317a:	f7fe ff7b 	bl	8002074 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d803      	bhi.n	8003192 <HAL_SPI_Transmit+0x168>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d102      	bne.n	8003198 <HAL_SPI_Transmit+0x16e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800319c:	e074      	b.n	8003288 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ce      	bne.n	8003146 <HAL_SPI_Transmit+0x11c>
 80031a8:	e04c      	b.n	8003244 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_SPI_Transmit+0x18e>
 80031b2:	8afb      	ldrh	r3, [r7, #22]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d140      	bne.n	800323a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031de:	e02c      	b.n	800323a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d113      	bne.n	8003216 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
 8003214:	e011      	b.n	800323a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003216:	f7fe ff2d 	bl	8002074 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d803      	bhi.n	800322e <HAL_SPI_Transmit+0x204>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d102      	bne.n	8003234 <HAL_SPI_Transmit+0x20a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003238:	e026      	b.n	8003288 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1cd      	bne.n	80031e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fbcb 	bl	80039e4 <SPI_EndRxTxTransaction>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e000      	b.n	8003288 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003298:	7ffb      	ldrb	r3, [r7, #31]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d112      	bne.n	80032e6 <HAL_SPI_Receive+0x44>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10e      	bne.n	80032e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2204      	movs	r2, #4
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8f1 	bl	80034c4 <HAL_SPI_TransmitReceive>
 80032e2:	4603      	mov	r3, r0
 80032e4:	e0ea      	b.n	80034bc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_SPI_Receive+0x52>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0e3      	b.n	80034bc <HAL_SPI_Receive+0x21a>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fc:	f7fe feba 	bl	8002074 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003312:	e0ca      	b.n	80034aa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Receive+0x7e>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003324:	e0c1      	b.n	80034aa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2204      	movs	r2, #4
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336c:	d10f      	bne.n	800338e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d007      	beq.n	80033ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d162      	bne.n	800347a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033b4:	e02e      	b.n	8003414 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d115      	bne.n	80033f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f103 020c 	add.w	r2, r3, #12
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ee:	e011      	b.n	8003414 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f0:	f7fe fe40 	bl	8002074 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d803      	bhi.n	8003408 <HAL_SPI_Receive+0x166>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d102      	bne.n	800340e <HAL_SPI_Receive+0x16c>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003412:	e04a      	b.n	80034aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1cb      	bne.n	80033b6 <HAL_SPI_Receive+0x114>
 800341e:	e031      	b.n	8003484 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d113      	bne.n	8003456 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	b292      	uxth	r2, r2
 800343a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003454:	e011      	b.n	800347a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003456:	f7fe fe0d 	bl	8002074 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d803      	bhi.n	800346e <HAL_SPI_Receive+0x1cc>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d102      	bne.n	8003474 <HAL_SPI_Receive+0x1d2>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003478:	e017      	b.n	80034aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1cd      	bne.n	8003420 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fa45 	bl	8003918 <SPI_EndRxTransaction>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
 80034a6:	e000      	b.n	80034aa <HAL_SPI_Receive+0x208>
  }

error :
 80034a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034d2:	2301      	movs	r3, #1
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x26>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e18a      	b.n	8003800 <HAL_SPI_TransmitReceive+0x33c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034f2:	f7fe fdbf 	bl	8002074 <HAL_GetTick>
 80034f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800350c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003510:	2b01      	cmp	r3, #1
 8003512:	d00f      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x70>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d107      	bne.n	800352c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <HAL_SPI_TransmitReceive+0x68>
 8003524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003528:	2b04      	cmp	r3, #4
 800352a:	d003      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003532:	e15b      	b.n	80037ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x82>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x82>
 8003540:	887b      	ldrh	r3, [r7, #2]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800354c:	e14e      	b.n	80037ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b04      	cmp	r3, #4
 8003558:	d003      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2205      	movs	r2, #5
 800355e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	887a      	ldrh	r2, [r7, #2]
 800358a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d007      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035be:	d178      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_SPI_TransmitReceive+0x10a>
 80035c8:	8b7b      	ldrh	r3, [r7, #26]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d166      	bne.n	800369c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f2:	e053      	b.n	800369c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d11b      	bne.n	800363a <HAL_SPI_TransmitReceive+0x176>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d016      	beq.n	800363a <HAL_SPI_TransmitReceive+0x176>
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d113      	bne.n	800363a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d119      	bne.n	800367c <HAL_SPI_TransmitReceive+0x1b8>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d014      	beq.n	800367c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	b292      	uxth	r2, r2
 800365e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	1c9a      	adds	r2, r3, #2
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003678:	2301      	movs	r3, #1
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800367c:	f7fe fcfa 	bl	8002074 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003688:	429a      	cmp	r2, r3
 800368a:	d807      	bhi.n	800369c <HAL_SPI_TransmitReceive+0x1d8>
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d003      	beq.n	800369c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800369a:	e0a7      	b.n	80037ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1a6      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x130>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1a1      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x130>
 80036b0:	e07c      	b.n	80037ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x1fc>
 80036ba:	8b7b      	ldrh	r3, [r7, #26]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d16b      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e6:	e057      	b.n	8003798 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d11c      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x26c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d017      	beq.n	8003730 <HAL_SPI_TransmitReceive+0x26c>
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d114      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d119      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x2ae>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d014      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800376e:	2301      	movs	r3, #1
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003772:	f7fe fc7f 	bl	8002074 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800377e:	429a      	cmp	r2, r3
 8003780:	d803      	bhi.n	800378a <HAL_SPI_TransmitReceive+0x2c6>
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d102      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x2cc>
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003796:	e029      	b.n	80037ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1a2      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x224>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d19d      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f917 	bl	80039e4 <SPI_EndRxTxTransaction>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037c8:	e010      	b.n	80037ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	e000      	b.n	80037ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003800:	4618      	mov	r0, r3
 8003802:	3730      	adds	r7, #48	; 0x30
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fe fc2c 	bl	8002074 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fe fc24 	bl	8002074 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e054      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d050      	beq.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fe fc14 	bl	8002074 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e017      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d19b      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000028 	.word	0x20000028

08003918 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392c:	d111      	bne.n	8003952 <SPI_EndRxTransaction+0x3a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003936:	d004      	beq.n	8003942 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003940:	d107      	bne.n	8003952 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003950:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395a:	d12a      	bne.n	80039b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003964:	d012      	beq.n	800398c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff ff49 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02d      	beq.n	80039d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e026      	b.n	80039da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	2101      	movs	r1, #1
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ff36 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01a      	beq.n	80039d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e013      	b.n	80039da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2101      	movs	r1, #1
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff ff23 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e000      	b.n	80039da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <SPI_EndRxTxTransaction+0x7c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <SPI_EndRxTxTransaction+0x80>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0d5b      	lsrs	r3, r3, #21
 80039fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0e:	d112      	bne.n	8003a36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fef4 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e00f      	b.n	8003a56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d0f2      	beq.n	8003a36 <SPI_EndRxTxTransaction+0x52>
 8003a50:	e000      	b.n	8003a54 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a52:	bf00      	nop
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000028 	.word	0x20000028
 8003a64:	165e9f81 	.word	0x165e9f81

08003a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e041      	b.n	8003afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe f974 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 ff40 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d001      	beq.n	8003b20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e03c      	b.n	8003b9a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_TIM_Base_Start+0x9c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d013      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_Base_Start+0xa0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_Base_Start+0xa4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIM_Base_Start+0xa8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_TIM_Base_Start+0xac>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d010      	beq.n	8003b98 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e007      	b.n	8003b98 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40014000 	.word	0x40014000

08003bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e041      	b.n	8003c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe f8ac 	bl	8001d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fe98 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_TIM_PWM_Start+0x24>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e022      	b.n	8003cc2 <HAL_TIM_PWM_Start+0x6a>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d109      	bne.n	8003c96 <HAL_TIM_PWM_Start+0x3e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e015      	b.n	8003cc2 <HAL_TIM_PWM_Start+0x6a>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d109      	bne.n	8003cb0 <HAL_TIM_PWM_Start+0x58>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e008      	b.n	8003cc2 <HAL_TIM_PWM_Start+0x6a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e068      	b.n	8003d9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_PWM_Start+0x82>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd8:	e013      	b.n	8003d02 <HAL_TIM_PWM_Start+0xaa>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_PWM_Start+0x92>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIM_PWM_Start+0xaa>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_PWM_Start+0xa2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf8:	e003      	b.n	8003d02 <HAL_TIM_PWM_Start+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 fa55 	bl	80051ba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <HAL_TIM_PWM_Start+0x14c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d107      	bne.n	8003d2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <HAL_TIM_PWM_Start+0x14c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x10e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d013      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x10e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_TIM_PWM_Start+0x150>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x10e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_TIM_PWM_Start+0x154>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x10e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <HAL_TIM_PWM_Start+0x158>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x10e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <HAL_TIM_PWM_Start+0x15c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d111      	bne.n	8003d8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d010      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	e007      	b.n	8003d9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40014000 	.word	0x40014000

08003db8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 f9f5 	bl	80051ba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_TIM_PWM_Stop+0xc4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d117      	bne.n	8003e0a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_TIM_PWM_Stop+0x52>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	f240 4344 	movw	r3, #1092	; 0x444
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_PWM_Stop+0x52>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x82>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	f240 4344 	movw	r3, #1092	; 0x444
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x82>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Stop+0x92>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e48:	e013      	b.n	8003e72 <HAL_TIM_PWM_Stop+0xba>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Stop+0xa2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	e00b      	b.n	8003e72 <HAL_TIM_PWM_Stop+0xba>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Stop+0xb2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	e003      	b.n	8003e72 <HAL_TIM_PWM_Stop+0xba>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40010000 	.word	0x40010000

08003e80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e041      	b.n	8003f16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f839 	bl	8003f1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 fd34 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_IC_Start_IT+0x1e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e013      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x46>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_IC_Start_IT+0x2e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x46>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_IC_Start_IT+0x3e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e003      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x46>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <HAL_TIM_IC_Start_IT+0x58>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e013      	b.n	8003fb0 <HAL_TIM_IC_Start_IT+0x80>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d104      	bne.n	8003f98 <HAL_TIM_IC_Start_IT+0x68>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e00b      	b.n	8003fb0 <HAL_TIM_IC_Start_IT+0x80>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d104      	bne.n	8003fa8 <HAL_TIM_IC_Start_IT+0x78>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e003      	b.n	8003fb0 <HAL_TIM_IC_Start_IT+0x80>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb2:	7bbb      	ldrb	r3, [r7, #14]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d102      	bne.n	8003fbe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb8:	7b7b      	ldrb	r3, [r7, #13]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d001      	beq.n	8003fc2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0c2      	b.n	8004148 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_IC_Start_IT+0xa2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	e013      	b.n	8003ffa <HAL_TIM_IC_Start_IT+0xca>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_IC_Start_IT+0xb2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_IC_Start_IT+0xca>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_IC_Start_IT+0xc2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	e003      	b.n	8003ffa <HAL_TIM_IC_Start_IT+0xca>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_IC_Start_IT+0xda>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	e013      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x102>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d104      	bne.n	800401a <HAL_TIM_IC_Start_IT+0xea>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004018:	e00b      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x102>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d104      	bne.n	800402a <HAL_TIM_IC_Start_IT+0xfa>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	e003      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x102>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d841      	bhi.n	80040bc <HAL_TIM_IC_Start_IT+0x18c>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_TIM_IC_Start_IT+0x110>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004075 	.word	0x08004075
 8004044:	080040bd 	.word	0x080040bd
 8004048:	080040bd 	.word	0x080040bd
 800404c:	080040bd 	.word	0x080040bd
 8004050:	08004087 	.word	0x08004087
 8004054:	080040bd 	.word	0x080040bd
 8004058:	080040bd 	.word	0x080040bd
 800405c:	080040bd 	.word	0x080040bd
 8004060:	08004099 	.word	0x08004099
 8004064:	080040bd 	.word	0x080040bd
 8004068:	080040bd 	.word	0x080040bd
 800406c:	080040bd 	.word	0x080040bd
 8004070:	080040ab 	.word	0x080040ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0202 	orr.w	r2, r2, #2
 8004082:	60da      	str	r2, [r3, #12]
      break;
 8004084:	e01d      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0204 	orr.w	r2, r2, #4
 8004094:	60da      	str	r2, [r3, #12]
      break;
 8004096:	e014      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	60da      	str	r2, [r3, #12]
      break;
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0210 	orr.w	r2, r2, #16
 80040b8:	60da      	str	r2, [r3, #12]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      break;
 80040c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d13e      	bne.n	8004146 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2201      	movs	r2, #1
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 f872 	bl	80051ba <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_TIM_IC_Start_IT+0x220>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <HAL_TIM_IC_Start_IT+0x1e2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d013      	beq.n	8004112 <HAL_TIM_IC_Start_IT+0x1e2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIM_IC_Start_IT+0x224>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIM_IC_Start_IT+0x1e2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_TIM_IC_Start_IT+0x228>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_TIM_IC_Start_IT+0x1e2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIM_IC_Start_IT+0x22c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIM_IC_Start_IT+0x1e2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_TIM_IC_Start_IT+0x230>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d010      	beq.n	8004146 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	e007      	b.n	8004146 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40014000 	.word	0x40014000

08004164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0202 	mvn.w	r2, #2
 8004190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc fb1c 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fb95 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb9b 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0204 	mvn.w	r2, #4
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc faf2 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb6b 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb71 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b08      	cmp	r3, #8
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0208 	mvn.w	r2, #8
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc fac8 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fb41 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb47 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b10      	cmp	r3, #16
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0210 	mvn.w	r2, #16
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2208      	movs	r2, #8
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fa9e 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fb17 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fb1d 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0201 	mvn.w	r2, #1
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 faf2 	bl	80048cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 f83e 	bl	8005390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fae1 	bl	8004902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b20      	cmp	r3, #32
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0220 	mvn.w	r2, #32
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f001 f809 	bl	800537e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_TIM_IC_ConfigChannel+0x1e>
 800438e:	2302      	movs	r3, #2
 8004390:	e088      	b.n	80044a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f000 fd54 	bl	8004e5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 020c 	bic.w	r2, r2, #12
 80043c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	619a      	str	r2, [r3, #24]
 80043d6:	e060      	b.n	800449a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d11c      	bne.n	8004418 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f000 fdc9 	bl	8004f84 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004400:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6999      	ldr	r1, [r3, #24]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	021a      	lsls	r2, r3, #8
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]
 8004416:	e040      	b.n	800449a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b08      	cmp	r3, #8
 800441c:	d11b      	bne.n	8004456 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6819      	ldr	r1, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f000 fe14 	bl	800505a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 020c 	bic.w	r2, r2, #12
 8004440:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	61da      	str	r2, [r3, #28]
 8004454:	e021      	b.n	800449a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b0c      	cmp	r3, #12
 800445a:	d11c      	bne.n	8004496 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f000 fe30 	bl	80050d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800447e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69d9      	ldr	r1, [r3, #28]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	61da      	str	r2, [r3, #28]
 8004494:	e001      	b.n	800449a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0ae      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	f200 809f 	bhi.w	8004618 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004515 	.word	0x08004515
 80044e4:	08004619 	.word	0x08004619
 80044e8:	08004619 	.word	0x08004619
 80044ec:	08004619 	.word	0x08004619
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004619 	.word	0x08004619
 80044f8:	08004619 	.word	0x08004619
 80044fc:	08004619 	.word	0x08004619
 8004500:	08004597 	.word	0x08004597
 8004504:	08004619 	.word	0x08004619
 8004508:	08004619 	.word	0x08004619
 800450c:	08004619 	.word	0x08004619
 8004510:	080045d7 	.word	0x080045d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa84 	bl	8004a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0204 	bic.w	r2, r2, #4
 800453e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6999      	ldr	r1, [r3, #24]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	619a      	str	r2, [r3, #24]
      break;
 8004552:	e064      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 faca 	bl	8004af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6999      	ldr	r1, [r3, #24]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	619a      	str	r2, [r3, #24]
      break;
 8004594:	e043      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fb13 	bl	8004bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0208 	orr.w	r2, r2, #8
 80045b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0204 	bic.w	r2, r2, #4
 80045c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69d9      	ldr	r1, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	61da      	str	r2, [r3, #28]
      break;
 80045d4:	e023      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fb5d 	bl	8004c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69d9      	ldr	r1, [r3, #28]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	021a      	lsls	r2, r3, #8
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	61da      	str	r2, [r3, #28]
      break;
 8004616:	e002      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIM_ConfigClockSource+0x1c>
 8004648:	2302      	movs	r3, #2
 800464a:	e0b4      	b.n	80047b6 <HAL_TIM_ConfigClockSource+0x186>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004684:	d03e      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0xd4>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	f200 8087 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x16c>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	f000 8086 	beq.w	80047a2 <HAL_TIM_ConfigClockSource+0x172>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	d87f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b70      	cmp	r3, #112	; 0x70
 800469e:	d01a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xa6>
 80046a0:	2b70      	cmp	r3, #112	; 0x70
 80046a2:	d87b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d050      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x11a>
 80046a8:	2b60      	cmp	r3, #96	; 0x60
 80046aa:	d877      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d03c      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xfa>
 80046b0:	2b50      	cmp	r3, #80	; 0x50
 80046b2:	d873      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d058      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x13a>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d86f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d064      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b30      	cmp	r3, #48	; 0x30
 80046c2:	d86b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d060      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d867      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05c      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d05a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	e062      	b.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f000 fd49 	bl	800517c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
      break;
 8004702:	e04f      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f000 fd32 	bl	800517c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004726:	609a      	str	r2, [r3, #8]
      break;
 8004728:	e03c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fbf6 	bl	8004f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2150      	movs	r1, #80	; 0x50
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fd00 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 8004748:	e02c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fc50 	bl	8004ffc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2160      	movs	r1, #96	; 0x60
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fcf0 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 8004768:	e01c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	461a      	mov	r2, r3
 8004778:	f000 fbd6 	bl	8004f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2140      	movs	r1, #64	; 0x40
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fce0 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 8004788:	e00c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fcd7 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 800479a:	e003      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e031      	b.n	800483a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 faa5 	bl	8004d38 <TIM_SlaveTimer_SetConfig>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e018      	b.n	800483a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004816:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004826:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d831      	bhi.n	80048bc <HAL_TIM_ReadCapturedValue+0x78>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <HAL_TIM_ReadCapturedValue+0x1c>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004895 	.word	0x08004895
 8004864:	080048bd 	.word	0x080048bd
 8004868:	080048bd 	.word	0x080048bd
 800486c:	080048bd 	.word	0x080048bd
 8004870:	0800489f 	.word	0x0800489f
 8004874:	080048bd 	.word	0x080048bd
 8004878:	080048bd 	.word	0x080048bd
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048bd 	.word	0x080048bd
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048b3 	.word	0x080048b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489a:	60fb      	str	r3, [r7, #12]

      break;
 800489c:	e00f      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	60fb      	str	r3, [r7, #12]

      break;
 80048a6:	e00a      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	60fb      	str	r3, [r7, #12]

      break;
 80048b0:	e005      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	60fb      	str	r3, [r7, #12]

      break;
 80048ba:	e000      	b.n	80048be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048bc:	bf00      	nop
  }

  return tmpreg;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	7f1b      	ldrb	r3, [r3, #28]
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
	...

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a33      	ldr	r2, [pc, #204]	; (8004a0c <TIM_Base_SetConfig+0xe0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00f      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d00b      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <TIM_Base_SetConfig+0xe4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a2f      	ldr	r2, [pc, #188]	; (8004a14 <TIM_Base_SetConfig+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a2e      	ldr	r2, [pc, #184]	; (8004a18 <TIM_Base_SetConfig+0xec>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_Base_SetConfig+0xe0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01b      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d017      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <TIM_Base_SetConfig+0xe4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <TIM_Base_SetConfig+0xe8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00f      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <TIM_Base_SetConfig+0xec>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <TIM_Base_SetConfig+0xf0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <TIM_Base_SetConfig+0xf4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1c      	ldr	r2, [pc, #112]	; (8004a24 <TIM_Base_SetConfig+0xf8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <TIM_Base_SetConfig+0xe0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d103      	bne.n	80049fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	615a      	str	r2, [r3, #20]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800

08004a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0201 	bic.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0302 	bic.w	r3, r3, #2
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <TIM_OC1_SetConfig+0xc8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10c      	bne.n	8004a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0308 	bic.w	r3, r3, #8
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <TIM_OC1_SetConfig+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d111      	bne.n	8004aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000

08004af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_OC2_SetConfig+0xd0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10d      	bne.n	8004b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <TIM_OC2_SetConfig+0xd0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d113      	bne.n	8004ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	40010000 	.word	0x40010000

08004bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <TIM_OC3_SetConfig+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10d      	bne.n	8004c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <TIM_OC3_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d113      	bne.n	8004c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000

08004c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <TIM_OC4_SetConfig+0x98>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d109      	bne.n	8004d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	40010000 	.word	0x40010000

08004d38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b70      	cmp	r3, #112	; 0x70
 8004d80:	d01a      	beq.n	8004db8 <TIM_SlaveTimer_SetConfig+0x80>
 8004d82:	2b70      	cmp	r3, #112	; 0x70
 8004d84:	d860      	bhi.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
 8004d86:	2b60      	cmp	r3, #96	; 0x60
 8004d88:	d054      	beq.n	8004e34 <TIM_SlaveTimer_SetConfig+0xfc>
 8004d8a:	2b60      	cmp	r3, #96	; 0x60
 8004d8c:	d85c      	bhi.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
 8004d8e:	2b50      	cmp	r3, #80	; 0x50
 8004d90:	d046      	beq.n	8004e20 <TIM_SlaveTimer_SetConfig+0xe8>
 8004d92:	2b50      	cmp	r3, #80	; 0x50
 8004d94:	d858      	bhi.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d019      	beq.n	8004dce <TIM_SlaveTimer_SetConfig+0x96>
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d854      	bhi.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d055      	beq.n	8004e4e <TIM_SlaveTimer_SetConfig+0x116>
 8004da2:	2b30      	cmp	r3, #48	; 0x30
 8004da4:	d850      	bhi.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d051      	beq.n	8004e4e <TIM_SlaveTimer_SetConfig+0x116>
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d84c      	bhi.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04d      	beq.n	8004e4e <TIM_SlaveTimer_SetConfig+0x116>
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d04b      	beq.n	8004e4e <TIM_SlaveTimer_SetConfig+0x116>
 8004db6:	e047      	b.n	8004e48 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68d9      	ldr	r1, [r3, #12]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f000 f9d8 	bl	800517c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004dcc:	e040      	b.n	8004e50 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d101      	bne.n	8004dda <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e03b      	b.n	8004e52 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
      break;
 8004e1e:	e017      	b.n	8004e50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6899      	ldr	r1, [r3, #8]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f000 f87b 	bl	8004f28 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004e32:	e00d      	b.n	8004e50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f000 f8db 	bl	8004ffc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004e46:	e003      	b.n	8004e50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4c:	e000      	b.n	8004e50 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004e4e:	bf00      	nop
  }

  return status;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0201 	bic.w	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <TIM_TI1_SetConfig+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_TI1_SetConfig+0x56>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d00f      	beq.n	8004eb2 <TIM_TI1_SetConfig+0x56>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <TIM_TI1_SetConfig+0xbc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_TI1_SetConfig+0x56>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <TIM_TI1_SetConfig+0xc0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_TI1_SetConfig+0x56>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <TIM_TI1_SetConfig+0xc4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_TI1_SetConfig+0x56>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <TIM_TI1_SetConfig+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <TIM_TI1_SetConfig+0x5a>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <TIM_TI1_SetConfig+0x5c>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e003      	b.n	8004ed6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f023 030a 	bic.w	r3, r3, #10
 8004ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f003 030a 	and.w	r3, r3, #10
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40014000 	.word	0x40014000

08004f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 030a 	bic.w	r3, r3, #10
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0210 	bic.w	r2, r3, #16
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	031b      	lsls	r3, r3, #12
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f023 0210 	bic.w	r2, r3, #16
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	031b      	lsls	r3, r3, #12
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	b2db      	uxtb	r3, r3
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800510e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	b29b      	uxth	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005122:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	031b      	lsls	r3, r3, #12
 8005128:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	f043 0307 	orr.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b087      	sub	sp, #28
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1a      	ldr	r2, [r3, #32]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e050      	b.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d013      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10c      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40014000 	.word	0x40014000

080052dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e03d      	b.n	8005374 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
	...

080053a4 <AES_keyschedule_enc_LL>:
 80053a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053a8:	1092      	asrs	r2, r2, #2
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	b084      	sub	sp, #16
 80053ae:	dd06      	ble.n	80053be <AES_keyschedule_enc_LL+0x1a>
 80053b0:	0095      	lsls	r5, r2, #2
 80053b2:	2300      	movs	r3, #0
 80053b4:	58c4      	ldr	r4, [r0, r3]
 80053b6:	50cc      	str	r4, [r1, r3]
 80053b8:	3304      	adds	r3, #4
 80053ba:	42ab      	cmp	r3, r5
 80053bc:	d1fa      	bne.n	80053b4 <AES_keyschedule_enc_LL+0x10>
 80053be:	2a06      	cmp	r2, #6
 80053c0:	d007      	beq.n	80053d2 <AES_keyschedule_enc_LL+0x2e>
 80053c2:	2a08      	cmp	r2, #8
 80053c4:	d06c      	beq.n	80054a0 <AES_keyschedule_enc_LL+0xfc>
 80053c6:	2a04      	cmp	r2, #4
 80053c8:	d03a      	beq.n	8005440 <AES_keyschedule_enc_LL+0x9c>
 80053ca:	b004      	add	sp, #16
 80053cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053d0:	4770      	bx	lr
 80053d2:	f8df c190 	ldr.w	ip, [pc, #400]	; 8005564 <AES_keyschedule_enc_LL+0x1c0>
 80053d6:	684c      	ldr	r4, [r1, #4]
 80053d8:	688d      	ldr	r5, [r1, #8]
 80053da:	68c8      	ldr	r0, [r1, #12]
 80053dc:	680e      	ldr	r6, [r1, #0]
 80053de:	4b60      	ldr	r3, [pc, #384]	; (8005560 <AES_keyschedule_enc_LL+0x1bc>)
 80053e0:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 80053e4:	e005      	b.n	80053f2 <AES_keyschedule_enc_LL+0x4e>
 80053e6:	690f      	ldr	r7, [r1, #16]
 80053e8:	4047      	eors	r7, r0
 80053ea:	407a      	eors	r2, r7
 80053ec:	62ca      	str	r2, [r1, #44]	; 0x2c
 80053ee:	628f      	str	r7, [r1, #40]	; 0x28
 80053f0:	3118      	adds	r1, #24
 80053f2:	694a      	ldr	r2, [r1, #20]
 80053f4:	f85c af04 	ldr.w	sl, [ip, #4]!
 80053f8:	fa5f f982 	uxtb.w	r9, r2
 80053fc:	0e17      	lsrs	r7, r2, #24
 80053fe:	f813 9009 	ldrb.w	r9, [r3, r9]
 8005402:	5ddf      	ldrb	r7, [r3, r7]
 8005404:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8005408:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800540c:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8005410:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8005414:	f813 9009 	ldrb.w	r9, [r3, r9]
 8005418:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 800541c:	ea86 060a 	eor.w	r6, r6, sl
 8005420:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 8005424:	407e      	eors	r6, r7
 8005426:	4074      	eors	r4, r6
 8005428:	4065      	eors	r5, r4
 800542a:	4068      	eors	r0, r5
 800542c:	4541      	cmp	r1, r8
 800542e:	6248      	str	r0, [r1, #36]	; 0x24
 8005430:	620d      	str	r5, [r1, #32]
 8005432:	61cc      	str	r4, [r1, #28]
 8005434:	618e      	str	r6, [r1, #24]
 8005436:	d1d6      	bne.n	80053e6 <AES_keyschedule_enc_LL+0x42>
 8005438:	b004      	add	sp, #16
 800543a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800543e:	4770      	bx	lr
 8005440:	4608      	mov	r0, r1
 8005442:	4f48      	ldr	r7, [pc, #288]	; (8005564 <AES_keyschedule_enc_LL+0x1c0>)
 8005444:	f850 4b90 	ldr.w	r4, [r0], #144
 8005448:	68ca      	ldr	r2, [r1, #12]
 800544a:	684d      	ldr	r5, [r1, #4]
 800544c:	688e      	ldr	r6, [r1, #8]
 800544e:	4b44      	ldr	r3, [pc, #272]	; (8005560 <AES_keyschedule_enc_LL+0x1bc>)
 8005450:	e000      	b.n	8005454 <AES_keyschedule_enc_LL+0xb0>
 8005452:	3110      	adds	r1, #16
 8005454:	fa5f f982 	uxtb.w	r9, r2
 8005458:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800545c:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8005460:	f813 b009 	ldrb.w	fp, [r3, r9]
 8005464:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8005468:	f813 a008 	ldrb.w	sl, [r3, r8]
 800546c:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8005470:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8005474:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 8005478:	f813 9009 	ldrb.w	r9, [r3, r9]
 800547c:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8005480:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8005484:	ea84 0408 	eor.w	r4, r4, r8
 8005488:	ea84 040c 	eor.w	r4, r4, ip
 800548c:	4065      	eors	r5, r4
 800548e:	406e      	eors	r6, r5
 8005490:	4072      	eors	r2, r6
 8005492:	4281      	cmp	r1, r0
 8005494:	61ca      	str	r2, [r1, #28]
 8005496:	618e      	str	r6, [r1, #24]
 8005498:	614d      	str	r5, [r1, #20]
 800549a:	610c      	str	r4, [r1, #16]
 800549c:	d1d9      	bne.n	8005452 <AES_keyschedule_enc_LL+0xae>
 800549e:	e794      	b.n	80053ca <AES_keyschedule_enc_LL+0x26>
 80054a0:	4b2f      	ldr	r3, [pc, #188]	; (8005560 <AES_keyschedule_enc_LL+0x1bc>)
 80054a2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8005564 <AES_keyschedule_enc_LL+0x1c0>
 80054a6:	68ca      	ldr	r2, [r1, #12]
 80054a8:	688c      	ldr	r4, [r1, #8]
 80054aa:	684d      	ldr	r5, [r1, #4]
 80054ac:	f8d1 c000 	ldr.w	ip, [r1]
 80054b0:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 80054b4:	4699      	mov	r9, r3
 80054b6:	9003      	str	r0, [sp, #12]
 80054b8:	e023      	b.n	8005502 <AES_keyschedule_enc_LL+0x15e>
 80054ba:	f819 b00b 	ldrb.w	fp, [r9, fp]
 80054be:	f819 7007 	ldrb.w	r7, [r9, r7]
 80054c2:	f819 8008 	ldrb.w	r8, [r9, r8]
 80054c6:	9702      	str	r7, [sp, #8]
 80054c8:	9f01      	ldr	r7, [sp, #4]
 80054ca:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 80054ce:	f8dd b008 	ldr.w	fp, [sp, #8]
 80054d2:	f819 6007 	ldrb.w	r6, [r9, r7]
 80054d6:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 80054da:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 80054de:	690e      	ldr	r6, [r1, #16]
 80054e0:	694f      	ldr	r7, [r1, #20]
 80054e2:	ea88 0806 	eor.w	r8, r8, r6
 80054e6:	698e      	ldr	r6, [r1, #24]
 80054e8:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 80054ec:	ea88 0707 	eor.w	r7, r8, r7
 80054f0:	ea87 0b06 	eor.w	fp, r7, r6
 80054f4:	ea8b 0000 	eor.w	r0, fp, r0
 80054f8:	634f      	str	r7, [r1, #52]	; 0x34
 80054fa:	63c8      	str	r0, [r1, #60]	; 0x3c
 80054fc:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8005500:	3120      	adds	r1, #32
 8005502:	69c8      	ldr	r0, [r1, #28]
 8005504:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 8005508:	b2c7      	uxtb	r7, r0
 800550a:	0e06      	lsrs	r6, r0, #24
 800550c:	f813 b007 	ldrb.w	fp, [r3, r7]
 8005510:	5d9e      	ldrb	r6, [r3, r6]
 8005512:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8005516:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 800551a:	f813 b007 	ldrb.w	fp, [r3, r7]
 800551e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8005522:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 8005526:	5ddf      	ldrb	r7, [r3, r7]
 8005528:	ea8c 0c08 	eor.w	ip, ip, r8
 800552c:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8005530:	ea8c 0c06 	eor.w	ip, ip, r6
 8005534:	ea8c 0505 	eor.w	r5, ip, r5
 8005538:	406c      	eors	r4, r5
 800553a:	4062      	eors	r2, r4
 800553c:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8005540:	9601      	str	r6, [sp, #4]
 8005542:	9e03      	ldr	r6, [sp, #12]
 8005544:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005546:	42b1      	cmp	r1, r6
 8005548:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 800554c:	fa5f f882 	uxtb.w	r8, r2
 8005550:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005554:	628c      	str	r4, [r1, #40]	; 0x28
 8005556:	624d      	str	r5, [r1, #36]	; 0x24
 8005558:	f8c1 c020 	str.w	ip, [r1, #32]
 800555c:	d1ad      	bne.n	80054ba <AES_keyschedule_enc_LL+0x116>
 800555e:	e734      	b.n	80053ca <AES_keyschedule_enc_LL+0x26>
 8005560:	08007d8c 	.word	0x08007d8c
 8005564:	08007960 	.word	0x08007960

08005568 <AES_general_SW_enc>:
 8005568:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800556c:	4cbe      	ldr	r4, [pc, #760]	; (8005868 <AES_general_SW_enc+0x300>)
 800556e:	4dbf      	ldr	r5, [pc, #764]	; (800586c <AES_general_SW_enc+0x304>)
 8005570:	b08a      	sub	sp, #40	; 0x28
 8005572:	2700      	movs	r7, #0
 8005574:	2601      	movs	r6, #1
 8005576:	9709      	str	r7, [sp, #36]	; 0x24
 8005578:	6026      	str	r6, [r4, #0]
 800557a:	6824      	ldr	r4, [r4, #0]
 800557c:	9409      	str	r4, [sp, #36]	; 0x24
 800557e:	682c      	ldr	r4, [r5, #0]
 8005580:	9409      	str	r4, [sp, #36]	; 0x24
 8005582:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005584:	9107      	str	r1, [sp, #28]
 8005586:	10db      	asrs	r3, r3, #3
 8005588:	3303      	adds	r3, #3
 800558a:	3401      	adds	r4, #1
 800558c:	9306      	str	r3, [sp, #24]
 800558e:	f000 8151 	beq.w	8005834 <AES_general_SW_enc+0x2cc>
 8005592:	6804      	ldr	r4, [r0, #0]
 8005594:	6811      	ldr	r1, [r2, #0]
 8005596:	6840      	ldr	r0, [r0, #4]
 8005598:	6853      	ldr	r3, [r2, #4]
 800559a:	ea81 0b04 	eor.w	fp, r1, r4
 800559e:	4058      	eors	r0, r3
 80055a0:	9003      	str	r0, [sp, #12]
 80055a2:	46d9      	mov	r9, fp
 80055a4:	46dc      	mov	ip, fp
 80055a6:	4bb2      	ldr	r3, [pc, #712]	; (8005870 <AES_general_SW_enc+0x308>)
 80055a8:	9c03      	ldr	r4, [sp, #12]
 80055aa:	4698      	mov	r8, r3
 80055ac:	e067      	b.n	800567e <AES_general_SW_enc+0x116>
 80055ae:	ea4f 611b 	mov.w	r1, fp, lsr #24
 80055b2:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80055b6:	0e07      	lsrs	r7, r0, #24
 80055b8:	ea4f 651a 	mov.w	r5, sl, lsr #24
 80055bc:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 80055c0:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 80055c4:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 80055c8:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 80055cc:	e892 0022 	ldmia.w	r2, {r1, r5}
 80055d0:	404e      	eors	r6, r1
 80055d2:	fa5f f18a 	uxtb.w	r1, sl
 80055d6:	ea89 0505 	eor.w	r5, r9, r5
 80055da:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 80055de:	6891      	ldr	r1, [r2, #8]
 80055e0:	ea8c 0c01 	eor.w	ip, ip, r1
 80055e4:	68d1      	ldr	r1, [r2, #12]
 80055e6:	404f      	eors	r7, r1
 80055e8:	9704      	str	r7, [sp, #16]
 80055ea:	fa5f f78b 	uxtb.w	r7, fp
 80055ee:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 80055f2:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 80055f6:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80055fa:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 80055fe:	b2e5      	uxtb	r5, r4
 8005600:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005604:	b2c1      	uxtb	r1, r0
 8005606:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800560a:	9405      	str	r4, [sp, #20]
 800560c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005610:	9c04      	ldr	r4, [sp, #16]
 8005612:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005616:	9703      	str	r7, [sp, #12]
 8005618:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 800561c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8005620:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005624:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 8005628:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800562c:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 8005630:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8005634:	f3ca 2007 	ubfx	r0, sl, #8, #8
 8005638:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800563c:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 8005640:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 8005644:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005648:	f3cb 4007 	ubfx	r0, fp, #16, #8
 800564c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005650:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 8005654:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8005658:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800565c:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8005660:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 8005664:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 8005668:	9805      	ldr	r0, [sp, #20]
 800566a:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 800566e:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 8005672:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 8005676:	9703      	str	r7, [sp, #12]
 8005678:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 800567c:	463c      	mov	r4, r7
 800567e:	0e21      	lsrs	r1, r4, #24
 8005680:	ea4f 661c 	mov.w	r6, ip, lsr #24
 8005684:	ea4f 6419 	mov.w	r4, r9, lsr #24
 8005688:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 800568c:	6911      	ldr	r1, [r2, #16]
 800568e:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8005692:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8005696:	6954      	ldr	r4, [r2, #20]
 8005698:	404d      	eors	r5, r1
 800569a:	ea4f 601b 	mov.w	r0, fp, lsr #24
 800569e:	fa5f f189 	uxtb.w	r1, r9
 80056a2:	407c      	eors	r4, r7
 80056a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80056a8:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 80056ac:	6991      	ldr	r1, [r2, #24]
 80056ae:	4048      	eors	r0, r1
 80056b0:	69d1      	ldr	r1, [r2, #28]
 80056b2:	404e      	eors	r6, r1
 80056b4:	9604      	str	r6, [sp, #16]
 80056b6:	9e03      	ldr	r6, [sp, #12]
 80056b8:	9904      	ldr	r1, [sp, #16]
 80056ba:	fa5f fa86 	uxtb.w	sl, r6
 80056be:	fa5f f68b 	uxtb.w	r6, fp
 80056c2:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80056c6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80056ca:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 80056ce:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 80056d2:	f3cc 4507 	ubfx	r5, ip, #16, #8
 80056d6:	fa5f f48c 	uxtb.w	r4, ip
 80056da:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80056de:	9702      	str	r7, [sp, #8]
 80056e0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80056e4:	9705      	str	r7, [sp, #20]
 80056e6:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 80056ea:	f3cb 4107 	ubfx	r1, fp, #16, #8
 80056ee:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80056f2:	9f06      	ldr	r7, [sp, #24]
 80056f4:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 80056f8:	9601      	str	r6, [sp, #4]
 80056fa:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80056fe:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8005702:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8005706:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800570a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800570e:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8005712:	9604      	str	r6, [sp, #16]
 8005714:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8005718:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800571c:	3f01      	subs	r7, #1
 800571e:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 8005722:	9706      	str	r7, [sp, #24]
 8005724:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8005728:	9904      	ldr	r1, [sp, #16]
 800572a:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 800572e:	f3cb 4507 	ubfx	r5, fp, #16, #8
 8005732:	f3cb 2907 	ubfx	r9, fp, #8, #8
 8005736:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 800573a:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 800573e:	9901      	ldr	r1, [sp, #4]
 8005740:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 8005744:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 8005748:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 800574c:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 8005750:	9f06      	ldr	r7, [sp, #24]
 8005752:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 8005756:	9e05      	ldr	r6, [sp, #20]
 8005758:	2f00      	cmp	r7, #0
 800575a:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 800575e:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 8005762:	f102 0220 	add.w	r2, r2, #32
 8005766:	f73f af22 	bgt.w	80055ae <AES_general_SW_enc+0x46>
 800576a:	4b42      	ldr	r3, [pc, #264]	; (8005874 <AES_general_SW_enc+0x30c>)
 800576c:	6811      	ldr	r1, [r2, #0]
 800576e:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8005772:	fa5f f68a 	uxtb.w	r6, sl
 8005776:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800577a:	f813 8007 	ldrb.w	r8, [r3, r7]
 800577e:	5d9f      	ldrb	r7, [r3, r6]
 8005780:	5d5d      	ldrb	r5, [r3, r5]
 8005782:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8005786:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 800578a:	f813 c006 	ldrb.w	ip, [r3, r6]
 800578e:	0e27      	lsrs	r7, r4, #24
 8005790:	fa5f f68b 	uxtb.w	r6, fp
 8005794:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 8005798:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800579c:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 80057a0:	ea88 0101 	eor.w	r1, r8, r1
 80057a4:	f813 c007 	ldrb.w	ip, [r3, r7]
 80057a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80057ac:	5d9f      	ldrb	r7, [r3, r6]
 80057ae:	5d5e      	ldrb	r6, [r3, r5]
 80057b0:	f8c8 1000 	str.w	r1, [r8]
 80057b4:	f3ca 2507 	ubfx	r5, sl, #8, #8
 80057b8:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 80057bc:	f813 8005 	ldrb.w	r8, [r3, r5]
 80057c0:	6851      	ldr	r1, [r2, #4]
 80057c2:	0e07      	lsrs	r7, r0, #24
 80057c4:	b2e5      	uxtb	r5, r4
 80057c6:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 80057ca:	f3ca 4607 	ubfx	r6, sl, #16, #8
 80057ce:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 80057d2:	5ddf      	ldrb	r7, [r3, r7]
 80057d4:	f813 9006 	ldrb.w	r9, [r3, r6]
 80057d8:	5d5d      	ldrb	r5, [r3, r5]
 80057da:	ea8c 0101 	eor.w	r1, ip, r1
 80057de:	f3cb 2607 	ubfx	r6, fp, #8, #8
 80057e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057e6:	5d9e      	ldrb	r6, [r3, r6]
 80057e8:	f8cc 1004 	str.w	r1, [ip, #4]
 80057ec:	b2c0      	uxtb	r0, r0
 80057ee:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 80057f2:	ea4f 671a 	mov.w	r7, sl, lsr #24
 80057f6:	f813 8000 	ldrb.w	r8, [r3, r0]
 80057fa:	6890      	ldr	r0, [r2, #8]
 80057fc:	5ddf      	ldrb	r7, [r3, r7]
 80057fe:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8005802:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8005806:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800580a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800580e:	4045      	eors	r5, r0
 8005810:	5c58      	ldrb	r0, [r3, r1]
 8005812:	f8cc 5008 	str.w	r5, [ip, #8]
 8005816:	5d19      	ldrb	r1, [r3, r4]
 8005818:	68d2      	ldr	r2, [r2, #12]
 800581a:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 800581e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005822:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005826:	4053      	eors	r3, r2
 8005828:	f8cc 300c 	str.w	r3, [ip, #12]
 800582c:	b00a      	add	sp, #40	; 0x28
 800582e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005832:	4770      	bx	lr
 8005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005836:	602b      	str	r3, [r5, #0]
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	9309      	str	r3, [sp, #36]	; 0x24
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	2b00      	cmp	r3, #0
 8005840:	f47f aea7 	bne.w	8005592 <AES_general_SW_enc+0x2a>
 8005844:	6803      	ldr	r3, [r0, #0]
 8005846:	6815      	ldr	r5, [r2, #0]
 8005848:	6847      	ldr	r7, [r0, #4]
 800584a:	6886      	ldr	r6, [r0, #8]
 800584c:	6854      	ldr	r4, [r2, #4]
 800584e:	68c0      	ldr	r0, [r0, #12]
 8005850:	6891      	ldr	r1, [r2, #8]
 8005852:	406b      	eors	r3, r5
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	68d3      	ldr	r3, [r2, #12]
 8005858:	ea84 0c07 	eor.w	ip, r4, r7
 800585c:	ea81 0b06 	eor.w	fp, r1, r6
 8005860:	ea83 0900 	eor.w	r9, r3, r0
 8005864:	e69f      	b.n	80055a6 <AES_general_SW_enc+0x3e>
 8005866:	bf00      	nop
 8005868:	40023008 	.word	0x40023008
 800586c:	40023000 	.word	0x40023000
 8005870:	0800798c 	.word	0x0800798c
 8005874:	08007d8c 	.word	0x08007d8c

08005878 <DRBG_AES128_Block_cipher_df.constprop.37>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	b0ff      	sub	sp, #508	; 0x1fc
 800587e:	460c      	mov	r4, r1
 8005880:	f101 0519 	add.w	r5, r1, #25
 8005884:	4606      	mov	r6, r0
 8005886:	9201      	str	r2, [sp, #4]
 8005888:	499c      	ldr	r1, [pc, #624]	; (8005afc <DRBG_AES128_Block_cipher_df.constprop.37+0x284>)
 800588a:	22b0      	movs	r2, #176	; 0xb0
 800588c:	a852      	add	r0, sp, #328	; 0x148
 800588e:	f001 fdb5 	bl	80073fc <memcpy>
 8005892:	f015 080f 	ands.w	r8, r5, #15
 8005896:	ea4f 2214 	mov.w	r2, r4, lsr #8
 800589a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800589e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80058a2:	f04f 0320 	mov.w	r3, #32
 80058a6:	bf18      	it	ne
 80058a8:	f1c8 0810 	rsbne	r8, r8, #16
 80058ac:	4631      	mov	r1, r6
 80058ae:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80058b2:	f04f 0600 	mov.w	r6, #0
 80058b6:	4622      	mov	r2, r4
 80058b8:	a810      	add	r0, sp, #64	; 0x40
 80058ba:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 80058be:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80058c2:	462f      	mov	r7, r5
 80058c4:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 80058c8:	bf18      	it	ne
 80058ca:	eb05 0708 	addne.w	r7, r5, r8
 80058ce:	f88d e038 	strb.w	lr, [sp, #56]	; 0x38
 80058d2:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
 80058d6:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
 80058da:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80058de:	f001 fd8d 	bl	80073fc <memcpy>
 80058e2:	ab0a      	add	r3, sp, #40	; 0x28
 80058e4:	441c      	add	r4, r3
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	7623      	strb	r3, [r4, #24]
 80058ea:	f1b8 0f00 	cmp.w	r8, #0
 80058ee:	d005      	beq.n	80058fc <DRBG_AES128_Block_cipher_df.constprop.37+0x84>
 80058f0:	a80a      	add	r0, sp, #40	; 0x28
 80058f2:	4428      	add	r0, r5
 80058f4:	4631      	mov	r1, r6
 80058f6:	4642      	mov	r2, r8
 80058f8:	f001 fd8e 	bl	8007418 <memset>
 80058fc:	2300      	movs	r3, #0
 80058fe:	093f      	lsrs	r7, r7, #4
 8005900:	930a      	str	r3, [sp, #40]	; 0x28
 8005902:	930b      	str	r3, [sp, #44]	; 0x2c
 8005904:	930c      	str	r3, [sp, #48]	; 0x30
 8005906:	9302      	str	r3, [sp, #8]
 8005908:	930d      	str	r3, [sp, #52]	; 0x34
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	9305      	str	r3, [sp, #20]
 8005910:	f000 80ec 	beq.w	8005aec <DRBG_AES128_Block_cipher_df.constprop.37+0x274>
 8005914:	46b8      	mov	r8, r7
 8005916:	4618      	mov	r0, r3
 8005918:	4619      	mov	r1, r3
 800591a:	461a      	mov	r2, r3
 800591c:	461e      	mov	r6, r3
 800591e:	ac0a      	add	r4, sp, #40	; 0x28
 8005920:	ad26      	add	r5, sp, #152	; 0x98
 8005922:	461f      	mov	r7, r3
 8005924:	e003      	b.n	800592e <DRBG_AES128_Block_cipher_df.constprop.37+0xb6>
 8005926:	9a02      	ldr	r2, [sp, #8]
 8005928:	9903      	ldr	r1, [sp, #12]
 800592a:	9804      	ldr	r0, [sp, #16]
 800592c:	9f05      	ldr	r7, [sp, #20]
 800592e:	7863      	ldrb	r3, [r4, #1]
 8005930:	f894 e000 	ldrb.w	lr, [r4]
 8005934:	f894 a009 	ldrb.w	sl, [r4, #9]
 8005938:	f894 900d 	ldrb.w	r9, [r4, #13]
 800593c:	f894 c005 	ldrb.w	ip, [r4, #5]
 8005940:	f894 b004 	ldrb.w	fp, [r4, #4]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800594a:	f894 e003 	ldrb.w	lr, [r4, #3]
 800594e:	ea43 030e 	orr.w	r3, r3, lr
 8005952:	f894 e008 	ldrb.w	lr, [r4, #8]
 8005956:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 800595a:	ea4a 6a0e 	orr.w	sl, sl, lr, lsl #24
 800595e:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8005962:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8005966:	ea49 690e 	orr.w	r9, r9, lr, lsl #24
 800596a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800596e:	f894 e007 	ldrb.w	lr, [r4, #7]
 8005972:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
 8005976:	ea4c 0c0e 	orr.w	ip, ip, lr
 800597a:	f894 b002 	ldrb.w	fp, [r4, #2]
 800597e:	f894 e00b 	ldrb.w	lr, [r4, #11]
 8005982:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 8005986:	ea4a 0a0e 	orr.w	sl, sl, lr
 800598a:	f894 e00f 	ldrb.w	lr, [r4, #15]
 800598e:	405a      	eors	r2, r3
 8005990:	ea49 090e 	orr.w	r9, r9, lr
 8005994:	79a3      	ldrb	r3, [r4, #6]
 8005996:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800599a:	602a      	str	r2, [r5, #0]
 800599c:	7ba2      	ldrb	r2, [r4, #14]
 800599e:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
 80059a2:	ea49 2202 	orr.w	r2, r9, r2, lsl #8
 80059a6:	ea4a 2e0e 	orr.w	lr, sl, lr, lsl #8
 80059aa:	ea81 0c0c 	eor.w	ip, r1, ip
 80059ae:	ea80 0e0e 	eor.w	lr, r0, lr
 80059b2:	4057      	eors	r7, r2
 80059b4:	2310      	movs	r3, #16
 80059b6:	3601      	adds	r6, #1
 80059b8:	4628      	mov	r0, r5
 80059ba:	a902      	add	r1, sp, #8
 80059bc:	aa52      	add	r2, sp, #328	; 0x148
 80059be:	f8c5 c004 	str.w	ip, [r5, #4]
 80059c2:	f8c5 e008 	str.w	lr, [r5, #8]
 80059c6:	60ef      	str	r7, [r5, #12]
 80059c8:	441c      	add	r4, r3
 80059ca:	f7ff fdcd 	bl	8005568 <AES_general_SW_enc>
 80059ce:	4546      	cmp	r6, r8
 80059d0:	d1a9      	bne.n	8005926 <DRBG_AES128_Block_cipher_df.constprop.37+0xae>
 80059d2:	2200      	movs	r2, #0
 80059d4:	2401      	movs	r4, #1
 80059d6:	f10d 0e18 	add.w	lr, sp, #24
 80059da:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
 80059de:	4647      	mov	r7, r8
 80059e0:	4613      	mov	r3, r2
 80059e2:	9206      	str	r2, [sp, #24]
 80059e4:	9207      	str	r2, [sp, #28]
 80059e6:	9208      	str	r2, [sp, #32]
 80059e8:	9209      	str	r2, [sp, #36]	; 0x24
 80059ea:	4610      	mov	r0, r2
 80059ec:	4611      	mov	r1, r2
 80059ee:	4616      	mov	r6, r2
 80059f0:	ac0a      	add	r4, sp, #40	; 0x28
 80059f2:	f8cd e000 	str.w	lr, [sp]
 80059f6:	e003      	b.n	8005a00 <DRBG_AES128_Block_cipher_df.constprop.37+0x188>
 80059f8:	9a06      	ldr	r2, [sp, #24]
 80059fa:	9907      	ldr	r1, [sp, #28]
 80059fc:	9808      	ldr	r0, [sp, #32]
 80059fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a00:	f894 8001 	ldrb.w	r8, [r4, #1]
 8005a04:	f894 9000 	ldrb.w	r9, [r4]
 8005a08:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8005a0c:	f894 e005 	ldrb.w	lr, [r4, #5]
 8005a10:	f894 b004 	ldrb.w	fp, [r4, #4]
 8005a14:	f894 a009 	ldrb.w	sl, [r4, #9]
 8005a18:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8005a1c:	ea48 6809 	orr.w	r8, r8, r9, lsl #24
 8005a20:	f894 9003 	ldrb.w	r9, [r4, #3]
 8005a24:	ea48 0809 	orr.w	r8, r8, r9
 8005a28:	f894 9002 	ldrb.w	r9, [r4, #2]
 8005a2c:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8005a30:	f894 800c 	ldrb.w	r8, [r4, #12]
 8005a34:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005a38:	ea4c 6c08 	orr.w	ip, ip, r8, lsl #24
 8005a3c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8005a40:	f894 8007 	ldrb.w	r8, [r4, #7]
 8005a44:	ea4e 6e0b 	orr.w	lr, lr, fp, lsl #24
 8005a48:	f894 b008 	ldrb.w	fp, [r4, #8]
 8005a4c:	ea4e 0e08 	orr.w	lr, lr, r8
 8005a50:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8005a54:	f894 800b 	ldrb.w	r8, [r4, #11]
 8005a58:	ea4a 6a0b 	orr.w	sl, sl, fp, lsl #24
 8005a5c:	ea4a 0a08 	orr.w	sl, sl, r8
 8005a60:	f894 800f 	ldrb.w	r8, [r4, #15]
 8005a64:	f894 b006 	ldrb.w	fp, [r4, #6]
 8005a68:	ea82 0209 	eor.w	r2, r2, r9
 8005a6c:	ea4c 0c08 	orr.w	ip, ip, r8
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	f894 800a 	ldrb.w	r8, [r4, #10]
 8005a76:	7ba2      	ldrb	r2, [r4, #14]
 8005a78:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
 8005a7c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8005a80:	ea4a 2808 	orr.w	r8, sl, r8, lsl #8
 8005a84:	ea81 0e0e 	eor.w	lr, r1, lr
 8005a88:	ea83 0c0c 	eor.w	ip, r3, ip
 8005a8c:	ea80 0808 	eor.w	r8, r0, r8
 8005a90:	2310      	movs	r3, #16
 8005a92:	3601      	adds	r6, #1
 8005a94:	4628      	mov	r0, r5
 8005a96:	9900      	ldr	r1, [sp, #0]
 8005a98:	f8c5 e004 	str.w	lr, [r5, #4]
 8005a9c:	aa52      	add	r2, sp, #328	; 0x148
 8005a9e:	f8c5 8008 	str.w	r8, [r5, #8]
 8005aa2:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005aa6:	441c      	add	r4, r3
 8005aa8:	f7ff fd5e 	bl	8005568 <AES_general_SW_enc>
 8005aac:	42be      	cmp	r6, r7
 8005aae:	d1a3      	bne.n	80059f8 <DRBG_AES128_Block_cipher_df.constprop.37+0x180>
 8005ab0:	a802      	add	r0, sp, #8
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	f7ff fc75 	bl	80053a4 <AES_keyschedule_enc_LL>
 8005aba:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005abe:	462a      	mov	r2, r5
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f7ff fd51 	bl	8005568 <AES_general_SW_enc>
 8005ac6:	9c01      	ldr	r4, [sp, #4]
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	6861      	ldr	r1, [r4, #4]
 8005acc:	68a2      	ldr	r2, [r4, #8]
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	9c00      	ldr	r4, [sp, #0]
 8005ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad4:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8005ad8:	462a      	mov	r2, r5
 8005ada:	f104 0110 	add.w	r1, r4, #16
 8005ade:	2310      	movs	r3, #16
 8005ae0:	f7ff fd42 	bl	8005568 <AES_general_SW_enc>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	b07f      	add	sp, #508	; 0x1fc
 8005ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aec:	ac06      	add	r4, sp, #24
 8005aee:	9706      	str	r7, [sp, #24]
 8005af0:	9707      	str	r7, [sp, #28]
 8005af2:	9708      	str	r7, [sp, #32]
 8005af4:	9709      	str	r7, [sp, #36]	; 0x24
 8005af6:	ad26      	add	r5, sp, #152	; 0x98
 8005af8:	9400      	str	r4, [sp, #0]
 8005afa:	e7d9      	b.n	8005ab0 <DRBG_AES128_Block_cipher_df.constprop.37+0x238>
 8005afc:	0800752c 	.word	0x0800752c

08005b00 <crl_DRBG_AES128_Generate.part.25.constprop.36>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	460d      	mov	r5, r1
 8005b06:	1e19      	subs	r1, r3, #0
 8005b08:	b0c1      	sub	sp, #260	; 0x104
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	f340 810d 	ble.w	8005d2a <crl_DRBG_AES128_Generate.part.25.constprop.36+0x22a>
 8005b10:	4610      	mov	r0, r2
 8005b12:	aa04      	add	r2, sp, #16
 8005b14:	f7ff feb0 	bl	8005878 <DRBG_AES128_Block_cipher_df.constprop.37>
 8005b18:	b110      	cbz	r0, 8005b20 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x20>
 8005b1a:	b041      	add	sp, #260	; 0x104
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8005b24:	f108 0a10 	add.w	sl, r8, #16
 8005b28:	4650      	mov	r0, sl
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	f7ff fc39 	bl	80053a4 <AES_keyschedule_enc_LL>
 8005b32:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005b36:	464c      	mov	r4, r9
 8005b38:	465f      	mov	r7, fp
 8005b3a:	462e      	mov	r6, r5
 8005b3c:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8005b40:	2310      	movs	r3, #16
 8005b42:	3501      	adds	r5, #1
 8005b44:	4639      	mov	r1, r7
 8005b46:	4640      	mov	r0, r8
 8005b48:	464a      	mov	r2, r9
 8005b4a:	441f      	add	r7, r3
 8005b4c:	f8c8 500c 	str.w	r5, [r8, #12]
 8005b50:	b985      	cbnz	r5, 8005b74 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8005b52:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8005b56:	3501      	adds	r5, #1
 8005b58:	f8c8 5008 	str.w	r5, [r8, #8]
 8005b5c:	b955      	cbnz	r5, 8005b74 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8005b5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005b62:	3501      	adds	r5, #1
 8005b64:	f8c8 5004 	str.w	r5, [r8, #4]
 8005b68:	b925      	cbnz	r5, 8005b74 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8005b6a:	f8d8 5000 	ldr.w	r5, [r8]
 8005b6e:	3501      	adds	r5, #1
 8005b70:	f8c8 5000 	str.w	r5, [r8]
 8005b74:	f7ff fcf8 	bl	8005568 <AES_general_SW_enc>
 8005b78:	454f      	cmp	r7, r9
 8005b7a:	d1df      	bne.n	8005b3c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x3c>
 8005b7c:	9a06      	ldr	r2, [sp, #24]
 8005b7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b82:	9804      	ldr	r0, [sp, #16]
 8005b84:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005b86:	4635      	mov	r5, r6
 8005b88:	9e05      	ldr	r6, [sp, #20]
 8005b8a:	4053      	eors	r3, r2
 8005b8c:	4071      	eors	r1, r6
 8005b8e:	9a07      	ldr	r2, [sp, #28]
 8005b90:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005b92:	f8c8 3018 	str.w	r3, [r8, #24]
 8005b96:	4047      	eors	r7, r0
 8005b98:	ea82 0e06 	eor.w	lr, r2, r6
 8005b9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba2:	f8c8 7010 	str.w	r7, [r8, #16]
 8005ba6:	9f08      	ldr	r7, [sp, #32]
 8005ba8:	f8c8 1014 	str.w	r1, [r8, #20]
 8005bac:	ea83 0600 	eor.w	r6, r3, r0
 8005bb0:	ea87 0102 	eor.w	r1, r7, r2
 8005bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bba:	f8c8 e01c 	str.w	lr, [r8, #28]
 8005bbe:	ea80 0702 	eor.w	r7, r0, r2
 8005bc2:	e888 00c2 	stmia.w	r8, {r1, r6, r7}
 8005bc6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005bc8:	ea83 0200 	eor.w	r2, r3, r0
 8005bcc:	f8c8 200c 	str.w	r2, [r8, #12]
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	f7ff fbe5 	bl	80053a4 <AES_keyschedule_enc_LL>
 8005bda:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8005bde:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005be2:	3601      	adds	r6, #1
 8005be4:	4640      	mov	r0, r8
 8005be6:	4669      	mov	r1, sp
 8005be8:	4622      	mov	r2, r4
 8005bea:	2310      	movs	r3, #16
 8005bec:	f8c8 600c 	str.w	r6, [r8, #12]
 8005bf0:	b986      	cbnz	r6, 8005c14 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8005bf2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	f8c8 6008 	str.w	r6, [r8, #8]
 8005bfc:	b956      	cbnz	r6, 8005c14 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8005bfe:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8005c02:	3601      	adds	r6, #1
 8005c04:	f8c8 6004 	str.w	r6, [r8, #4]
 8005c08:	b926      	cbnz	r6, 8005c14 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8005c0a:	f8d8 6000 	ldr.w	r6, [r8]
 8005c0e:	3601      	adds	r6, #1
 8005c10:	f8c8 6000 	str.w	r6, [r8]
 8005c14:	f7ff fca8 	bl	8005568 <AES_general_SW_enc>
 8005c18:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 8005c1c:	70e8      	strb	r0, [r5, #3]
 8005c1e:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8005c22:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8005c26:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8005c2a:	0a0e      	lsrs	r6, r1, #8
 8005c2c:	0c08      	lsrs	r0, r1, #16
 8005c2e:	f885 9002 	strb.w	r9, [r5, #2]
 8005c32:	f885 c001 	strb.w	ip, [r5, #1]
 8005c36:	f885 e000 	strb.w	lr, [r5]
 8005c3a:	71e9      	strb	r1, [r5, #7]
 8005c3c:	71ae      	strb	r6, [r5, #6]
 8005c3e:	7168      	strb	r0, [r5, #5]
 8005c40:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8005c44:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8005c48:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c4c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8005c50:	0a1e      	lsrs	r6, r3, #8
 8005c52:	0c18      	lsrs	r0, r3, #16
 8005c54:	0e19      	lsrs	r1, r3, #24
 8005c56:	f885 a004 	strb.w	sl, [r5, #4]
 8005c5a:	72ea      	strb	r2, [r5, #11]
 8005c5c:	f885 900a 	strb.w	r9, [r5, #10]
 8005c60:	f885 c009 	strb.w	ip, [r5, #9]
 8005c64:	f885 e008 	strb.w	lr, [r5, #8]
 8005c68:	73eb      	strb	r3, [r5, #15]
 8005c6a:	73ae      	strb	r6, [r5, #14]
 8005c6c:	7368      	strb	r0, [r5, #13]
 8005c6e:	7329      	strb	r1, [r5, #12]
 8005c70:	3510      	adds	r5, #16
 8005c72:	42bd      	cmp	r5, r7
 8005c74:	d1b3      	bne.n	8005bde <crl_DRBG_AES128_Generate.part.25.constprop.36+0xde>
 8005c76:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	4659      	mov	r1, fp
 8005c80:	4640      	mov	r0, r8
 8005c82:	4622      	mov	r2, r4
 8005c84:	449b      	add	fp, r3
 8005c86:	f8c8 500c 	str.w	r5, [r8, #12]
 8005c8a:	b985      	cbnz	r5, 8005cae <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8005c8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8005c90:	3501      	adds	r5, #1
 8005c92:	f8c8 5008 	str.w	r5, [r8, #8]
 8005c96:	b955      	cbnz	r5, 8005cae <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8005c98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	f8c8 5004 	str.w	r5, [r8, #4]
 8005ca2:	b925      	cbnz	r5, 8005cae <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8005ca4:	f8d8 5000 	ldr.w	r5, [r8]
 8005ca8:	3501      	adds	r5, #1
 8005caa:	f8c8 5000 	str.w	r5, [r8]
 8005cae:	f7ff fc5b 	bl	8005568 <AES_general_SW_enc>
 8005cb2:	45a3      	cmp	fp, r4
 8005cb4:	d1df      	bne.n	8005c76 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x176>
 8005cb6:	9906      	ldr	r1, [sp, #24]
 8005cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cba:	9c05      	ldr	r4, [sp, #20]
 8005cbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005cbe:	9e04      	ldr	r6, [sp, #16]
 8005cc0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc4:	ea81 0c02 	eor.w	ip, r1, r2
 8005cc8:	9a07      	ldr	r2, [sp, #28]
 8005cca:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8005cce:	f8c8 c018 	str.w	ip, [r8, #24]
 8005cd2:	4060      	eors	r0, r4
 8005cd4:	ea82 0307 	eor.w	r3, r2, r7
 8005cd8:	4075      	eors	r5, r6
 8005cda:	9c08      	ldr	r4, [sp, #32]
 8005cdc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005cde:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ce0:	f8c8 0014 	str.w	r0, [r8, #20]
 8005ce4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ce8:	f8c8 5010 	str.w	r5, [r8, #16]
 8005cec:	ea84 0506 	eor.w	r5, r4, r6
 8005cf0:	ea87 0600 	eor.w	r6, r7, r0
 8005cf4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005cf6:	f8c8 301c 	str.w	r3, [r8, #28]
 8005cfa:	ea82 0407 	eor.w	r4, r2, r7
 8005cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d00:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005d02:	f8c8 4008 	str.w	r4, [r8, #8]
 8005d06:	ea82 0007 	eor.w	r0, r2, r7
 8005d0a:	1c4b      	adds	r3, r1, #1
 8005d0c:	f8c8 000c 	str.w	r0, [r8, #12]
 8005d10:	bf1a      	itte	ne
 8005d12:	3101      	addne	r1, #1
 8005d14:	2000      	movne	r0, #0
 8005d16:	f241 7073 	movweq	r0, #6003	; 0x1773
 8005d1a:	e888 0060 	stmia.w	r8, {r5, r6}
 8005d1e:	bf18      	it	ne
 8005d20:	f8c8 1020 	strne.w	r1, [r8, #32]
 8005d24:	b041      	add	sp, #260	; 0x104
 8005d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	9305      	str	r3, [sp, #20]
 8005d30:	9306      	str	r3, [sp, #24]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	930a      	str	r3, [sp, #40]	; 0x28
 8005d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d3c:	f100 0a10 	add.w	sl, r0, #16
 8005d40:	ac14      	add	r4, sp, #80	; 0x50
 8005d42:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005d46:	e743      	b.n	8005bd0 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xd0>

08005d48 <crl_DRBG_AES128_Generate.part.25>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	b0c3      	sub	sp, #268	; 0x10c
 8005d4e:	4605      	mov	r5, r0
 8005d50:	9100      	str	r1, [sp, #0]
 8005d52:	1e19      	subs	r1, r3, #0
 8005d54:	f8dd b130 	ldr.w	fp, [sp, #304]	; 0x130
 8005d58:	f340 80f4 	ble.w	8005f44 <crl_DRBG_AES128_Generate.part.25+0x1fc>
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	aa06      	add	r2, sp, #24
 8005d60:	f7ff fd8a 	bl	8005878 <DRBG_AES128_Block_cipher_df.constprop.37>
 8005d64:	b110      	cbz	r0, 8005d6c <crl_DRBG_AES128_Generate.part.25+0x24>
 8005d66:	b043      	add	sp, #268	; 0x10c
 8005d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6c:	af16      	add	r7, sp, #88	; 0x58
 8005d6e:	f105 0910 	add.w	r9, r5, #16
 8005d72:	ac0e      	add	r4, sp, #56	; 0x38
 8005d74:	4648      	mov	r0, r9
 8005d76:	4639      	mov	r1, r7
 8005d78:	2210      	movs	r2, #16
 8005d7a:	f7ff fb13 	bl	80053a4 <AES_keyschedule_enc_LL>
 8005d7e:	46ba      	mov	sl, r7
 8005d80:	9401      	str	r4, [sp, #4]
 8005d82:	4626      	mov	r6, r4
 8005d84:	68ec      	ldr	r4, [r5, #12]
 8005d86:	2310      	movs	r3, #16
 8005d88:	3401      	adds	r4, #1
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	463a      	mov	r2, r7
 8005d90:	441e      	add	r6, r3
 8005d92:	60ec      	str	r4, [r5, #12]
 8005d94:	b954      	cbnz	r4, 8005dac <crl_DRBG_AES128_Generate.part.25+0x64>
 8005d96:	68ac      	ldr	r4, [r5, #8]
 8005d98:	3401      	adds	r4, #1
 8005d9a:	60ac      	str	r4, [r5, #8]
 8005d9c:	b934      	cbnz	r4, 8005dac <crl_DRBG_AES128_Generate.part.25+0x64>
 8005d9e:	686c      	ldr	r4, [r5, #4]
 8005da0:	3401      	adds	r4, #1
 8005da2:	606c      	str	r4, [r5, #4]
 8005da4:	b914      	cbnz	r4, 8005dac <crl_DRBG_AES128_Generate.part.25+0x64>
 8005da6:	682c      	ldr	r4, [r5, #0]
 8005da8:	3401      	adds	r4, #1
 8005daa:	602c      	str	r4, [r5, #0]
 8005dac:	f7ff fbdc 	bl	8005568 <AES_general_SW_enc>
 8005db0:	42be      	cmp	r6, r7
 8005db2:	d1e7      	bne.n	8005d84 <crl_DRBG_AES128_Generate.part.25+0x3c>
 8005db4:	9807      	ldr	r0, [sp, #28]
 8005db6:	9a08      	ldr	r2, [sp, #32]
 8005db8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dbc:	9e06      	ldr	r6, [sp, #24]
 8005dbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005dc0:	4041      	eors	r1, r0
 8005dc2:	4053      	eors	r3, r2
 8005dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005dc8:	61ab      	str	r3, [r5, #24]
 8005dca:	4074      	eors	r4, r6
 8005dcc:	ea80 0702 	eor.w	r7, r0, r2
 8005dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dd6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005dd8:	612c      	str	r4, [r5, #16]
 8005dda:	6169      	str	r1, [r5, #20]
 8005ddc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005dde:	61ef      	str	r7, [r5, #28]
 8005de0:	ea80 0102 	eor.w	r1, r0, r2
 8005de4:	ea83 0006 	eor.w	r0, r3, r6
 8005de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005dec:	6029      	str	r1, [r5, #0]
 8005dee:	405c      	eors	r4, r3
 8005df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df2:	6068      	str	r0, [r5, #4]
 8005df4:	405a      	eors	r2, r3
 8005df6:	60ac      	str	r4, [r5, #8]
 8005df8:	60ea      	str	r2, [r5, #12]
 8005dfa:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8006080 <crl_DRBG_AES128_Generate.part.25+0x338>
 8005dfe:	4648      	mov	r0, r9
 8005e00:	4651      	mov	r1, sl
 8005e02:	2210      	movs	r2, #16
 8005e04:	ea0b 0808 	and.w	r8, fp, r8
 8005e08:	f7ff facc 	bl	80053a4 <AES_keyschedule_enc_LL>
 8005e0c:	f1b8 0f00 	cmp.w	r8, #0
 8005e10:	f2c0 811e 	blt.w	8006050 <crl_DRBG_AES128_Generate.part.25+0x308>
 8005e14:	f1bb 0f0f 	cmp.w	fp, #15
 8005e18:	f340 8121 	ble.w	800605e <crl_DRBG_AES128_Generate.part.25+0x316>
 8005e1c:	9f00      	ldr	r7, [sp, #0]
 8005e1e:	f04f 0910 	mov.w	r9, #16
 8005e22:	1cfc      	adds	r4, r7, #3
 8005e24:	ae02      	add	r6, sp, #8
 8005e26:	68ef      	ldr	r7, [r5, #12]
 8005e28:	2310      	movs	r3, #16
 8005e2a:	3701      	adds	r7, #1
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4652      	mov	r2, sl
 8005e32:	4499      	add	r9, r3
 8005e34:	60ef      	str	r7, [r5, #12]
 8005e36:	b957      	cbnz	r7, 8005e4e <crl_DRBG_AES128_Generate.part.25+0x106>
 8005e38:	68af      	ldr	r7, [r5, #8]
 8005e3a:	3701      	adds	r7, #1
 8005e3c:	60af      	str	r7, [r5, #8]
 8005e3e:	b937      	cbnz	r7, 8005e4e <crl_DRBG_AES128_Generate.part.25+0x106>
 8005e40:	686f      	ldr	r7, [r5, #4]
 8005e42:	3701      	adds	r7, #1
 8005e44:	606f      	str	r7, [r5, #4]
 8005e46:	b917      	cbnz	r7, 8005e4e <crl_DRBG_AES128_Generate.part.25+0x106>
 8005e48:	682f      	ldr	r7, [r5, #0]
 8005e4a:	3701      	adds	r7, #1
 8005e4c:	602f      	str	r7, [r5, #0]
 8005e4e:	f7ff fb8b 	bl	8005568 <AES_general_SW_enc>
 8005e52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005e56:	0a07      	lsrs	r7, r0, #8
 8005e58:	7020      	strb	r0, [r4, #0]
 8005e5a:	f804 7c01 	strb.w	r7, [r4, #-1]
 8005e5e:	0c07      	lsrs	r7, r0, #16
 8005e60:	0e00      	lsrs	r0, r0, #24
 8005e62:	f804 7c02 	strb.w	r7, [r4, #-2]
 8005e66:	f804 0c03 	strb.w	r0, [r4, #-3]
 8005e6a:	0a0f      	lsrs	r7, r1, #8
 8005e6c:	0c08      	lsrs	r0, r1, #16
 8005e6e:	7121      	strb	r1, [r4, #4]
 8005e70:	0e09      	lsrs	r1, r1, #24
 8005e72:	70e7      	strb	r7, [r4, #3]
 8005e74:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8005e78:	70a0      	strb	r0, [r4, #2]
 8005e7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e7e:	7061      	strb	r1, [r4, #1]
 8005e80:	0e17      	lsrs	r7, r2, #24
 8005e82:	7222      	strb	r2, [r4, #8]
 8005e84:	0a18      	lsrs	r0, r3, #8
 8005e86:	0c19      	lsrs	r1, r3, #16
 8005e88:	0e1a      	lsrs	r2, r3, #24
 8005e8a:	45cb      	cmp	fp, r9
 8005e8c:	f884 c007 	strb.w	ip, [r4, #7]
 8005e90:	f884 e006 	strb.w	lr, [r4, #6]
 8005e94:	7167      	strb	r7, [r4, #5]
 8005e96:	7323      	strb	r3, [r4, #12]
 8005e98:	72e0      	strb	r0, [r4, #11]
 8005e9a:	72a1      	strb	r1, [r4, #10]
 8005e9c:	7262      	strb	r2, [r4, #9]
 8005e9e:	f104 0410 	add.w	r4, r4, #16
 8005ea2:	dac0      	bge.n	8005e26 <crl_DRBG_AES128_Generate.part.25+0xde>
 8005ea4:	f1b8 0f00 	cmp.w	r8, #0
 8005ea8:	d15c      	bne.n	8005f64 <crl_DRBG_AES128_Generate.part.25+0x21c>
 8005eaa:	9c01      	ldr	r4, [sp, #4]
 8005eac:	68ee      	ldr	r6, [r5, #12]
 8005eae:	2310      	movs	r3, #16
 8005eb0:	3601      	adds	r6, #1
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	4652      	mov	r2, sl
 8005eb8:	441c      	add	r4, r3
 8005eba:	60ee      	str	r6, [r5, #12]
 8005ebc:	b956      	cbnz	r6, 8005ed4 <crl_DRBG_AES128_Generate.part.25+0x18c>
 8005ebe:	68ae      	ldr	r6, [r5, #8]
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	60ae      	str	r6, [r5, #8]
 8005ec4:	b936      	cbnz	r6, 8005ed4 <crl_DRBG_AES128_Generate.part.25+0x18c>
 8005ec6:	686e      	ldr	r6, [r5, #4]
 8005ec8:	3601      	adds	r6, #1
 8005eca:	606e      	str	r6, [r5, #4]
 8005ecc:	b916      	cbnz	r6, 8005ed4 <crl_DRBG_AES128_Generate.part.25+0x18c>
 8005ece:	682e      	ldr	r6, [r5, #0]
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	602e      	str	r6, [r5, #0]
 8005ed4:	f7ff fb48 	bl	8005568 <AES_general_SW_enc>
 8005ed8:	4554      	cmp	r4, sl
 8005eda:	d1e7      	bne.n	8005eac <crl_DRBG_AES128_Generate.part.25+0x164>
 8005edc:	9c07      	ldr	r4, [sp, #28]
 8005ede:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005ee0:	9f06      	ldr	r7, [sp, #24]
 8005ee2:	9908      	ldr	r1, [sp, #32]
 8005ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ee6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eea:	4060      	eors	r0, r4
 8005eec:	ea81 0c02 	eor.w	ip, r1, r2
 8005ef0:	407e      	eors	r6, r7
 8005ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ef4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ef6:	6168      	str	r0, [r5, #20]
 8005ef8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005efa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005efc:	612e      	str	r6, [r5, #16]
 8005efe:	ea87 0800 	eor.w	r8, r7, r0
 8005f02:	ea82 0603 	eor.w	r6, r2, r3
 8005f06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f0c:	6a29      	ldr	r1, [r5, #32]
 8005f0e:	f8c5 c018 	str.w	ip, [r5, #24]
 8005f12:	ea84 0700 	eor.w	r7, r4, r0
 8005f16:	ea82 0403 	eor.w	r4, r2, r3
 8005f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f1e:	f8c5 801c 	str.w	r8, [r5, #28]
 8005f22:	ea82 0003 	eor.w	r0, r2, r3
 8005f26:	1c4b      	adds	r3, r1, #1
 8005f28:	60e8      	str	r0, [r5, #12]
 8005f2a:	bf1a      	itte	ne
 8005f2c:	3101      	addne	r1, #1
 8005f2e:	2000      	movne	r0, #0
 8005f30:	f241 7073 	movweq	r0, #6003	; 0x1773
 8005f34:	e885 00c0 	stmia.w	r5, {r6, r7}
 8005f38:	60ac      	str	r4, [r5, #8]
 8005f3a:	bf18      	it	ne
 8005f3c:	6229      	strne	r1, [r5, #32]
 8005f3e:	b043      	add	sp, #268	; 0x10c
 8005f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f44:	2300      	movs	r3, #0
 8005f46:	ac0e      	add	r4, sp, #56	; 0x38
 8005f48:	9306      	str	r3, [sp, #24]
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	9308      	str	r3, [sp, #32]
 8005f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f50:	930a      	str	r3, [sp, #40]	; 0x28
 8005f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f54:	930c      	str	r3, [sp, #48]	; 0x30
 8005f56:	930d      	str	r3, [sp, #52]	; 0x34
 8005f58:	f100 0910 	add.w	r9, r0, #16
 8005f5c:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8005f60:	9401      	str	r4, [sp, #4]
 8005f62:	e74a      	b.n	8005dfa <crl_DRBG_AES128_Generate.part.25+0xb2>
 8005f64:	68eb      	ldr	r3, [r5, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60eb      	str	r3, [r5, #12]
 8005f6a:	b953      	cbnz	r3, 8005f82 <crl_DRBG_AES128_Generate.part.25+0x23a>
 8005f6c:	68ab      	ldr	r3, [r5, #8]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60ab      	str	r3, [r5, #8]
 8005f72:	b933      	cbnz	r3, 8005f82 <crl_DRBG_AES128_Generate.part.25+0x23a>
 8005f74:	686b      	ldr	r3, [r5, #4]
 8005f76:	3301      	adds	r3, #1
 8005f78:	606b      	str	r3, [r5, #4]
 8005f7a:	b913      	cbnz	r3, 8005f82 <crl_DRBG_AES128_Generate.part.25+0x23a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	ae02      	add	r6, sp, #8
 8005f84:	4652      	mov	r2, sl
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	2310      	movs	r3, #16
 8005f8c:	f7ff faec 	bl	8005568 <AES_general_SW_enc>
 8005f90:	f1b8 0f00 	cmp.w	r8, #0
 8005f94:	4642      	mov	r2, r8
 8005f96:	bfb8      	it	lt
 8005f98:	f108 0203 	addlt.w	r2, r8, #3
 8005f9c:	1092      	asrs	r2, r2, #2
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	dd60      	ble.n	8006064 <crl_DRBG_AES128_Generate.part.25+0x31c>
 8005fa2:	9900      	ldr	r1, [sp, #0]
 8005fa4:	6833      	ldr	r3, [r6, #0]
 8005fa6:	f1a9 0010 	sub.w	r0, r9, #16
 8005faa:	4401      	add	r1, r0
 8005fac:	0c1f      	lsrs	r7, r3, #16
 8005fae:	704f      	strb	r7, [r1, #1]
 8005fb0:	9f00      	ldr	r7, [sp, #0]
 8005fb2:	70cb      	strb	r3, [r1, #3]
 8005fb4:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8005fb8:	0e1c      	lsrs	r4, r3, #24
 8005fba:	2a01      	cmp	r2, #1
 8005fbc:	f881 e002 	strb.w	lr, [r1, #2]
 8005fc0:	543c      	strb	r4, [r7, r0]
 8005fc2:	dd51      	ble.n	8006068 <crl_DRBG_AES128_Generate.part.25+0x320>
 8005fc4:	6873      	ldr	r3, [r6, #4]
 8005fc6:	f1a9 000c 	sub.w	r0, r9, #12
 8005fca:	4639      	mov	r1, r7
 8005fcc:	4401      	add	r1, r0
 8005fce:	0c1f      	lsrs	r7, r3, #16
 8005fd0:	704f      	strb	r7, [r1, #1]
 8005fd2:	9f00      	ldr	r7, [sp, #0]
 8005fd4:	70cb      	strb	r3, [r1, #3]
 8005fd6:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8005fda:	0e1c      	lsrs	r4, r3, #24
 8005fdc:	2a02      	cmp	r2, #2
 8005fde:	f881 e002 	strb.w	lr, [r1, #2]
 8005fe2:	543c      	strb	r4, [r7, r0]
 8005fe4:	dd42      	ble.n	800606c <crl_DRBG_AES128_Generate.part.25+0x324>
 8005fe6:	68b3      	ldr	r3, [r6, #8]
 8005fe8:	f1a9 0108 	sub.w	r1, r9, #8
 8005fec:	463a      	mov	r2, r7
 8005fee:	440a      	add	r2, r1
 8005ff0:	0a1f      	lsrs	r7, r3, #8
 8005ff2:	7097      	strb	r7, [r2, #2]
 8005ff4:	9f00      	ldr	r7, [sp, #0]
 8005ff6:	70d3      	strb	r3, [r2, #3]
 8005ff8:	0c18      	lsrs	r0, r3, #16
 8005ffa:	0e1c      	lsrs	r4, r3, #24
 8005ffc:	7050      	strb	r0, [r2, #1]
 8005ffe:	547c      	strb	r4, [r7, r1]
 8006000:	2003      	movs	r0, #3
 8006002:	f018 0f03 	tst.w	r8, #3
 8006006:	f43f af50 	beq.w	8005eaa <crl_DRBG_AES128_Generate.part.25+0x162>
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <crl_DRBG_AES128_Generate.part.25+0x334>)
 800600c:	ea08 0303 	and.w	r3, r8, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	db2d      	blt.n	8006070 <crl_DRBG_AES128_Generate.part.25+0x328>
 8006014:	9c00      	ldr	r4, [sp, #0]
 8006016:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 800601a:	f1a9 0110 	sub.w	r1, r9, #16
 800601e:	441c      	add	r4, r3
 8006020:	f1c3 0704 	rsb	r7, r3, #4
 8006024:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006028:	440c      	add	r4, r1
 800602a:	00ff      	lsls	r7, r7, #3
 800602c:	40fa      	lsrs	r2, r7
 800602e:	3b02      	subs	r3, #2
 8006030:	f804 2c01 	strb.w	r2, [r4, #-1]
 8006034:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8006038:	f53f af37 	bmi.w	8005eaa <crl_DRBG_AES128_Generate.part.25+0x162>
 800603c:	9c00      	ldr	r4, [sp, #0]
 800603e:	4421      	add	r1, r4
 8006040:	0a12      	lsrs	r2, r2, #8
 8006042:	54ca      	strb	r2, [r1, r3]
 8006044:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006048:	d2fa      	bcs.n	8006040 <crl_DRBG_AES128_Generate.part.25+0x2f8>
 800604a:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 800604e:	e72c      	b.n	8005eaa <crl_DRBG_AES128_Generate.part.25+0x162>
 8006050:	f108 38ff 	add.w	r8, r8, #4294967295
 8006054:	f068 080f 	orn	r8, r8, #15
 8006058:	f108 0801 	add.w	r8, r8, #1
 800605c:	e6da      	b.n	8005e14 <crl_DRBG_AES128_Generate.part.25+0xcc>
 800605e:	f04f 0910 	mov.w	r9, #16
 8006062:	e71f      	b.n	8005ea4 <crl_DRBG_AES128_Generate.part.25+0x15c>
 8006064:	2000      	movs	r0, #0
 8006066:	e7cc      	b.n	8006002 <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006068:	2001      	movs	r0, #1
 800606a:	e7ca      	b.n	8006002 <crl_DRBG_AES128_Generate.part.25+0x2ba>
 800606c:	2002      	movs	r0, #2
 800606e:	e7c8      	b.n	8006002 <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006070:	3b01      	subs	r3, #1
 8006072:	f063 0303 	orn	r3, r3, #3
 8006076:	3301      	adds	r3, #1
 8006078:	e7cc      	b.n	8006014 <crl_DRBG_AES128_Generate.part.25+0x2cc>
 800607a:	bf00      	nop
 800607c:	80000003 	.word	0x80000003
 8006080:	8000000f 	.word	0x8000000f

08006084 <StAllocBig>:
 8006084:	88d3      	ldrh	r3, [r2, #6]
 8006086:	b4f0      	push	{r4, r5, r6, r7}
 8006088:	1c4c      	adds	r4, r1, #1
 800608a:	8896      	ldrh	r6, [r2, #4]
 800608c:	f103 0508 	add.w	r5, r3, #8
 8006090:	00a4      	lsls	r4, r4, #2
 8006092:	1967      	adds	r7, r4, r5
 8006094:	42b7      	cmp	r7, r6
 8006096:	d903      	bls.n	80060a0 <StAllocBig+0x1c>
 8006098:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800609c:	bcf0      	pop	{r4, r5, r6, r7}
 800609e:	4770      	bx	lr
 80060a0:	6816      	ldr	r6, [r2, #0]
 80060a2:	18f7      	adds	r7, r6, r3
 80060a4:	6007      	str	r7, [r0, #0]
 80060a6:	6817      	ldr	r7, [r2, #0]
 80060a8:	443d      	add	r5, r7
 80060aa:	50f5      	str	r5, [r6, r3]
 80060ac:	6803      	ldr	r3, [r0, #0]
 80060ae:	7199      	strb	r1, [r3, #6]
 80060b0:	88d3      	ldrh	r3, [r2, #6]
 80060b2:	3308      	adds	r3, #8
 80060b4:	441c      	add	r4, r3
 80060b6:	80d4      	strh	r4, [r2, #6]
 80060b8:	2000      	movs	r0, #0
 80060ba:	bcf0      	pop	{r4, r5, r6, r7}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop

080060c0 <StFreeBig>:
 80060c0:	6803      	ldr	r3, [r0, #0]
 80060c2:	b14b      	cbz	r3, 80060d8 <StFreeBig+0x18>
 80060c4:	b141      	cbz	r1, 80060d8 <StFreeBig+0x18>
 80060c6:	799a      	ldrb	r2, [r3, #6]
 80060c8:	88cb      	ldrh	r3, [r1, #6]
 80060ca:	43d2      	mvns	r2, r2
 80060cc:	3b08      	subs	r3, #8
 80060ce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80060d2:	2300      	movs	r3, #0
 80060d4:	80ca      	strh	r2, [r1, #6]
 80060d6:	6003      	str	r3, [r0, #0]
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop

080060dc <InitBig>:
 80060dc:	7983      	ldrb	r3, [r0, #6]
 80060de:	b470      	push	{r4, r5, r6}
 80060e0:	b1b3      	cbz	r3, 8006110 <InitBig+0x34>
 80060e2:	2201      	movs	r2, #1
 80060e4:	6805      	ldr	r5, [r0, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	2600      	movs	r6, #0
 80060ea:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 80060ee:	7984      	ldrb	r4, [r0, #6]
 80060f0:	3301      	adds	r3, #1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3401      	adds	r4, #1
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	461a      	mov	r2, r3
 80060fa:	d3f6      	bcc.n	80060ea <InitBig+0xe>
 80060fc:	2301      	movs	r3, #1
 80060fe:	2900      	cmp	r1, #0
 8006100:	8083      	strh	r3, [r0, #4]
 8006102:	bfb4      	ite	lt
 8006104:	4249      	neglt	r1, r1
 8006106:	2300      	movge	r3, #0
 8006108:	71c3      	strb	r3, [r0, #7]
 800610a:	6029      	str	r1, [r5, #0]
 800610c:	bc70      	pop	{r4, r5, r6}
 800610e:	4770      	bx	lr
 8006110:	6805      	ldr	r5, [r0, #0]
 8006112:	e7f3      	b.n	80060fc <InitBig+0x20>

08006114 <CopyBig>:
 8006114:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8006118:	798b      	ldrb	r3, [r1, #6]
 800611a:	8884      	ldrh	r4, [r0, #4]
 800611c:	429c      	cmp	r4, r3
 800611e:	d907      	bls.n	8006130 <CopyBig+0x1c>
 8006120:	3301      	adds	r3, #1
 8006122:	42a3      	cmp	r3, r4
 8006124:	d227      	bcs.n	8006176 <CopyBig+0x62>
 8006126:	f241 40b5 	movw	r0, #5301	; 0x14b5
 800612a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800612e:	4770      	bx	lr
 8006130:	f04f 0800 	mov.w	r8, #0
 8006134:	79c3      	ldrb	r3, [r0, #7]
 8006136:	71cb      	strb	r3, [r1, #7]
 8006138:	808c      	strh	r4, [r1, #4]
 800613a:	4622      	mov	r2, r4
 800613c:	b1f4      	cbz	r4, 800617c <CopyBig+0x68>
 800613e:	6807      	ldr	r7, [r0, #0]
 8006140:	680d      	ldr	r5, [r1, #0]
 8006142:	00a6      	lsls	r6, r4, #2
 8006144:	2300      	movs	r3, #0
 8006146:	58f8      	ldr	r0, [r7, r3]
 8006148:	50e8      	str	r0, [r5, r3]
 800614a:	3304      	adds	r3, #4
 800614c:	42b3      	cmp	r3, r6
 800614e:	d1fa      	bne.n	8006146 <CopyBig+0x32>
 8006150:	798b      	ldrb	r3, [r1, #6]
 8006152:	42a3      	cmp	r3, r4
 8006154:	db0b      	blt.n	800616e <CopyBig+0x5a>
 8006156:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800615a:	3b01      	subs	r3, #1
 800615c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006160:	2500      	movs	r5, #0
 8006162:	f843 5f04 	str.w	r5, [r3, #4]!
 8006166:	798c      	ldrb	r4, [r1, #6]
 8006168:	3201      	adds	r2, #1
 800616a:	4294      	cmp	r4, r2
 800616c:	daf9      	bge.n	8006162 <CopyBig+0x4e>
 800616e:	4640      	mov	r0, r8
 8006170:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006174:	4770      	bx	lr
 8006176:	f241 48b5 	movw	r8, #5301	; 0x14b5
 800617a:	e7db      	b.n	8006134 <CopyBig+0x20>
 800617c:	680d      	ldr	r5, [r1, #0]
 800617e:	e7ea      	b.n	8006156 <CopyBig+0x42>

08006180 <Add_Moduli_Big>:
 8006180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	7983      	ldrb	r3, [r0, #6]
 8006186:	8884      	ldrh	r4, [r0, #4]
 8006188:	888f      	ldrh	r7, [r1, #4]
 800618a:	6805      	ldr	r5, [r0, #0]
 800618c:	680e      	ldr	r6, [r1, #0]
 800618e:	4692      	mov	sl, r2
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	42a7      	cmp	r7, r4
 8006194:	bf34      	ite	cc
 8006196:	46bb      	movcc	fp, r7
 8006198:	46a3      	movcs	fp, r4
 800619a:	4294      	cmp	r4, r2
 800619c:	4623      	mov	r3, r4
 800619e:	f8da 8000 	ldr.w	r8, [sl]
 80061a2:	d20f      	bcs.n	80061c4 <Add_Moduli_Big+0x44>
 80061a4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80061a8:	3a01      	subs	r2, #1
 80061aa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80061ae:	f04f 0c00 	mov.w	ip, #0
 80061b2:	f842 cf04 	str.w	ip, [r2, #4]!
 80061b6:	f890 e006 	ldrb.w	lr, [r0, #6]
 80061ba:	3301      	adds	r3, #1
 80061bc:	f10e 0e01 	add.w	lr, lr, #1
 80061c0:	459e      	cmp	lr, r3
 80061c2:	d8f6      	bhi.n	80061b2 <Add_Moduli_Big+0x32>
 80061c4:	798a      	ldrb	r2, [r1, #6]
 80061c6:	3201      	adds	r2, #1
 80061c8:	4297      	cmp	r7, r2
 80061ca:	463b      	mov	r3, r7
 80061cc:	d20f      	bcs.n	80061ee <Add_Moduli_Big+0x6e>
 80061ce:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80061d2:	3a01      	subs	r2, #1
 80061d4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80061d8:	f04f 0c00 	mov.w	ip, #0
 80061dc:	f842 cf04 	str.w	ip, [r2, #4]!
 80061e0:	f891 e006 	ldrb.w	lr, [r1, #6]
 80061e4:	3301      	adds	r3, #1
 80061e6:	f10e 0e01 	add.w	lr, lr, #1
 80061ea:	459e      	cmp	lr, r3
 80061ec:	d8f6      	bhi.n	80061dc <Add_Moduli_Big+0x5c>
 80061ee:	42bc      	cmp	r4, r7
 80061f0:	d200      	bcs.n	80061f4 <Add_Moduli_Big+0x74>
 80061f2:	4608      	mov	r0, r1
 80061f4:	4651      	mov	r1, sl
 80061f6:	f7ff ff8d 	bl	8006114 <CopyBig>
 80061fa:	46dc      	mov	ip, fp
 80061fc:	f1bb 0f00 	cmp.w	fp, #0
 8006200:	d030      	beq.n	8006264 <Add_Moduli_Big+0xe4>
 8006202:	ea4f 098b 	mov.w	r9, fp, lsl #2
 8006206:	2700      	movs	r7, #0
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	59e8      	ldr	r0, [r5, r7]
 800620e:	59f4      	ldr	r4, [r6, r7]
 8006210:	2100      	movs	r1, #0
 8006212:	1900      	adds	r0, r0, r4
 8006214:	f141 0100 	adc.w	r1, r1, #0
 8006218:	1880      	adds	r0, r0, r2
 800621a:	f848 0007 	str.w	r0, [r8, r7]
 800621e:	f107 0704 	add.w	r7, r7, #4
 8006222:	eb41 0103 	adc.w	r1, r1, r3
 8006226:	454f      	cmp	r7, r9
 8006228:	460a      	mov	r2, r1
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	d1ed      	bne.n	800620c <Add_Moduli_Big+0x8c>
 8006230:	ea52 0103 	orrs.w	r1, r2, r3
 8006234:	d016      	beq.n	8006264 <Add_Moduli_Big+0xe4>
 8006236:	f858 3007 	ldr.w	r3, [r8, r7]
 800623a:	3301      	adds	r3, #1
 800623c:	f848 3007 	str.w	r3, [r8, r7]
 8006240:	4447      	add	r7, r8
 8006242:	b97b      	cbnz	r3, 8006264 <Add_Moduli_Big+0xe4>
 8006244:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8006248:	455a      	cmp	r2, fp
 800624a:	d202      	bcs.n	8006252 <Add_Moduli_Big+0xd2>
 800624c:	e00c      	b.n	8006268 <Add_Moduli_Big+0xe8>
 800624e:	4594      	cmp	ip, r2
 8006250:	d80a      	bhi.n	8006268 <Add_Moduli_Big+0xe8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3301      	adds	r3, #1
 8006256:	f10c 0c01 	add.w	ip, ip, #1
 800625a:	f847 3f04 	str.w	r3, [r7, #4]!
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f5      	beq.n	800624e <Add_Moduli_Big+0xce>
 8006262:	e001      	b.n	8006268 <Add_Moduli_Big+0xe8>
 8006264:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8006268:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800626c:	b113      	cbz	r3, 8006274 <Add_Moduli_Big+0xf4>
 800626e:	3201      	adds	r2, #1
 8006270:	f8aa 2004 	strh.w	r2, [sl, #4]
 8006274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006278 <IsZeroBig>:
 8006278:	8883      	ldrh	r3, [r0, #4]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d001      	beq.n	8006282 <IsZeroBig+0xa>
 800627e:	2000      	movs	r0, #0
 8006280:	4770      	bx	lr
 8006282:	6803      	ldr	r3, [r0, #0]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f1d0 0001 	rsbs	r0, r0, #1
 800628a:	bf38      	it	cc
 800628c:	2000      	movcc	r0, #0
 800628e:	4770      	bx	lr

08006290 <SetZeroBig>:
 8006290:	2300      	movs	r3, #0
 8006292:	b430      	push	{r4, r5}
 8006294:	6804      	ldr	r4, [r0, #0]
 8006296:	71c3      	strb	r3, [r0, #7]
 8006298:	461a      	mov	r2, r3
 800629a:	461d      	mov	r5, r3
 800629c:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 80062a0:	7981      	ldrb	r1, [r0, #6]
 80062a2:	3301      	adds	r3, #1
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3101      	adds	r1, #1
 80062a8:	428b      	cmp	r3, r1
 80062aa:	461a      	mov	r2, r3
 80062ac:	d3f6      	bcc.n	800629c <SetZeroBig+0xc>
 80062ae:	2301      	movs	r3, #1
 80062b0:	8083      	strh	r3, [r0, #4]
 80062b2:	bc30      	pop	{r4, r5}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop

080062b8 <CompareBig>:
 80062b8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80062bc:	79c2      	ldrb	r2, [r0, #7]
 80062be:	79cb      	ldrb	r3, [r1, #7]
 80062c0:	4293      	cmp	r3, r2
 80062c2:	b254      	sxtb	r4, r2
 80062c4:	d005      	beq.n	80062d2 <CompareBig+0x1a>
 80062c6:	2c01      	cmp	r4, #1
 80062c8:	d036      	beq.n	8006338 <CompareBig+0x80>
 80062ca:	2003      	movs	r0, #3
 80062cc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80062d0:	4770      	bx	lr
 80062d2:	8884      	ldrh	r4, [r0, #4]
 80062d4:	888f      	ldrh	r7, [r1, #4]
 80062d6:	42bc      	cmp	r4, r7
 80062d8:	d820      	bhi.n	800631c <CompareBig+0x64>
 80062da:	d327      	bcc.n	800632c <CompareBig+0x74>
 80062dc:	f8d0 8000 	ldr.w	r8, [r0]
 80062e0:	f8d1 c000 	ldr.w	ip, [r1]
 80062e4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 80062e8:	eb0c 0187 	add.w	r1, ip, r7, lsl #2
 80062ec:	2301      	movs	r3, #1
 80062ee:	e004      	b.n	80062fa <CompareBig+0x42>
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d808      	bhi.n	8006306 <CompareBig+0x4e>
 80062f4:	3301      	adds	r3, #1
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	d805      	bhi.n	8006306 <CompareBig+0x4e>
 80062fa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80062fe:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 8006302:	42ae      	cmp	r6, r5
 8006304:	d0f4      	beq.n	80062f0 <CompareBig+0x38>
 8006306:	1e59      	subs	r1, r3, #1
 8006308:	42a1      	cmp	r1, r4
 800630a:	d01d      	beq.n	8006348 <CompareBig+0x90>
 800630c:	1ae4      	subs	r4, r4, r3
 800630e:	1afb      	subs	r3, r7, r3
 8006310:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8006314:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8006318:	4299      	cmp	r1, r3
 800631a:	d907      	bls.n	800632c <CompareBig+0x74>
 800631c:	2a00      	cmp	r2, #0
 800631e:	bf0c      	ite	eq
 8006320:	2002      	moveq	r0, #2
 8006322:	f06f 0001 	mvnne.w	r0, #1
 8006326:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800632a:	4770      	bx	lr
 800632c:	2a00      	cmp	r2, #0
 800632e:	bf0c      	ite	eq
 8006330:	f04f 30ff 	moveq.w	r0, #4294967295
 8006334:	2001      	movne	r0, #1
 8006336:	e7c9      	b.n	80062cc <CompareBig+0x14>
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf0c      	ite	eq
 800633c:	f06f 0002 	mvneq.w	r0, #2
 8006340:	2003      	movne	r0, #3
 8006342:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006346:	4770      	bx	lr
 8006348:	2000      	movs	r0, #0
 800634a:	e7bf      	b.n	80062cc <CompareBig+0x14>

0800634c <CountBits>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4604      	mov	r4, r0
 8006350:	f7ff ff92 	bl	8006278 <IsZeroBig>
 8006354:	b9d8      	cbnz	r0, 800638e <CountBits+0x42>
 8006356:	88a0      	ldrh	r0, [r4, #4]
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800635e:	3b01      	subs	r3, #1
 8006360:	0140      	lsls	r0, r0, #5
 8006362:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006366:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800636a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800636e:	d00d      	beq.n	800638c <CountBits+0x40>
 8006370:	f1a0 0420 	sub.w	r4, r0, #32
 8006374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006378:	e001      	b.n	800637e <CountBits+0x32>
 800637a:	42a0      	cmp	r0, r4
 800637c:	d009      	beq.n	8006392 <CountBits+0x46>
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	ea01 0203 	and.w	r2, r1, r3
 8006384:	4293      	cmp	r3, r2
 8006386:	f100 30ff 	add.w	r0, r0, #4294967295
 800638a:	d1f6      	bne.n	800637a <CountBits+0x2e>
 800638c:	bd10      	pop	{r4, pc}
 800638e:	2001      	movs	r0, #1
 8006390:	bd10      	pop	{r4, pc}
 8006392:	bd10      	pop	{r4, pc}

08006394 <CountBytes>:
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
 8006398:	f7ff ff6e 	bl	8006278 <IsZeroBig>
 800639c:	2801      	cmp	r0, #1
 800639e:	d01a      	beq.n	80063d6 <CountBytes+0x42>
 80063a0:	88a0      	ldrh	r0, [r4, #4]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	0080      	lsls	r0, r0, #2
 80063a6:	4403      	add	r3, r0
 80063a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80063ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063b0:	d111      	bne.n	80063d6 <CountBytes+0x42>
 80063b2:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80063b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80063ba:	d10b      	bne.n	80063d4 <CountBytes+0x40>
 80063bc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80063c0:	f1a0 0202 	sub.w	r2, r0, #2
 80063c4:	d106      	bne.n	80063d4 <CountBytes+0x40>
 80063c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063ca:	f1a0 0203 	sub.w	r2, r0, #3
 80063ce:	d101      	bne.n	80063d4 <CountBytes+0x40>
 80063d0:	3804      	subs	r0, #4
 80063d2:	bd10      	pop	{r4, pc}
 80063d4:	4610      	mov	r0, r2
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <W8_to_Big>:
 80063d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	2a00      	cmp	r2, #0
 80063de:	d072      	beq.n	80064c6 <W8_to_Big+0xee>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d06f      	beq.n	80064c4 <W8_to_Big+0xec>
 80063e4:	1ccc      	adds	r4, r1, #3
 80063e6:	7993      	ldrb	r3, [r2, #6]
 80063e8:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80063ec:	4563      	cmp	r3, ip
 80063ee:	d203      	bcs.n	80063f8 <W8_to_Big+0x20>
 80063f0:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80063f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f8:	2900      	cmp	r1, #0
 80063fa:	d068      	beq.n	80064ce <W8_to_Big+0xf6>
 80063fc:	4688      	mov	r8, r1
 80063fe:	bfb8      	it	lt
 8006400:	46a0      	movlt	r8, r4
 8006402:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8006406:	f1b8 0f00 	cmp.w	r8, #0
 800640a:	6817      	ldr	r7, [r2, #0]
 800640c:	bfd8      	it	le
 800640e:	2400      	movle	r4, #0
 8006410:	dd1a      	ble.n	8006448 <W8_to_Big+0x70>
 8006412:	1843      	adds	r3, r0, r1
 8006414:	463c      	mov	r4, r7
 8006416:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
 800641a:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 800641e:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 8006422:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 8006426:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800642a:	042d      	lsls	r5, r5, #16
 800642c:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8006430:	ea45 0509 	orr.w	r5, r5, r9
 8006434:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8006438:	f844 5b04 	str.w	r5, [r4], #4
 800643c:	4554      	cmp	r4, sl
 800643e:	f1a3 0304 	sub.w	r3, r3, #4
 8006442:	d1ea      	bne.n	800641a <W8_to_Big+0x42>
 8006444:	7993      	ldrb	r3, [r2, #6]
 8006446:	4644      	mov	r4, r8
 8006448:	429c      	cmp	r4, r3
 800644a:	da0b      	bge.n	8006464 <W8_to_Big+0x8c>
 800644c:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 8006450:	3d01      	subs	r5, #1
 8006452:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006456:	2300      	movs	r3, #0
 8006458:	f845 3f04 	str.w	r3, [r5, #4]!
 800645c:	7996      	ldrb	r6, [r2, #6]
 800645e:	3401      	adds	r4, #1
 8006460:	42b4      	cmp	r4, r6
 8006462:	dbf9      	blt.n	8006458 <W8_to_Big+0x80>
 8006464:	f011 0103 	ands.w	r1, r1, #3
 8006468:	d010      	beq.n	800648c <W8_to_Big+0xb4>
 800646a:	7803      	ldrb	r3, [r0, #0]
 800646c:	f847 3028 	str.w	r3, [r7, r8, lsl #2]
 8006470:	2901      	cmp	r1, #1
 8006472:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 8006476:	dd09      	ble.n	800648c <W8_to_Big+0xb4>
 8006478:	1e44      	subs	r4, r0, #1
 800647a:	4421      	add	r1, r4
 800647c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006480:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8006484:	4288      	cmp	r0, r1
 8006486:	f8c8 3000 	str.w	r3, [r8]
 800648a:	d1f7      	bne.n	800647c <W8_to_Big+0xa4>
 800648c:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 8006490:	3901      	subs	r1, #1
 8006492:	fa1f f38c 	uxth.w	r3, ip
 8006496:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800649a:	8093      	strh	r3, [r2, #4]
 800649c:	b971      	cbnz	r1, 80064bc <W8_to_Big+0xe4>
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d102      	bne.n	80064a8 <W8_to_Big+0xd0>
 80064a2:	e00b      	b.n	80064bc <W8_to_Big+0xe4>
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d008      	beq.n	80064ba <W8_to_Big+0xe2>
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80064b0:	3901      	subs	r1, #1
 80064b2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80064b6:	2900      	cmp	r1, #0
 80064b8:	d0f4      	beq.n	80064a4 <W8_to_Big+0xcc>
 80064ba:	8093      	strh	r3, [r2, #4]
 80064bc:	2000      	movs	r0, #0
 80064be:	71d0      	strb	r0, [r2, #7]
 80064c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	b119      	cbz	r1, 80064ce <W8_to_Big+0xf6>
 80064c6:	f241 40b8 	movw	r0, #5304	; 0x14b8
 80064ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7ff fede 	bl	8006290 <SetZeroBig>
 80064d4:	2000      	movs	r0, #0
 80064d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064da:	bf00      	nop

080064dc <Big_to_W8>:
 80064dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e0:	4691      	mov	r9, r2
 80064e2:	4688      	mov	r8, r1
 80064e4:	4605      	mov	r5, r0
 80064e6:	f7ff ff55 	bl	8006394 <CountBytes>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	4602      	mov	r2, r0
 80064ee:	bfb8      	it	lt
 80064f0:	1cc2      	addlt	r2, r0, #3
 80064f2:	1092      	asrs	r2, r2, #2
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	dd2f      	ble.n	8006558 <Big_to_W8+0x7c>
 80064f8:	eb08 0400 	add.w	r4, r8, r0
 80064fc:	0097      	lsls	r7, r2, #2
 80064fe:	2300      	movs	r3, #0
 8006500:	682e      	ldr	r6, [r5, #0]
 8006502:	58f1      	ldr	r1, [r6, r3]
 8006504:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006508:	682e      	ldr	r6, [r5, #0]
 800650a:	58f1      	ldr	r1, [r6, r3]
 800650c:	0a09      	lsrs	r1, r1, #8
 800650e:	f804 1c02 	strb.w	r1, [r4, #-2]
 8006512:	682e      	ldr	r6, [r5, #0]
 8006514:	58f1      	ldr	r1, [r6, r3]
 8006516:	0c09      	lsrs	r1, r1, #16
 8006518:	f804 1c03 	strb.w	r1, [r4, #-3]
 800651c:	682e      	ldr	r6, [r5, #0]
 800651e:	58f6      	ldr	r6, [r6, r3]
 8006520:	3304      	adds	r3, #4
 8006522:	0e36      	lsrs	r6, r6, #24
 8006524:	42bb      	cmp	r3, r7
 8006526:	f804 6d04 	strb.w	r6, [r4, #-4]!
 800652a:	d1e9      	bne.n	8006500 <Big_to_W8+0x24>
 800652c:	f010 0303 	ands.w	r3, r0, #3
 8006530:	d009      	beq.n	8006546 <Big_to_W8+0x6a>
 8006532:	6829      	ldr	r1, [r5, #0]
 8006534:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006538:	4498      	add	r8, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006540:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8006544:	d1f9      	bne.n	800653a <Big_to_W8+0x5e>
 8006546:	f1b9 0f00 	cmp.w	r9, #0
 800654a:	d003      	beq.n	8006554 <Big_to_W8+0x78>
 800654c:	f8c9 0000 	str.w	r0, [r9]
 8006550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006558:	2200      	movs	r2, #0
 800655a:	e7e7      	b.n	800652c <Big_to_W8+0x50>

0800655c <FastMulInnerBase>:
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	8882      	ldrh	r2, [r0, #4]
 8006562:	7983      	ldrb	r3, [r0, #6]
 8006564:	440a      	add	r2, r1
 8006566:	429a      	cmp	r2, r3
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	dd04      	ble.n	8006578 <FastMulInnerBase+0x1c>
 800656e:	f241 46b5 	movw	r6, #5301	; 0x14b5
 8006572:	4630      	mov	r0, r6
 8006574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006578:	f7ff fe7e 	bl	8006278 <IsZeroBig>
 800657c:	4606      	mov	r6, r0
 800657e:	b9e8      	cbnz	r0, 80065bc <FastMulInnerBase+0x60>
 8006580:	2d00      	cmp	r5, #0
 8006582:	d0f6      	beq.n	8006572 <FastMulInnerBase+0x16>
 8006584:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	f1b8 0f01 	cmp.w	r8, #1
 800658e:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8006592:	d007      	beq.n	80065a4 <FastMulInnerBase+0x48>
 8006594:	eb00 0388 	add.w	r3, r0, r8, lsl #2
 8006598:	1d07      	adds	r7, r0, #4
 800659a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800659e:	5099      	str	r1, [r3, r2]
 80065a0:	42bb      	cmp	r3, r7
 80065a2:	d1fa      	bne.n	800659a <FastMulInnerBase+0x3e>
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	6803      	ldr	r3, [r0, #0]
 80065a8:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 80065ac:	bf08      	it	eq
 80065ae:	2204      	moveq	r2, #4
 80065b0:	2100      	movs	r1, #0
 80065b2:	4445      	add	r5, r8
 80065b4:	f000 ff30 	bl	8007418 <memset>
 80065b8:	80a5      	strh	r5, [r4, #4]
 80065ba:	e7da      	b.n	8006572 <FastMulInnerBase+0x16>
 80065bc:	2600      	movs	r6, #0
 80065be:	e7d8      	b.n	8006572 <FastMulInnerBase+0x16>

080065c0 <LeftShift>:
 80065c0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80065c4:	4681      	mov	r9, r0
 80065c6:	b3b1      	cbz	r1, 8006636 <LeftShift+0x76>
 80065c8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80065cc:	f8d0 c000 	ldr.w	ip, [r0]
 80065d0:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 80065d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065d8:	f1c1 0720 	rsb	r7, r1, #32
 80065dc:	f85c 502a 	ldr.w	r5, [ip, sl, lsl #2]
 80065e0:	f1b8 0301 	subs.w	r3, r8, #1
 80065e4:	eb0c 0a8a 	add.w	sl, ip, sl, lsl #2
 80065e8:	fa25 f007 	lsr.w	r0, r5, r7
 80065ec:	bf18      	it	ne
 80065ee:	4652      	movne	r2, sl
 80065f0:	d101      	bne.n	80065f6 <LeftShift+0x36>
 80065f2:	e009      	b.n	8006608 <LeftShift+0x48>
 80065f4:	4625      	mov	r5, r4
 80065f6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 80065fa:	408d      	lsls	r5, r1
 80065fc:	fa24 f607 	lsr.w	r6, r4, r7
 8006600:	4335      	orrs	r5, r6
 8006602:	3b01      	subs	r3, #1
 8006604:	6055      	str	r5, [r2, #4]
 8006606:	d1f5      	bne.n	80065f4 <LeftShift+0x34>
 8006608:	f8dc 3000 	ldr.w	r3, [ip]
 800660c:	fa03 f101 	lsl.w	r1, r3, r1
 8006610:	f8cc 1000 	str.w	r1, [ip]
 8006614:	b160      	cbz	r0, 8006630 <LeftShift+0x70>
 8006616:	f899 3006 	ldrb.w	r3, [r9, #6]
 800661a:	f108 0801 	add.w	r8, r8, #1
 800661e:	4598      	cmp	r8, r3
 8006620:	bf97      	itett	ls
 8006622:	f8ca 0004 	strls.w	r0, [sl, #4]
 8006626:	f241 40b5 	movwhi	r0, #5301	; 0x14b5
 800662a:	2000      	movls	r0, #0
 800662c:	f8a9 8004 	strhls.w	r8, [r9, #4]
 8006630:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006634:	4770      	bx	lr
 8006636:	4608      	mov	r0, r1
 8006638:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <MulBigbyUnInt>:
 8006640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	4684      	mov	ip, r0
 8006646:	460f      	mov	r7, r1
 8006648:	b339      	cbz	r1, 800669a <MulBigbyUnInt+0x5a>
 800664a:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800664e:	f8d0 9000 	ldr.w	r9, [r0]
 8006652:	f1b8 0f00 	cmp.w	r8, #0
 8006656:	d01d      	beq.n	8006694 <MulBigbyUnInt+0x54>
 8006658:	f1a9 0604 	sub.w	r6, r9, #4
 800665c:	eb06 0188 	add.w	r1, r6, r8, lsl #2
 8006660:	2200      	movs	r2, #0
 8006662:	2300      	movs	r3, #0
 8006664:	6874      	ldr	r4, [r6, #4]
 8006666:	4692      	mov	sl, r2
 8006668:	469b      	mov	fp, r3
 800666a:	fbe7 ab04 	umlal	sl, fp, r7, r4
 800666e:	f846 af04 	str.w	sl, [r6, #4]!
 8006672:	428e      	cmp	r6, r1
 8006674:	465d      	mov	r5, fp
 8006676:	465a      	mov	r2, fp
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	d1f2      	bne.n	8006664 <MulBigbyUnInt+0x24>
 800667e:	b14d      	cbz	r5, 8006694 <MulBigbyUnInt+0x54>
 8006680:	f89c 0006 	ldrb.w	r0, [ip, #6]
 8006684:	f108 0101 	add.w	r1, r8, #1
 8006688:	4281      	cmp	r1, r0
 800668a:	d90b      	bls.n	80066a4 <MulBigbyUnInt+0x64>
 800668c:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8006690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	2000      	movs	r0, #0
 8006696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	f7ff fdf9 	bl	8006290 <SetZeroBig>
 800669e:	4638      	mov	r0, r7
 80066a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a4:	f8ac 1004 	strh.w	r1, [ip, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f849 b028 	str.w	fp, [r9, r8, lsl #2]
 80066ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	bf00      	nop

080066b4 <Sub_Moduli_Big>:
 80066b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80066b8:	8883      	ldrh	r3, [r0, #4]
 80066ba:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80066be:	4692      	mov	sl, r2
 80066c0:	7992      	ldrb	r2, [r2, #6]
 80066c2:	454b      	cmp	r3, r9
 80066c4:	bf2c      	ite	cs
 80066c6:	4698      	movcs	r8, r3
 80066c8:	46c8      	movcc	r8, r9
 80066ca:	3201      	adds	r2, #1
 80066cc:	4590      	cmp	r8, r2
 80066ce:	d904      	bls.n	80066da <Sub_Moduli_Big+0x26>
 80066d0:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80066d4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80066d8:	4770      	bx	lr
 80066da:	7982      	ldrb	r2, [r0, #6]
 80066dc:	6807      	ldr	r7, [r0, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	bf28      	it	cs
 80066e2:	2400      	movcs	r4, #0
 80066e4:	d306      	bcc.n	80066f4 <Sub_Moduli_Big+0x40>
 80066e6:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 80066ea:	3301      	adds	r3, #1
 80066ec:	7982      	ldrb	r2, [r0, #6]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d2f8      	bcs.n	80066e6 <Sub_Moduli_Big+0x32>
 80066f4:	798b      	ldrb	r3, [r1, #6]
 80066f6:	f8d1 c000 	ldr.w	ip, [r1]
 80066fa:	454b      	cmp	r3, r9
 80066fc:	d308      	bcc.n	8006710 <Sub_Moduli_Big+0x5c>
 80066fe:	464b      	mov	r3, r9
 8006700:	2000      	movs	r0, #0
 8006702:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
 8006706:	3301      	adds	r3, #1
 8006708:	798a      	ldrb	r2, [r1, #6]
 800670a:	b29b      	uxth	r3, r3
 800670c:	429a      	cmp	r2, r3
 800670e:	d2f8      	bcs.n	8006702 <Sub_Moduli_Big+0x4e>
 8006710:	2500      	movs	r5, #0
 8006712:	f8da 6000 	ldr.w	r6, [sl]
 8006716:	f109 0901 	add.w	r9, r9, #1
 800671a:	462c      	mov	r4, r5
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8006724:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 8006728:	3401      	adds	r4, #1
 800672a:	1a40      	subs	r0, r0, r1
 800672c:	eb60 0100 	sbc.w	r1, r0, r0
 8006730:	1880      	adds	r0, r0, r2
 8006732:	b2a4      	uxth	r4, r4
 8006734:	eb41 0103 	adc.w	r1, r1, r3
 8006738:	454c      	cmp	r4, r9
 800673a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800673e:	460a      	mov	r2, r1
 8006740:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8006744:	4625      	mov	r5, r4
 8006746:	d3eb      	bcc.n	8006720 <Sub_Moduli_Big+0x6c>
 8006748:	45a0      	cmp	r8, r4
 800674a:	d90f      	bls.n	800676c <Sub_Moduli_Big+0xb8>
 800674c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006750:	f104 0c01 	add.w	ip, r4, #1
 8006754:	1950      	adds	r0, r2, r5
 8006756:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800675a:	fa1f f48c 	uxth.w	r4, ip
 800675e:	f143 0100 	adc.w	r1, r3, #0
 8006762:	45a0      	cmp	r8, r4
 8006764:	460a      	mov	r2, r1
 8006766:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800676a:	d8ef      	bhi.n	800674c <Sub_Moduli_Big+0x98>
 800676c:	b132      	cbz	r2, 800677c <Sub_Moduli_Big+0xc8>
 800676e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8006772:	3b01      	subs	r3, #1
 8006774:	f06f 0201 	mvn.w	r2, #1
 8006778:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 800677c:	1e63      	subs	r3, r4, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8006784:	b942      	cbnz	r2, 8006798 <Sub_Moduli_Big+0xe4>
 8006786:	b16b      	cbz	r3, 80067a4 <Sub_Moduli_Big+0xf0>
 8006788:	3b01      	subs	r3, #1
 800678a:	b29b      	uxth	r3, r3
 800678c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8006790:	2a00      	cmp	r2, #0
 8006792:	d0f8      	beq.n	8006786 <Sub_Moduli_Big+0xd2>
 8006794:	1c5c      	adds	r4, r3, #1
 8006796:	b2a4      	uxth	r4, r4
 8006798:	f8aa 4004 	strh.w	r4, [sl, #4]
 800679c:	2000      	movs	r0, #0
 800679e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80067a2:	4770      	bx	lr
 80067a4:	2401      	movs	r4, #1
 80067a6:	f8aa 4004 	strh.w	r4, [sl, #4]
 80067aa:	2000      	movs	r0, #0
 80067ac:	e7f7      	b.n	800679e <Sub_Moduli_Big+0xea>
 80067ae:	bf00      	nop

080067b0 <SubBig>:
 80067b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	460d      	mov	r5, r1
 80067b8:	ac02      	add	r4, sp, #8
 80067ba:	2100      	movs	r1, #0
 80067bc:	f890 c006 	ldrb.w	ip, [r0, #6]
 80067c0:	f844 1d04 	str.w	r1, [r4, #-4]!
 80067c4:	f895 e006 	ldrb.w	lr, [r5, #6]
 80067c8:	4606      	mov	r6, r0
 80067ca:	4690      	mov	r8, r2
 80067cc:	45f4      	cmp	ip, lr
 80067ce:	bf2c      	ite	cs
 80067d0:	4661      	movcs	r1, ip
 80067d2:	4671      	movcc	r1, lr
 80067d4:	4620      	mov	r0, r4
 80067d6:	461a      	mov	r2, r3
 80067d8:	461f      	mov	r7, r3
 80067da:	f7ff fc53 	bl	8006084 <StAllocBig>
 80067de:	b120      	cbz	r0, 80067ea <SubBig+0x3a>
 80067e0:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80067e4:	b002      	add	sp, #8
 80067e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	809a      	strh	r2, [r3, #4]
 80067f0:	4630      	mov	r0, r6
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7ff fd60 	bl	80062b8 <CompareBig>
 80067f8:	3003      	adds	r0, #3
 80067fa:	2806      	cmp	r0, #6
 80067fc:	d80d      	bhi.n	800681a <SubBig+0x6a>
 80067fe:	e8df f000 	tbb	[pc, r0]
 8006802:	3639      	.short	0x3639
 8006804:	262f3204 	.word	0x262f3204
 8006808:	1d          	.byte	0x1d
 8006809:	00          	.byte	0x00
 800680a:	4628      	mov	r0, r5
 800680c:	4631      	mov	r1, r6
 800680e:	9a01      	ldr	r2, [sp, #4]
 8006810:	f7ff ff50 	bl	80066b4 <Sub_Moduli_Big>
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	71da      	strb	r2, [r3, #7]
 800681a:	4640      	mov	r0, r8
 800681c:	2100      	movs	r1, #0
 800681e:	f7ff fc5d 	bl	80060dc <InitBig>
 8006822:	4641      	mov	r1, r8
 8006824:	9801      	ldr	r0, [sp, #4]
 8006826:	f7ff fc75 	bl	8006114 <CopyBig>
 800682a:	4639      	mov	r1, r7
 800682c:	4605      	mov	r5, r0
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff fc46 	bl	80060c0 <StFreeBig>
 8006834:	4628      	mov	r0, r5
 8006836:	b002      	add	sp, #8
 8006838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800683c:	9a01      	ldr	r2, [sp, #4]
 800683e:	4630      	mov	r0, r6
 8006840:	4629      	mov	r1, r5
 8006842:	f7ff fc9d 	bl	8006180 <Add_Moduli_Big>
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	71da      	strb	r2, [r3, #7]
 800684c:	e7e5      	b.n	800681a <SubBig+0x6a>
 800684e:	4630      	mov	r0, r6
 8006850:	4629      	mov	r1, r5
 8006852:	9a01      	ldr	r2, [sp, #4]
 8006854:	f7ff ff2e 	bl	80066b4 <Sub_Moduli_Big>
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	71da      	strb	r2, [r3, #7]
 800685e:	e7dc      	b.n	800681a <SubBig+0x6a>
 8006860:	4628      	mov	r0, r5
 8006862:	4631      	mov	r1, r6
 8006864:	e7f5      	b.n	8006852 <SubBig+0xa2>
 8006866:	9801      	ldr	r0, [sp, #4]
 8006868:	f7ff fd12 	bl	8006290 <SetZeroBig>
 800686c:	e7d5      	b.n	800681a <SubBig+0x6a>
 800686e:	4630      	mov	r0, r6
 8006870:	4629      	mov	r1, r5
 8006872:	e7cc      	b.n	800680e <SubBig+0x5e>
 8006874:	9a01      	ldr	r2, [sp, #4]
 8006876:	4630      	mov	r0, r6
 8006878:	4629      	mov	r1, r5
 800687a:	f7ff fc81 	bl	8006180 <Add_Moduli_Big>
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	71da      	strb	r2, [r3, #7]
 8006884:	e7c9      	b.n	800681a <SubBig+0x6a>
 8006886:	bf00      	nop

08006888 <MontyInit>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	468b      	mov	fp, r1
 800688e:	7981      	ldrb	r1, [r0, #6]
 8006890:	b083      	sub	sp, #12
 8006892:	f10b 0a04 	add.w	sl, fp, #4
 8006896:	4680      	mov	r8, r0
 8006898:	2300      	movs	r3, #0
 800689a:	3102      	adds	r1, #2
 800689c:	4650      	mov	r0, sl
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	4691      	mov	r9, r2
 80068a2:	f7ff fbef 	bl	8006084 <StAllocBig>
 80068a6:	b128      	cbz	r0, 80068b4 <MontyInit+0x2c>
 80068a8:	f240 37ed 	movw	r7, #1005	; 0x3ed
 80068ac:	4638      	mov	r0, r7
 80068ae:	b003      	add	sp, #12
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	4601      	mov	r1, r0
 80068b6:	f8cb 8000 	str.w	r8, [fp]
 80068ba:	f8db 0004 	ldr.w	r0, [fp, #4]
 80068be:	f7ff fc0d 	bl	80060dc <InitBig>
 80068c2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80068c6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80068ca:	f8d8 2000 	ldr.w	r2, [r8]
 80068ce:	6819      	ldr	r1, [r3, #0]
 80068d0:	3001      	adds	r0, #1
 80068d2:	8098      	strh	r0, [r3, #4]
 80068d4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80068d8:	2401      	movs	r4, #1
 80068da:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	261f      	movs	r6, #31
 80068e2:	2502      	movs	r5, #2
 80068e4:	2703      	movs	r7, #3
 80068e6:	fb02 f304 	mul.w	r3, r2, r4
 80068ea:	403b      	ands	r3, r7
 80068ec:	eb05 0e04 	add.w	lr, r5, r4
 80068f0:	42ab      	cmp	r3, r5
 80068f2:	bf28      	it	cs
 80068f4:	4674      	movcs	r4, lr
 80068f6:	007f      	lsls	r7, r7, #1
 80068f8:	3e01      	subs	r6, #1
 80068fa:	f087 0701 	eor.w	r7, r7, #1
 80068fe:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8006902:	d1f0      	bne.n	80068e6 <MontyInit+0x5e>
 8006904:	4264      	negs	r4, r4
 8006906:	f8cb 4008 	str.w	r4, [fp, #8]
 800690a:	f898 1006 	ldrb.w	r1, [r8, #6]
 800690e:	a801      	add	r0, sp, #4
 8006910:	3101      	adds	r1, #1
 8006912:	464a      	mov	r2, r9
 8006914:	f7ff fbb6 	bl	8006084 <StAllocBig>
 8006918:	b148      	cbz	r0, 800692e <MontyInit+0xa6>
 800691a:	4650      	mov	r0, sl
 800691c:	4649      	mov	r1, r9
 800691e:	f7ff fbcf 	bl	80060c0 <StFreeBig>
 8006922:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8006926:	4638      	mov	r0, r7
 8006928:	b003      	add	sp, #12
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	9901      	ldr	r1, [sp, #4]
 8006930:	4640      	mov	r0, r8
 8006932:	f7ff fbef 	bl	8006114 <CopyBig>
 8006936:	9801      	ldr	r0, [sp, #4]
 8006938:	f7ff fd08 	bl	800634c <CountBits>
 800693c:	4240      	negs	r0, r0
 800693e:	f000 051f 	and.w	r5, r0, #31
 8006942:	4629      	mov	r1, r5
 8006944:	9801      	ldr	r0, [sp, #4]
 8006946:	f7ff fe3b 	bl	80065c0 <LeftShift>
 800694a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800694e:	9901      	ldr	r1, [sp, #4]
 8006950:	4602      	mov	r2, r0
 8006952:	464b      	mov	r3, r9
 8006954:	f7ff ff2c 	bl	80067b0 <SubBig>
 8006958:	4607      	mov	r7, r0
 800695a:	2800      	cmp	r0, #0
 800695c:	d143      	bne.n	80069e6 <MontyInit+0x15e>
 800695e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006962:	b35b      	cbz	r3, 80069bc <MontyInit+0x134>
 8006964:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800696c:	3b01      	subs	r3, #1
 800696e:	6802      	ldr	r2, [r0, #0]
 8006970:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006974:	2101      	movs	r1, #1
 8006976:	f7ff fdf1 	bl	800655c <FastMulInnerBase>
 800697a:	2c00      	cmp	r4, #0
 800697c:	d03e      	beq.n	80069fc <MontyInit+0x174>
 800697e:	9901      	ldr	r1, [sp, #4]
 8006980:	4640      	mov	r0, r8
 8006982:	f7ff fbc7 	bl	8006114 <CopyBig>
 8006986:	4621      	mov	r1, r4
 8006988:	9801      	ldr	r0, [sp, #4]
 800698a:	f7ff fe59 	bl	8006640 <MulBigbyUnInt>
 800698e:	4629      	mov	r1, r5
 8006990:	9801      	ldr	r0, [sp, #4]
 8006992:	f7ff fe15 	bl	80065c0 <LeftShift>
 8006996:	f8db 0004 	ldr.w	r0, [fp, #4]
 800699a:	9901      	ldr	r1, [sp, #4]
 800699c:	4602      	mov	r2, r0
 800699e:	464b      	mov	r3, r9
 80069a0:	f7ff ff06 	bl	80067b0 <SubBig>
 80069a4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80069a8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069b2:	2c00      	cmp	r4, #0
 80069b4:	d1e3      	bne.n	800697e <MontyInit+0xf6>
 80069b6:	3601      	adds	r6, #1
 80069b8:	429e      	cmp	r6, r3
 80069ba:	d3d3      	bcc.n	8006964 <MontyInit+0xdc>
 80069bc:	a801      	add	r0, sp, #4
 80069be:	4649      	mov	r1, r9
 80069c0:	f7ff fb7e 	bl	80060c0 <StFreeBig>
 80069c4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80069c8:	4641      	mov	r1, r8
 80069ca:	f7ff fc75 	bl	80062b8 <CompareBig>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	dd06      	ble.n	80069e0 <MontyInit+0x158>
 80069d2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80069d6:	4641      	mov	r1, r8
 80069d8:	4602      	mov	r2, r0
 80069da:	464b      	mov	r3, r9
 80069dc:	f7ff fee8 	bl	80067b0 <SubBig>
 80069e0:	f8cb 900c 	str.w	r9, [fp, #12]
 80069e4:	e762      	b.n	80068ac <MontyInit+0x24>
 80069e6:	4650      	mov	r0, sl
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7ff fb69 	bl	80060c0 <StFreeBig>
 80069ee:	a801      	add	r0, sp, #4
 80069f0:	4649      	mov	r1, r9
 80069f2:	f7ff fb65 	bl	80060c0 <StFreeBig>
 80069f6:	f240 37ed 	movw	r7, #1005	; 0x3ed
 80069fa:	e757      	b.n	80068ac <MontyInit+0x24>
 80069fc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006a00:	e7d9      	b.n	80069b6 <MontyInit+0x12e>
 8006a02:	bf00      	nop

08006a04 <MontyKillR2>:
 8006a04:	b508      	push	{r3, lr}
 8006a06:	4603      	mov	r3, r0
 8006a08:	3004      	adds	r0, #4
 8006a0a:	68d9      	ldr	r1, [r3, #12]
 8006a0c:	f7ff fb58 	bl	80060c0 <StFreeBig>
 8006a10:	bd08      	pop	{r3, pc}
 8006a12:	bf00      	nop

08006a14 <MontyKillAll>:
 8006a14:	6841      	ldr	r1, [r0, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	b508      	push	{r3, lr}
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6002      	str	r2, [r0, #0]
 8006a1e:	6082      	str	r2, [r0, #8]
 8006a20:	b119      	cbz	r1, 8006a2a <MontyKillAll+0x16>
 8006a22:	3004      	adds	r0, #4
 8006a24:	68d9      	ldr	r1, [r3, #12]
 8006a26:	f7ff fb4b 	bl	80060c0 <StFreeBig>
 8006a2a:	bd08      	pop	{r3, pc}

08006a2c <MontyMul>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	b09f      	sub	sp, #124	; 0x7c
 8006a32:	9312      	str	r3, [sp, #72]	; 0x48
 8006a34:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006a36:	921a      	str	r2, [sp, #104]	; 0x68
 8006a38:	682c      	ldr	r4, [r5, #0]
 8006a3a:	ab1e      	add	r3, sp, #120	; 0x78
 8006a3c:	9315      	str	r3, [sp, #84]	; 0x54
 8006a3e:	68ab      	ldr	r3, [r5, #8]
 8006a40:	88a5      	ldrh	r5, [r4, #4]
 8006a42:	9318      	str	r3, [sp, #96]	; 0x60
 8006a44:	950a      	str	r5, [sp, #40]	; 0x28
 8006a46:	79a3      	ldrb	r3, [r4, #6]
 8006a48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a4a:	6824      	ldr	r4, [r4, #0]
 8006a4c:	9414      	str	r4, [sp, #80]	; 0x50
 8006a4e:	2400      	movs	r4, #0
 8006a50:	f845 4d04 	str.w	r4, [r5, #-4]!
 8006a54:	460c      	mov	r4, r1
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a5a:	9515      	str	r5, [sp, #84]	; 0x54
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a62:	4605      	mov	r5, r0
 8006a64:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006a66:	f7ff fb0d 	bl	8006084 <StAllocBig>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	b120      	cbz	r0, 8006a78 <MontyMul+0x4c>
 8006a6e:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006a72:	b01f      	add	sp, #124	; 0x7c
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	f7ff fb2e 	bl	80060dc <InitBig>
 8006a80:	88a0      	ldrh	r0, [r4, #4]
 8006a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a84:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8006a86:	941b      	str	r4, [sp, #108]	; 0x6c
 8006a88:	4283      	cmp	r3, r0
 8006a8a:	6827      	ldr	r7, [r4, #0]
 8006a8c:	d907      	bls.n	8006a9e <MontyMul+0x72>
 8006a8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006a90:	1a1a      	subs	r2, r3, r0
 8006a92:	4631      	mov	r1, r6
 8006a94:	0092      	lsls	r2, r2, #2
 8006a96:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006a9a:	f000 fcbd 	bl	8007418 <memset>
 8006a9e:	88ab      	ldrh	r3, [r5, #4]
 8006aa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006aa2:	429c      	cmp	r4, r3
 8006aa4:	f240 80c5 	bls.w	8006c32 <MontyMul+0x206>
 8006aa8:	6828      	ldr	r0, [r5, #0]
 8006aaa:	1ae2      	subs	r2, r4, r3
 8006aac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006ab0:	0092      	lsls	r2, r2, #2
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	f000 fcb0 	bl	8007418 <memset>
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006abc:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8006ac0:	00ab      	lsls	r3, r5, #2
 8006ac2:	3801      	subs	r0, #1
 8006ac4:	1f1a      	subs	r2, r3, #4
 8006ac6:	0080      	lsls	r0, r0, #2
 8006ac8:	3904      	subs	r1, #4
 8006aca:	18ba      	adds	r2, r7, r2
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	9007      	str	r0, [sp, #28]
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	9116      	str	r1, [sp, #88]	; 0x58
 8006ad4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ad6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ad8:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ada:	46bc      	mov	ip, r7
 8006adc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ade:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006ae0:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8006ae4:	9106      	str	r1, [sp, #24]
 8006ae6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006ae8:	6821      	ldr	r1, [r4, #0]
 8006aea:	9806      	ldr	r0, [sp, #24]
 8006aec:	f8dc 2000 	ldr.w	r2, [ip]
 8006af0:	682c      	ldr	r4, [r5, #0]
 8006af2:	9316      	str	r3, [sp, #88]	; 0x58
 8006af4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006af6:	2300      	movs	r3, #0
 8006af8:	fbe1 2300 	umlal	r2, r3, r1, r0
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	2100      	movs	r1, #0
 8006b02:	fb02 fe05 	mul.w	lr, r2, r5
 8006b06:	4010      	ands	r0, r2
 8006b08:	4019      	ands	r1, r3
 8006b0a:	fbe4 010e 	umlal	r0, r1, r4, lr
 8006b0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b10:	2c01      	cmp	r4, #1
 8006b12:	d02c      	beq.n	8006b6e <MontyMul+0x142>
 8006b14:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006b16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006b18:	4666      	mov	r6, ip
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	469b      	mov	fp, r3
 8006b1e:	f04f 0900 	mov.w	r9, #0
 8006b22:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8006b26:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006b2a:	9104      	str	r1, [sp, #16]
 8006b2c:	f8cd 9014 	str.w	r9, [sp, #20]
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b36:	eb1b 0a02 	adds.w	sl, fp, r2
 8006b3a:	9a03      	ldr	r2, [sp, #12]
 8006b3c:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006b40:	fbee 0102 	umlal	r0, r1, lr, r2
 8006b44:	e9cd 0100 	strd	r0, r1, [sp]
 8006b48:	9806      	ldr	r0, [sp, #24]
 8006b4a:	9a07      	ldr	r2, [sp, #28]
 8006b4c:	f149 0b00 	adc.w	fp, r9, #0
 8006b50:	fbe0 ab03 	umlal	sl, fp, r0, r3
 8006b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b58:	eb10 000a 	adds.w	r0, r0, sl
 8006b5c:	f84c 0004 	str.w	r0, [ip, r4]
 8006b60:	f104 0404 	add.w	r4, r4, #4
 8006b64:	f141 0100 	adc.w	r1, r1, #0
 8006b68:	4294      	cmp	r4, r2
 8006b6a:	d1d8      	bne.n	8006b1e <MontyMul+0xf2>
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	2500      	movs	r5, #0
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	9509      	str	r5, [sp, #36]	; 0x24
 8006b74:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006b76:	910c      	str	r1, [sp, #48]	; 0x30
 8006b78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	950d      	str	r5, [sp, #52]	; 0x34
 8006b80:	18c0      	adds	r0, r0, r3
 8006b82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b86:	f141 0100 	adc.w	r1, r1, #0
 8006b8a:	9110      	str	r1, [sp, #64]	; 0x40
 8006b8c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006b8e:	950f      	str	r5, [sp, #60]	; 0x3c
 8006b90:	1812      	adds	r2, r2, r0
 8006b92:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b94:	600a      	str	r2, [r1, #0]
 8006b96:	f143 0300 	adc.w	r3, r3, #0
 8006b9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8006b9e:	9511      	str	r5, [sp, #68]	; 0x44
 8006ba0:	4403      	add	r3, r0
 8006ba2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba8:	3501      	adds	r5, #1
 8006baa:	42ab      	cmp	r3, r5
 8006bac:	950b      	str	r5, [sp, #44]	; 0x2c
 8006bae:	d895      	bhi.n	8006adc <MontyMul+0xb0>
 8006bb0:	4667      	mov	r7, ip
 8006bb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006bb4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8006bb6:	1c6b      	adds	r3, r5, #1
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	80a3      	strh	r3, [r4, #4]
 8006bbe:	d915      	bls.n	8006bec <MontyMul+0x1c0>
 8006bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006bca:	b97b      	cbnz	r3, 8006bec <MontyMul+0x1c0>
 8006bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bce:	e005      	b.n	8006bdc <MontyMul+0x1b0>
 8006bd0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006bd4:	1e59      	subs	r1, r3, #1
 8006bd6:	b289      	uxth	r1, r1
 8006bd8:	bb12      	cbnz	r2, 8006c20 <MontyMul+0x1f4>
 8006bda:	460b      	mov	r3, r1
 8006bdc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006be6:	d1f3      	bne.n	8006bd0 <MontyMul+0x1a4>
 8006be8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006bea:	80ab      	strh	r3, [r5, #4]
 8006bec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006bee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006bf0:	6821      	ldr	r1, [r4, #0]
 8006bf2:	f7ff fb61 	bl	80062b8 <CompareBig>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	db15      	blt.n	8006c26 <MontyMul+0x1fa>
 8006bfa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006bfc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006bfe:	6829      	ldr	r1, [r5, #0]
 8006c00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c02:	f7ff fd57 	bl	80066b4 <Sub_Moduli_Big>
 8006c06:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	71eb      	strb	r3, [r5, #7]
 8006c0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c10:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006c12:	68d9      	ldr	r1, [r3, #12]
 8006c14:	f7ff fa54 	bl	80060c0 <StFreeBig>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	b01f      	add	sp, #124	; 0x7c
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8006c22:	80a3      	strh	r3, [r4, #4]
 8006c24:	e7e2      	b.n	8006bec <MontyMul+0x1c0>
 8006c26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006c2a:	f7ff fa73 	bl	8006114 <CopyBig>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	e7ed      	b.n	8006c0e <MontyMul+0x1e2>
 8006c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0bc      	beq.n	8006bb2 <MontyMul+0x186>
 8006c38:	e73e      	b.n	8006ab8 <MontyMul+0x8c>
 8006c3a:	bf00      	nop

08006c3c <MontyExit>:
 8006c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	ac02      	add	r4, sp, #8
 8006c42:	2300      	movs	r3, #0
 8006c44:	4606      	mov	r6, r0
 8006c46:	f844 3d04 	str.w	r3, [r4, #-4]!
 8006c4a:	4615      	mov	r5, r2
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	4620      	mov	r0, r4
 8006c50:	79b1      	ldrb	r1, [r6, #6]
 8006c52:	68d2      	ldr	r2, [r2, #12]
 8006c54:	f7ff fa16 	bl	8006084 <StAllocBig>
 8006c58:	b118      	cbz	r0, 8006c62 <MontyExit+0x26>
 8006c5a:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006c5e:	b003      	add	sp, #12
 8006c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c62:	9801      	ldr	r0, [sp, #4]
 8006c64:	2101      	movs	r1, #1
 8006c66:	f7ff fa39 	bl	80060dc <InitBig>
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	9901      	ldr	r1, [sp, #4]
 8006c6e:	462b      	mov	r3, r5
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fedb 	bl	8006a2c <MontyMul>
 8006c76:	68e9      	ldr	r1, [r5, #12]
 8006c78:	4606      	mov	r6, r0
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff fa20 	bl	80060c0 <StFreeBig>
 8006c80:	4630      	mov	r0, r6
 8006c82:	b003      	add	sp, #12
 8006c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c86:	bf00      	nop

08006c88 <ModularExpSlidWin>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	8889      	ldrh	r1, [r1, #4]
 8006c90:	b091      	sub	sp, #68	; 0x44
 8006c92:	2901      	cmp	r1, #1
 8006c94:	4681      	mov	r9, r0
 8006c96:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006c98:	4616      	mov	r6, r2
 8006c9a:	469a      	mov	sl, r3
 8006c9c:	f240 80d0 	bls.w	8006e40 <ModularExpSlidWin+0x1b8>
 8006ca0:	f06f 0108 	mvn.w	r1, #8
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	9106      	str	r1, [sp, #24]
 8006ca8:	2210      	movs	r2, #16
 8006caa:	2104      	movs	r1, #4
 8006cac:	469c      	mov	ip, r3
 8006cae:	9205      	str	r2, [sp, #20]
 8006cb0:	f04f 0820 	mov.w	r8, #32
 8006cb4:	f04f 0b03 	mov.w	fp, #3
 8006cb8:	9104      	str	r1, [sp, #16]
 8006cba:	79b2      	ldrb	r2, [r6, #6]
 8006cbc:	88e5      	ldrh	r5, [r4, #6]
 8006cbe:	00d1      	lsls	r1, r2, #3
 8006cc0:	0092      	lsls	r2, r2, #2
 8006cc2:	311c      	adds	r1, #28
 8006cc4:	3211      	adds	r2, #17
 8006cc6:	fb02 1303 	mla	r3, r2, r3, r1
 8006cca:	88a1      	ldrh	r1, [r4, #4]
 8006ccc:	442b      	add	r3, r5
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	da05      	bge.n	8006cde <ModularExpSlidWin+0x56>
 8006cd2:	f240 35ed 	movw	r5, #1005	; 0x3ed
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	b011      	add	sp, #68	; 0x44
 8006cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	9203      	str	r2, [sp, #12]
 8006ce2:	eb08 0305 	add.w	r3, r8, r5
 8006ce6:	80e3      	strh	r3, [r4, #6]
 8006ce8:	1953      	adds	r3, r2, r5
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	d0f1      	beq.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006cee:	a90c      	add	r1, sp, #48	; 0x30
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	f8cd c004 	str.w	ip, [sp, #4]
 8006cf8:	f7ff fdc6 	bl	8006888 <MontyInit>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d1e8      	bne.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006d00:	ab0c      	add	r3, sp, #48	; 0x30
 8006d02:	4648      	mov	r0, r9
 8006d04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d06:	464a      	mov	r2, r9
 8006d08:	f7ff fe90 	bl	8006a2c <MontyMul>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1df      	bne.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006d12:	a80c      	add	r0, sp, #48	; 0x30
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	f7ff fe75 	bl	8006a04 <MontyKillR2>
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	9308      	str	r3, [sp, #32]
 8006d1e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006d22:	9b07      	ldr	r3, [sp, #28]
 8006d24:	970b      	str	r7, [sp, #44]	; 0x2c
 8006d26:	9f08      	ldr	r7, [sp, #32]
 8006d28:	9509      	str	r5, [sp, #36]	; 0x24
 8006d2a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006d2e:	4665      	mov	r5, ip
 8006d30:	4698      	mov	r8, r3
 8006d32:	4640      	mov	r0, r8
 8006d34:	79b1      	ldrb	r1, [r6, #6]
 8006d36:	4622      	mov	r2, r4
 8006d38:	3701      	adds	r7, #1
 8006d3a:	f108 0804 	add.w	r8, r8, #4
 8006d3e:	f7ff f9a1 	bl	8006084 <StAllocBig>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d1c5      	bne.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006d46:	42af      	cmp	r7, r5
 8006d48:	dbf3      	blt.n	8006d32 <ModularExpSlidWin+0xaa>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	46ac      	mov	ip, r5
 8006d4e:	4611      	mov	r1, r2
 8006d50:	4650      	mov	r0, sl
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	f8cd c004 	str.w	ip, [sp, #4]
 8006d58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d5a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006d5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006d60:	f7ff f9bc 	bl	80060dc <InitBig>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	4648      	mov	r0, r9
 8006d68:	5959      	ldr	r1, [r3, r5]
 8006d6a:	f7ff f9d3 	bl	8006114 <CopyBig>
 8006d6e:	9a02      	ldr	r2, [sp, #8]
 8006d70:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006d74:	f1bb 0f00 	cmp.w	fp, #0
 8006d78:	d013      	beq.n	8006da2 <ModularExpSlidWin+0x11a>
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	9e07      	ldr	r6, [sp, #28]
 8006d7e:	f8cd c00c 	str.w	ip, [sp, #12]
 8006d82:	4614      	mov	r4, r2
 8006d84:	461d      	mov	r5, r3
 8006d86:	6830      	ldr	r0, [r6, #0]
 8006d88:	ab0c      	add	r3, sp, #48	; 0x30
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	3401      	adds	r4, #1
 8006d90:	f7ff fe4c 	bl	8006a2c <MontyMul>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d19c      	bne.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006d98:	455c      	cmp	r4, fp
 8006d9a:	d1f4      	bne.n	8006d86 <ModularExpSlidWin+0xfe>
 8006d9c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006da0:	462c      	mov	r4, r5
 8006da2:	f1bc 0f01 	cmp.w	ip, #1
 8006da6:	d010      	beq.n	8006dca <ModularExpSlidWin+0x142>
 8006da8:	9907      	ldr	r1, [sp, #28]
 8006daa:	2601      	movs	r6, #1
 8006dac:	1f0d      	subs	r5, r1, #4
 8006dae:	46e3      	mov	fp, ip
 8006db0:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8006db4:	4649      	mov	r1, r9
 8006db6:	686a      	ldr	r2, [r5, #4]
 8006db8:	ab0c      	add	r3, sp, #48	; 0x30
 8006dba:	3601      	adds	r6, #1
 8006dbc:	f7ff fe36 	bl	8006a2c <MontyMul>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d186      	bne.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006dc4:	455e      	cmp	r6, fp
 8006dc6:	d1f3      	bne.n	8006db0 <ModularExpSlidWin+0x128>
 8006dc8:	46dc      	mov	ip, fp
 8006dca:	88bb      	ldrh	r3, [r7, #4]
 8006dcc:	f8cd c004 	str.w	ip, [sp, #4]
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4648      	mov	r0, r9
 8006dd6:	4651      	mov	r1, sl
 8006dd8:	9603      	str	r6, [sp, #12]
 8006dda:	9308      	str	r3, [sp, #32]
 8006ddc:	f7ff f99a 	bl	8006114 <CopyBig>
 8006de0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006de4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006de8:	4635      	mov	r5, r6
 8006dea:	46b4      	mov	ip, r6
 8006dec:	940a      	str	r4, [sp, #40]	; 0x28
 8006dee:	4634      	mov	r4, r6
 8006df0:	9e04      	ldr	r6, [sp, #16]
 8006df2:	f04f 0b01 	mov.w	fp, #1
 8006df6:	f1bb 0b01 	subs.w	fp, fp, #1
 8006dfa:	d109      	bne.n	8006e10 <ModularExpSlidWin+0x188>
 8006dfc:	9a08      	ldr	r2, [sp, #32]
 8006dfe:	1c53      	adds	r3, r2, #1
 8006e00:	d05f      	beq.n	8006ec2 <ModularExpSlidWin+0x23a>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8006e08:	3a01      	subs	r2, #1
 8006e0a:	f04f 0b20 	mov.w	fp, #32
 8006e0e:	9208      	str	r2, [sp, #32]
 8006e10:	0fe3      	lsrs	r3, r4, #31
 8006e12:	0064      	lsls	r4, r4, #1
 8006e14:	f1bc 0f00 	cmp.w	ip, #0
 8006e18:	d01f      	beq.n	8006e5a <ModularExpSlidWin+0x1d2>
 8006e1a:	f1bc 0f01 	cmp.w	ip, #1
 8006e1e:	d101      	bne.n	8006e24 <ModularExpSlidWin+0x19c>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d040      	beq.n	8006ea6 <ModularExpSlidWin+0x21e>
 8006e24:	3501      	adds	r5, #1
 8006e26:	9903      	ldr	r1, [sp, #12]
 8006e28:	1b72      	subs	r2, r6, r5
 8006e2a:	4093      	lsls	r3, r2
 8006e2c:	4319      	orrs	r1, r3
 8006e2e:	42b5      	cmp	r5, r6
 8006e30:	9103      	str	r1, [sp, #12]
 8006e32:	d019      	beq.n	8006e68 <ModularExpSlidWin+0x1e0>
 8006e34:	f1bb 0b01 	subs.w	fp, fp, #1
 8006e38:	f04f 0c02 	mov.w	ip, #2
 8006e3c:	d1e8      	bne.n	8006e10 <ModularExpSlidWin+0x188>
 8006e3e:	e7dd      	b.n	8006dfc <ModularExpSlidWin+0x174>
 8006e40:	2301      	movs	r3, #1
 8006e42:	f06f 0101 	mvn.w	r1, #1
 8006e46:	2202      	movs	r2, #2
 8006e48:	469c      	mov	ip, r3
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	9106      	str	r1, [sp, #24]
 8006e4e:	9205      	str	r2, [sp, #20]
 8006e50:	f04f 0804 	mov.w	r8, #4
 8006e54:	f04f 0b00 	mov.w	fp, #0
 8006e58:	e72f      	b.n	8006cba <ModularExpSlidWin+0x32>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0cb      	beq.n	8006df6 <ModularExpSlidWin+0x16e>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0e0      	beq.n	8006e24 <ModularExpSlidWin+0x19c>
 8006e62:	f04f 0c01 	mov.w	ip, #1
 8006e66:	e7c6      	b.n	8006df6 <ModularExpSlidWin+0x16e>
 8006e68:	2500      	movs	r5, #0
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	4652      	mov	r2, sl
 8006e70:	ab0c      	add	r3, sp, #48	; 0x30
 8006e72:	3501      	adds	r5, #1
 8006e74:	f7ff fdda 	bl	8006a2c <MontyMul>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f47f af2a 	bne.w	8006cd2 <ModularExpSlidWin+0x4a>
 8006e7e:	42ae      	cmp	r6, r5
 8006e80:	dcf3      	bgt.n	8006e6a <ModularExpSlidWin+0x1e2>
 8006e82:	9a03      	ldr	r2, [sp, #12]
 8006e84:	9906      	ldr	r1, [sp, #24]
 8006e86:	ea02 0301 	and.w	r3, r2, r1
 8006e8a:	9a07      	ldr	r2, [sp, #28]
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e92:	4652      	mov	r2, sl
 8006e94:	ab0c      	add	r3, sp, #48	; 0x30
 8006e96:	f7ff fdc9 	bl	8006a2c <MontyMul>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f47f af19 	bne.w	8006cd2 <ModularExpSlidWin+0x4a>
 8006ea0:	9003      	str	r0, [sp, #12]
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	e7dd      	b.n	8006e62 <ModularExpSlidWin+0x1da>
 8006ea6:	4650      	mov	r0, sl
 8006ea8:	4651      	mov	r1, sl
 8006eaa:	4652      	mov	r2, sl
 8006eac:	ab0c      	add	r3, sp, #48	; 0x30
 8006eae:	f8cd c004 	str.w	ip, [sp, #4]
 8006eb2:	f7ff fdbb 	bl	8006a2c <MontyMul>
 8006eb6:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f47f af09 	bne.w	8006cd2 <ModularExpSlidWin+0x4a>
 8006ec0:	e799      	b.n	8006df6 <ModularExpSlidWin+0x16e>
 8006ec2:	4663      	mov	r3, ip
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8006eca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ecc:	d11f      	bne.n	8006f0e <ModularExpSlidWin+0x286>
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	dd1d      	ble.n	8006f0e <ModularExpSlidWin+0x286>
 8006ed2:	9e03      	ldr	r6, [sp, #12]
 8006ed4:	4667      	mov	r7, ip
 8006ed6:	e001      	b.n	8006edc <ModularExpSlidWin+0x254>
 8006ed8:	45ab      	cmp	fp, r5
 8006eda:	d017      	beq.n	8006f0c <ModularExpSlidWin+0x284>
 8006edc:	4650      	mov	r0, sl
 8006ede:	4651      	mov	r1, sl
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ee4:	0076      	lsls	r6, r6, #1
 8006ee6:	f10b 0b01 	add.w	fp, fp, #1
 8006eea:	f7ff fd9f 	bl	8006a2c <MontyMul>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f47f aeef 	bne.w	8006cd2 <ModularExpSlidWin+0x4a>
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	4233      	tst	r3, r6
 8006ef8:	d0ee      	beq.n	8006ed8 <ModularExpSlidWin+0x250>
 8006efa:	4650      	mov	r0, sl
 8006efc:	4649      	mov	r1, r9
 8006efe:	4652      	mov	r2, sl
 8006f00:	ab0c      	add	r3, sp, #48	; 0x30
 8006f02:	f7ff fd93 	bl	8006a2c <MontyMul>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0e6      	beq.n	8006ed8 <ModularExpSlidWin+0x250>
 8006f0a:	e6e2      	b.n	8006cd2 <ModularExpSlidWin+0x4a>
 8006f0c:	46bc      	mov	ip, r7
 8006f0e:	4650      	mov	r0, sl
 8006f10:	4651      	mov	r1, sl
 8006f12:	aa0c      	add	r2, sp, #48	; 0x30
 8006f14:	f8cd c004 	str.w	ip, [sp, #4]
 8006f18:	f7ff fe90 	bl	8006c3c <MontyExit>
 8006f1c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006f20:	4605      	mov	r5, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f47f aed5 	bne.w	8006cd2 <ModularExpSlidWin+0x4a>
 8006f28:	a80c      	add	r0, sp, #48	; 0x30
 8006f2a:	f8cd c004 	str.w	ip, [sp, #4]
 8006f2e:	f7ff fd71 	bl	8006a14 <MontyKillAll>
 8006f32:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006f36:	462e      	mov	r6, r5
 8006f38:	4667      	mov	r7, ip
 8006f3a:	9907      	ldr	r1, [sp, #28]
 8006f3c:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8006f40:	4621      	mov	r1, r4
 8006f42:	3601      	adds	r6, #1
 8006f44:	f7ff f8bc 	bl	80060c0 <StFreeBig>
 8006f48:	42be      	cmp	r6, r7
 8006f4a:	dbf6      	blt.n	8006f3a <ModularExpSlidWin+0x2b2>
 8006f4c:	88e3      	ldrh	r3, [r4, #6]
 8006f4e:	ebc8 0803 	rsb	r8, r8, r3
 8006f52:	f8a4 8006 	strh.w	r8, [r4, #6]
 8006f56:	e6be      	b.n	8006cd6 <ModularExpSlidWin+0x4e>

08006f58 <RSAVP1>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	b089      	sub	sp, #36	; 0x24
 8006f5e:	2400      	movs	r4, #0
 8006f60:	469a      	mov	sl, r3
 8006f62:	460d      	mov	r5, r1
 8006f64:	4690      	mov	r8, r2
 8006f66:	6886      	ldr	r6, [r0, #8]
 8006f68:	68c3      	ldr	r3, [r0, #12]
 8006f6a:	9404      	str	r4, [sp, #16]
 8006f6c:	e890 0880 	ldmia.w	r0, {r7, fp}
 8006f70:	9405      	str	r4, [sp, #20]
 8006f72:	9406      	str	r4, [sp, #24]
 8006f74:	9407      	str	r4, [sp, #28]
 8006f76:	b141      	cbz	r1, 8006f8a <RSAVP1+0x32>
 8006f78:	b13e      	cbz	r6, 8006f8a <RSAVP1+0x32>
 8006f7a:	b137      	cbz	r7, 8006f8a <RSAVP1+0x32>
 8006f7c:	b12a      	cbz	r2, 8006f8a <RSAVP1+0x32>
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	dd03      	ble.n	8006f8a <RSAVP1+0x32>
 8006f82:	45a3      	cmp	fp, r4
 8006f84:	dd01      	ble.n	8006f8a <RSAVP1+0x32>
 8006f86:	455b      	cmp	r3, fp
 8006f88:	dd05      	ble.n	8006f96 <RSAVP1+0x3e>
 8006f8a:	f241 34ef 	movw	r4, #5103	; 0x13ef
 8006f8e:	4620      	mov	r0, r4
 8006f90:	b009      	add	sp, #36	; 0x24
 8006f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f96:	f10b 0203 	add.w	r2, fp, #3
 8006f9a:	ea4f 0992 	mov.w	r9, r2, lsr #2
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	a804      	add	r0, sp, #16
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	f7ff f86d 	bl	8006084 <StAllocBig>
 8006faa:	4604      	mov	r4, r0
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d1ee      	bne.n	8006f8e <RSAVP1+0x36>
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	a806      	add	r0, sp, #24
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	f7ff f865 	bl	8006084 <StAllocBig>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	b120      	cbz	r0, 8006fc8 <RSAVP1+0x70>
 8006fbe:	a804      	add	r0, sp, #16
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	f7ff f87d 	bl	80060c0 <StFreeBig>
 8006fc6:	e7e2      	b.n	8006f8e <RSAVP1+0x36>
 8006fc8:	4659      	mov	r1, fp
 8006fca:	9a06      	ldr	r2, [sp, #24]
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f7ff fa03 	bl	80063d8 <W8_to_Big>
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	9a04      	ldr	r2, [sp, #16]
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f7ff f9fe 	bl	80063d8 <W8_to_Big>
 8006fdc:	9804      	ldr	r0, [sp, #16]
 8006fde:	9906      	ldr	r1, [sp, #24]
 8006fe0:	f7ff f96a 	bl	80062b8 <CompareBig>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	db06      	blt.n	8006ff8 <RSAVP1+0xa0>
 8006fea:	f241 34f2 	movw	r4, #5106	; 0x13f2
 8006fee:	a806      	add	r0, sp, #24
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	f7ff f865 	bl	80060c0 <StFreeBig>
 8006ff6:	e7e2      	b.n	8006fbe <RSAVP1+0x66>
 8006ff8:	1cd9      	adds	r1, r3, #3
 8006ffa:	a807      	add	r0, sp, #28
 8006ffc:	0889      	lsrs	r1, r1, #2
 8006ffe:	4652      	mov	r2, sl
 8007000:	f7ff f840 	bl	8006084 <StAllocBig>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	4604      	mov	r4, r0
 8007008:	2800      	cmp	r0, #0
 800700a:	d1f0      	bne.n	8006fee <RSAVP1+0x96>
 800700c:	4619      	mov	r1, r3
 800700e:	9a07      	ldr	r2, [sp, #28]
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff f9e1 	bl	80063d8 <W8_to_Big>
 8007016:	9b06      	ldr	r3, [sp, #24]
 8007018:	a805      	add	r0, sp, #20
 800701a:	7999      	ldrb	r1, [r3, #6]
 800701c:	4652      	mov	r2, sl
 800701e:	f7ff f831 	bl	8006084 <StAllocBig>
 8007022:	4604      	mov	r4, r0
 8007024:	b120      	cbz	r0, 8007030 <RSAVP1+0xd8>
 8007026:	a807      	add	r0, sp, #28
 8007028:	4651      	mov	r1, sl
 800702a:	f7ff f849 	bl	80060c0 <StFreeBig>
 800702e:	e7de      	b.n	8006fee <RSAVP1+0x96>
 8007030:	f8cd a000 	str.w	sl, [sp]
 8007034:	9804      	ldr	r0, [sp, #16]
 8007036:	9907      	ldr	r1, [sp, #28]
 8007038:	9a06      	ldr	r2, [sp, #24]
 800703a:	9b05      	ldr	r3, [sp, #20]
 800703c:	f7ff fe24 	bl	8006c88 <ModularExpSlidWin>
 8007040:	4604      	mov	r4, r0
 8007042:	b9b8      	cbnz	r0, 8007074 <RSAVP1+0x11c>
 8007044:	4605      	mov	r5, r0
 8007046:	4606      	mov	r6, r0
 8007048:	e002      	b.n	8007050 <RSAVP1+0xf8>
 800704a:	f808 6005 	strb.w	r6, [r8, r5]
 800704e:	3501      	adds	r5, #1
 8007050:	9805      	ldr	r0, [sp, #20]
 8007052:	f7ff f99f 	bl	8006394 <CountBytes>
 8007056:	ebc0 000b 	rsb	r0, r0, fp
 800705a:	4285      	cmp	r5, r0
 800705c:	dbf5      	blt.n	800704a <RSAVP1+0xf2>
 800705e:	9d05      	ldr	r5, [sp, #20]
 8007060:	4628      	mov	r0, r5
 8007062:	f7ff f997 	bl	8006394 <CountBytes>
 8007066:	ebc0 010b 	rsb	r1, r0, fp
 800706a:	4441      	add	r1, r8
 800706c:	4628      	mov	r0, r5
 800706e:	2200      	movs	r2, #0
 8007070:	f7ff fa34 	bl	80064dc <Big_to_W8>
 8007074:	a805      	add	r0, sp, #20
 8007076:	4651      	mov	r1, sl
 8007078:	f7ff f822 	bl	80060c0 <StFreeBig>
 800707c:	e7d3      	b.n	8007026 <RSAVP1+0xce>
 800707e:	bf00      	nop

08007080 <RSA_PKCS1v15_Encrypt>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	b08b      	sub	sp, #44	; 0x2c
 8007086:	4606      	mov	r6, r0
 8007088:	2000      	movs	r0, #0
 800708a:	460c      	mov	r4, r1
 800708c:	4617      	mov	r7, r2
 800708e:	4698      	mov	r8, r3
 8007090:	9009      	str	r0, [sp, #36]	; 0x24
 8007092:	b18e      	cbz	r6, 80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 8007094:	b181      	cbz	r1, 80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 8007096:	b17a      	cbz	r2, 80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 8007098:	b173      	cbz	r3, 80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 800709a:	680b      	ldr	r3, [r1, #0]
 800709c:	b163      	cbz	r3, 80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 800709e:	688b      	ldr	r3, [r1, #8]
 80070a0:	b153      	cbz	r3, 80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 80070a2:	684b      	ldr	r3, [r1, #4]
 80070a4:	4283      	cmp	r3, r0
 80070a6:	dd07      	ble.n	80070b8 <RSA_PKCS1v15_Encrypt+0x38>
 80070a8:	6872      	ldr	r2, [r6, #4]
 80070aa:	f1a2 010a 	sub.w	r1, r2, #10
 80070ae:	428b      	cmp	r3, r1
 80070b0:	db07      	blt.n	80070c2 <RSA_PKCS1v15_Encrypt+0x42>
 80070b2:	f241 30f2 	movw	r0, #5106	; 0x13f2
 80070b6:	e001      	b.n	80070bc <RSA_PKCS1v15_Encrypt+0x3c>
 80070b8:	f241 30f0 	movw	r0, #5104	; 0x13f0
 80070bc:	b00b      	add	sp, #44	; 0x2c
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80070c6:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 80070ca:	1855      	adds	r5, r2, r1
 80070cc:	45ac      	cmp	ip, r5
 80070ce:	da02      	bge.n	80070d6 <RSA_PKCS1v15_Encrypt+0x56>
 80070d0:	f241 30ee 	movw	r0, #5102	; 0x13ee
 80070d4:	e7f2      	b.n	80070bc <RSA_PKCS1v15_Encrypt+0x3c>
 80070d6:	f8d8 c000 	ldr.w	ip, [r8]
 80070da:	f8a8 5006 	strh.w	r5, [r8, #6]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	eb0c 0b01 	add.w	fp, ip, r1
 80070e4:	f1a2 0a03 	sub.w	sl, r2, #3
 80070e8:	2302      	movs	r3, #2
 80070ea:	4582      	cmp	sl, r0
 80070ec:	f80c 0001 	strb.w	r0, [ip, r1]
 80070f0:	9206      	str	r2, [sp, #24]
 80070f2:	f88b 3001 	strb.w	r3, [fp, #1]
 80070f6:	dd58      	ble.n	80071aa <RSA_PKCS1v15_Encrypt+0x12a>
 80070f8:	2500      	movs	r5, #0
 80070fa:	9604      	str	r6, [sp, #16]
 80070fc:	9407      	str	r4, [sp, #28]
 80070fe:	f8cd 8014 	str.w	r8, [sp, #20]
 8007102:	1cab      	adds	r3, r5, #2
 8007104:	eb1b 0303 	adds.w	r3, fp, r3
 8007108:	ebc5 080a 	rsb	r8, r5, sl
 800710c:	9303      	str	r3, [sp, #12]
 800710e:	d073      	beq.n	80071f8 <RSA_PKCS1v15_Encrypt+0x178>
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	b95b      	cbnz	r3, 800712c <RSA_PKCS1v15_Encrypt+0xac>
 8007114:	9e04      	ldr	r6, [sp, #16]
 8007116:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800711a:	f241 30ee 	movw	r0, #5102	; 0x13ee
 800711e:	6873      	ldr	r3, [r6, #4]
 8007120:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f8a8 3006 	strh.w	r3, [r8, #6]
 800712a:	e7c7      	b.n	80070bc <RSA_PKCS1v15_Encrypt+0x3c>
 800712c:	ea5f 4918 	movs.w	r9, r8, lsr #16
 8007130:	bf08      	it	eq
 8007132:	4649      	moveq	r1, r9
 8007134:	d014      	beq.n	8007160 <RSA_PKCS1v15_Encrypt+0xe0>
 8007136:	9c03      	ldr	r4, [sp, #12]
 8007138:	2600      	movs	r6, #0
 800713a:	2200      	movs	r2, #0
 800713c:	4621      	mov	r1, r4
 800713e:	4613      	mov	r3, r2
 8007140:	4638      	mov	r0, r7
 8007142:	f7fe fcdd 	bl	8005b00 <crl_DRBG_AES128_Generate.part.25.constprop.36>
 8007146:	3601      	adds	r6, #1
 8007148:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800714c:	2800      	cmp	r0, #0
 800714e:	d1e1      	bne.n	8007114 <RSA_PKCS1v15_Encrypt+0x94>
 8007150:	454e      	cmp	r6, r9
 8007152:	d1f2      	bne.n	800713a <RSA_PKCS1v15_Encrypt+0xba>
 8007154:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8007158:	ebc9 0901 	rsb	r9, r9, r1
 800715c:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8007160:	eb08 0309 	add.w	r3, r8, r9
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007168:	dcd4      	bgt.n	8007114 <RSA_PKCS1v15_Encrypt+0x94>
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	4419      	add	r1, r3
 8007172:	4638      	mov	r0, r7
 8007174:	4613      	mov	r3, r2
 8007176:	f7fe fde7 	bl	8005d48 <crl_DRBG_AES128_Generate.part.25>
 800717a:	2800      	cmp	r0, #0
 800717c:	d1ca      	bne.n	8007114 <RSA_PKCS1v15_Encrypt+0x94>
 800717e:	462b      	mov	r3, r5
 8007180:	eb0b 0203 	add.w	r2, fp, r3
 8007184:	7892      	ldrb	r2, [r2, #2]
 8007186:	b13a      	cbz	r2, 8007198 <RSA_PKCS1v15_Encrypt+0x118>
 8007188:	429d      	cmp	r5, r3
 800718a:	bf18      	it	ne
 800718c:	eb0b 0105 	addne.w	r1, fp, r5
 8007190:	f105 0501 	add.w	r5, r5, #1
 8007194:	bf18      	it	ne
 8007196:	708a      	strbne	r2, [r1, #2]
 8007198:	3301      	adds	r3, #1
 800719a:	459a      	cmp	sl, r3
 800719c:	dcf0      	bgt.n	8007180 <RSA_PKCS1v15_Encrypt+0x100>
 800719e:	45aa      	cmp	sl, r5
 80071a0:	dcaf      	bgt.n	8007102 <RSA_PKCS1v15_Encrypt+0x82>
 80071a2:	9e04      	ldr	r6, [sp, #16]
 80071a4:	9c07      	ldr	r4, [sp, #28]
 80071a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80071aa:	9906      	ldr	r1, [sp, #24]
 80071ac:	4a24      	ldr	r2, [pc, #144]	; (8007240 <RSA_PKCS1v15_Encrypt+0x1c0>)
 80071ae:	4825      	ldr	r0, [pc, #148]	; (8007244 <RSA_PKCS1v15_Encrypt+0x1c4>)
 80071b0:	4459      	add	r1, fp
 80071b2:	2300      	movs	r3, #0
 80071b4:	2501      	movs	r5, #1
 80071b6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80071ba:	6015      	str	r5, [r2, #0]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	9209      	str	r2, [sp, #36]	; 0x24
 80071c0:	6802      	ldr	r2, [r0, #0]
 80071c2:	9209      	str	r2, [sp, #36]	; 0x24
 80071c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c6:	3201      	adds	r2, #1
 80071c8:	d01a      	beq.n	8007200 <RSA_PKCS1v15_Encrypt+0x180>
 80071ca:	6862      	ldr	r2, [r4, #4]
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	dd0a      	ble.n	80071e6 <RSA_PKCS1v15_Encrypt+0x166>
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	5cd2      	ldrb	r2, [r2, r3]
 80071d4:	3204      	adds	r2, #4
 80071d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80071da:	0052      	lsls	r2, r2, #1
 80071dc:	54ca      	strb	r2, [r1, r3]
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	3301      	adds	r3, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	dcf4      	bgt.n	80071d0 <RSA_PKCS1v15_Encrypt+0x150>
 80071e6:	4659      	mov	r1, fp
 80071e8:	68a2      	ldr	r2, [r4, #8]
 80071ea:	4630      	mov	r0, r6
 80071ec:	4643      	mov	r3, r8
 80071ee:	f7ff feb3 	bl	8006f58 <RSAVP1>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d191      	bne.n	800711a <RSA_PKCS1v15_Encrypt+0x9a>
 80071f6:	e792      	b.n	800711e <RSA_PKCS1v15_Encrypt+0x9e>
 80071f8:	f1b8 0f00 	cmp.w	r8, #0
 80071fc:	dc8a      	bgt.n	8007114 <RSA_PKCS1v15_Encrypt+0x94>
 80071fe:	e787      	b.n	8007110 <RSA_PKCS1v15_Encrypt+0x90>
 8007200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007202:	6002      	str	r2, [r0, #0]
 8007204:	6802      	ldr	r2, [r0, #0]
 8007206:	9209      	str	r2, [sp, #36]	; 0x24
 8007208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800720a:	b16a      	cbz	r2, 8007228 <RSA_PKCS1v15_Encrypt+0x1a8>
 800720c:	6862      	ldr	r2, [r4, #4]
 800720e:	2a00      	cmp	r2, #0
 8007210:	dde9      	ble.n	80071e6 <RSA_PKCS1v15_Encrypt+0x166>
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	5cd2      	ldrb	r2, [r2, r3]
 8007216:	3207      	adds	r2, #7
 8007218:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800721c:	54ca      	strb	r2, [r1, r3]
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	3301      	adds	r3, #1
 8007222:	429a      	cmp	r2, r3
 8007224:	dcf5      	bgt.n	8007212 <RSA_PKCS1v15_Encrypt+0x192>
 8007226:	e7de      	b.n	80071e6 <RSA_PKCS1v15_Encrypt+0x166>
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	dddb      	ble.n	80071e6 <RSA_PKCS1v15_Encrypt+0x166>
 800722e:	4613      	mov	r3, r2
 8007230:	6822      	ldr	r2, [r4, #0]
 8007232:	5cd2      	ldrb	r2, [r2, r3]
 8007234:	54ca      	strb	r2, [r1, r3]
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	3301      	adds	r3, #1
 800723a:	429a      	cmp	r2, r3
 800723c:	dcf8      	bgt.n	8007230 <RSA_PKCS1v15_Encrypt+0x1b0>
 800723e:	e7d2      	b.n	80071e6 <RSA_PKCS1v15_Encrypt+0x166>
 8007240:	40023008 	.word	0x40023008
 8007244:	40023000 	.word	0x40023000

08007248 <crl_DRBG_AES128_Instantiate>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	b0d3      	sub	sp, #332	; 0x14c
 800724e:	ad12      	add	r5, sp, #72	; 0x48
 8007250:	4616      	mov	r6, r2
 8007252:	4604      	mov	r4, r0
 8007254:	2250      	movs	r2, #80	; 0x50
 8007256:	460f      	mov	r7, r1
 8007258:	4628      	mov	r0, r5
 800725a:	2100      	movs	r1, #0
 800725c:	4698      	mov	r8, r3
 800725e:	f000 f8db 	bl	8007418 <memset>
 8007262:	22b0      	movs	r2, #176	; 0xb0
 8007264:	a826      	add	r0, sp, #152	; 0x98
 8007266:	4944      	ldr	r1, [pc, #272]	; (8007378 <crl_DRBG_AES128_Instantiate+0x130>)
 8007268:	f000 f8c8 	bl	80073fc <memcpy>
 800726c:	f1a6 0210 	sub.w	r2, r6, #16
 8007270:	2a10      	cmp	r2, #16
 8007272:	d904      	bls.n	800727e <crl_DRBG_AES128_Instantiate+0x36>
 8007274:	f241 7076 	movw	r0, #6006	; 0x1776
 8007278:	b053      	add	sp, #332	; 0x14c
 800727a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727e:	985e      	ldr	r0, [sp, #376]	; 0x178
 8007280:	2820      	cmp	r0, #32
 8007282:	dd04      	ble.n	800728e <crl_DRBG_AES128_Instantiate+0x46>
 8007284:	f241 7077 	movw	r0, #6007	; 0x1777
 8007288:	b053      	add	sp, #332	; 0x14c
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	995c      	ldr	r1, [sp, #368]	; 0x170
 8007290:	2910      	cmp	r1, #16
 8007292:	dd02      	ble.n	800729a <crl_DRBG_AES128_Instantiate+0x52>
 8007294:	f241 707a 	movw	r0, #6010	; 0x177a
 8007298:	e7ee      	b.n	8007278 <crl_DRBG_AES128_Instantiate+0x30>
 800729a:	4639      	mov	r1, r7
 800729c:	4628      	mov	r0, r5
 800729e:	4632      	mov	r2, r6
 80072a0:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 80072a2:	f8dd 9178 	ldr.w	r9, [sp, #376]	; 0x178
 80072a6:	f000 f8a9 	bl	80073fc <memcpy>
 80072aa:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80072ac:	4437      	add	r7, r6
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	44b9      	add	r9, r7
 80072b2:	dd04      	ble.n	80072be <crl_DRBG_AES128_Instantiate+0x76>
 80072b4:	19a8      	adds	r0, r5, r6
 80072b6:	4641      	mov	r1, r8
 80072b8:	461a      	mov	r2, r3
 80072ba:	f000 f89f 	bl	80073fc <memcpy>
 80072be:	985e      	ldr	r0, [sp, #376]	; 0x178
 80072c0:	2800      	cmp	r0, #0
 80072c2:	dd04      	ble.n	80072ce <crl_DRBG_AES128_Instantiate+0x86>
 80072c4:	4602      	mov	r2, r0
 80072c6:	995d      	ldr	r1, [sp, #372]	; 0x174
 80072c8:	19e8      	adds	r0, r5, r7
 80072ca:	f000 f897 	bl	80073fc <memcpy>
 80072ce:	2100      	movs	r1, #0
 80072d0:	2210      	movs	r2, #16
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f8a0 	bl	8007418 <memset>
 80072d8:	4649      	mov	r1, r9
 80072da:	aa02      	add	r2, sp, #8
 80072dc:	4628      	mov	r0, r5
 80072de:	f7fe facb 	bl	8005878 <DRBG_AES128_Block_cipher_df.constprop.37>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d1c8      	bne.n	8007278 <crl_DRBG_AES128_Instantiate+0x30>
 80072e6:	ae0a      	add	r6, sp, #40	; 0x28
 80072e8:	68e7      	ldr	r7, [r4, #12]
 80072ea:	2310      	movs	r3, #16
 80072ec:	3701      	adds	r7, #1
 80072ee:	4631      	mov	r1, r6
 80072f0:	4620      	mov	r0, r4
 80072f2:	aa26      	add	r2, sp, #152	; 0x98
 80072f4:	441e      	add	r6, r3
 80072f6:	60e7      	str	r7, [r4, #12]
 80072f8:	b957      	cbnz	r7, 8007310 <crl_DRBG_AES128_Instantiate+0xc8>
 80072fa:	68a7      	ldr	r7, [r4, #8]
 80072fc:	3701      	adds	r7, #1
 80072fe:	60a7      	str	r7, [r4, #8]
 8007300:	b937      	cbnz	r7, 8007310 <crl_DRBG_AES128_Instantiate+0xc8>
 8007302:	6867      	ldr	r7, [r4, #4]
 8007304:	3701      	adds	r7, #1
 8007306:	6067      	str	r7, [r4, #4]
 8007308:	b917      	cbnz	r7, 8007310 <crl_DRBG_AES128_Instantiate+0xc8>
 800730a:	6827      	ldr	r7, [r4, #0]
 800730c:	3701      	adds	r7, #1
 800730e:	6027      	str	r7, [r4, #0]
 8007310:	f7fe f92a 	bl	8005568 <AES_general_SW_enc>
 8007314:	42ae      	cmp	r6, r5
 8007316:	d1e7      	bne.n	80072e8 <crl_DRBG_AES128_Instantiate+0xa0>
 8007318:	a902      	add	r1, sp, #8
 800731a:	e891 010e 	ldmia.w	r1, {r1, r2, r3, r8}
 800731e:	9d07      	ldr	r5, [sp, #28]
 8007320:	9500      	str	r5, [sp, #0]
 8007322:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007324:	9f06      	ldr	r7, [sp, #24]
 8007326:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007328:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800732a:	9001      	str	r0, [sp, #4]
 800732c:	4069      	eors	r1, r5
 800732e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007330:	6121      	str	r1, [r4, #16]
 8007332:	407e      	eors	r6, r7
 8007334:	e89d 0082 	ldmia.w	sp, {r1, r7}
 8007338:	406a      	eors	r2, r5
 800733a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800733e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007340:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007346:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800734a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800734e:	6162      	str	r2, [r4, #20]
 8007350:	406b      	eors	r3, r5
 8007352:	ea80 0009 	eor.w	r0, r0, r9
 8007356:	ea87 0501 	eor.w	r5, r7, r1
 800735a:	ea88 0c0c 	eor.w	ip, r8, ip
 800735e:	ea8b 070a 	eor.w	r7, fp, sl
 8007362:	2101      	movs	r1, #1
 8007364:	60e0      	str	r0, [r4, #12]
 8007366:	61a3      	str	r3, [r4, #24]
 8007368:	f8c4 c01c 	str.w	ip, [r4, #28]
 800736c:	6026      	str	r6, [r4, #0]
 800736e:	6065      	str	r5, [r4, #4]
 8007370:	60a7      	str	r7, [r4, #8]
 8007372:	6221      	str	r1, [r4, #32]
 8007374:	2000      	movs	r0, #0
 8007376:	e77f      	b.n	8007278 <crl_DRBG_AES128_Instantiate+0x30>
 8007378:	08007650 	.word	0x08007650

0800737c <RNGinit>:
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	460c      	mov	r4, r1
 8007380:	b085      	sub	sp, #20
 8007382:	b191      	cbz	r1, 80073aa <RNGinit+0x2e>
 8007384:	b188      	cbz	r0, 80073aa <RNGinit+0x2e>
 8007386:	e890 008e 	ldmia.w	r0, {r1, r2, r3, r7}
 800738a:	6906      	ldr	r6, [r0, #16]
 800738c:	6945      	ldr	r5, [r0, #20]
 800738e:	2000      	movs	r0, #0
 8007390:	6260      	str	r0, [r4, #36]	; 0x24
 8007392:	62a0      	str	r0, [r4, #40]	; 0x28
 8007394:	9700      	str	r7, [sp, #0]
 8007396:	9601      	str	r6, [sp, #4]
 8007398:	9502      	str	r5, [sp, #8]
 800739a:	4620      	mov	r0, r4
 800739c:	f7ff ff54 	bl	8007248 <crl_DRBG_AES128_Instantiate>
 80073a0:	b928      	cbnz	r0, 80073ae <RNGinit+0x32>
 80073a2:	2301      	movs	r3, #1
 80073a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073a6:	b005      	add	sp, #20
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073aa:	f241 7074 	movw	r0, #6004	; 0x1774
 80073ae:	b005      	add	sp, #20
 80073b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b2:	bf00      	nop

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4d0d      	ldr	r5, [pc, #52]	; (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	; (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1b64      	subs	r4, r4, r5
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2600      	movs	r6, #0
 80073c0:	42a6      	cmp	r6, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4d0b      	ldr	r5, [pc, #44]	; (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	; (80073f8 <__libc_init_array+0x44>)
 80073c8:	f000 f82e 	bl	8007428 <_init>
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2600      	movs	r6, #0
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073dc:	4798      	blx	r3
 80073de:	3601      	adds	r6, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e6:	4798      	blx	r3
 80073e8:	3601      	adds	r6, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	08007e94 	.word	0x08007e94
 80073f0:	08007e94 	.word	0x08007e94
 80073f4:	08007e94 	.word	0x08007e94
 80073f8:	08007e98 	.word	0x08007e98

080073fc <memcpy>:
 80073fc:	440a      	add	r2, r1
 80073fe:	4291      	cmp	r1, r2
 8007400:	f100 33ff 	add.w	r3, r0, #4294967295
 8007404:	d100      	bne.n	8007408 <memcpy+0xc>
 8007406:	4770      	bx	lr
 8007408:	b510      	push	{r4, lr}
 800740a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007412:	4291      	cmp	r1, r2
 8007414:	d1f9      	bne.n	800740a <memcpy+0xe>
 8007416:	bd10      	pop	{r4, pc}

08007418 <memset>:
 8007418:	4402      	add	r2, r0
 800741a:	4603      	mov	r3, r0
 800741c:	4293      	cmp	r3, r2
 800741e:	d100      	bne.n	8007422 <memset+0xa>
 8007420:	4770      	bx	lr
 8007422:	f803 1b01 	strb.w	r1, [r3], #1
 8007426:	e7f9      	b.n	800741c <memset+0x4>

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
