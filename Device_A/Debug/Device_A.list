
Device_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000010  080046e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  080046e8  00020580  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccf7  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f54  00000000  00000000  0002cd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0002ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  0002fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017761  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f879  00000000  00000000  00047df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009064b  00000000  00000000  0005766a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003860  00000000  00000000  000e7d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004698 	.word	0x08004698

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004698 	.word	0x08004698

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 f9a5 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f845 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fa51 	bl	8000990 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ee:	f000 f8f3 	bl	80006d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f2:	f000 f975 	bl	80007e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f6:	f000 f9bf 	bl	8000878 <MX_TIM3_Init>
  MX_SPI1_Init();
 80004fa:	f000 f8b7 	bl	800066c <MX_SPI1_Init>
  MX_CRC_Init();
 80004fe:	f000 f8a1 	bl	8000644 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi1);
 8000502:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x60>)
 8000504:	f000 fe9e 	bl	8001244 <nRF24_Init>
//    nRF24_SetRXAddress(0, "Nad");
//    nRF24_SetTXAddress("Odb");
//    nRF24_TX_Mode();
  nRF24_SetRXAddress(0, "Odb");
 8000508:	490d      	ldr	r1, [pc, #52]	; (8000540 <main+0x64>)
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fd75 	bl	8000ffa <nRF24_SetRXAddress>
      	nRF24_SetTXAddress("Nad");
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x68>)
 8000512:	f000 fdab 	bl	800106c <nRF24_SetTXAddress>
      	nRF24_RX_Mode();
 8000516:	f000 fb93 	bl	8000c40 <nRF24_RX_Mode>
    /* Toggle the green led before starting the algorithm */
    //Led_Toggle(500);


    /* Enable CRC clock */
    __CRC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0x6c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <main+0x6c>)
 8000524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <main+0x6c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //send_message(50);
	  receive_message();
 8000536:	f000 ff5b 	bl	80013f0 <receive_message>
 800053a:	e7fc      	b.n	8000536 <main+0x5a>
 800053c:	20000034 	.word	0x20000034
 8000540:	080046b0 	.word	0x080046b0
 8000544:	080046b4 	.word	0x080046b4
 8000548:	40023800 	.word	0x40023800

0800054c <Error_Handler>:
  /* USER CODE END 3 */
}


void Error_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000550:	2120      	movs	r1, #32
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <Error_Handler+0x24>)
 8000554:	f001 fcc2 	bl	8001edc <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000558:	20fa      	movs	r0, #250	; 0xfa
 800055a:	f001 f9d7 	bl	800190c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800055e:	2120      	movs	r1, #32
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <Error_Handler+0x24>)
 8000562:	f001 fcbb 	bl	8001edc <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000566:	20fa      	movs	r0, #250	; 0xfa
 8000568:	f001 f9d0 	bl	800190c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800056c:	e7f0      	b.n	8000550 <Error_Handler+0x4>
 800056e:	bf00      	nop
 8000570:	40020000 	.word	0x40020000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 f880 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <SystemClock_Config+0xc8>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <SystemClock_Config+0xc8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <SystemClock_Config+0xcc>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fcab 	bl	8001f54 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000604:	f7ff ffa2 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2103      	movs	r1, #3
 8000624:	4618      	mov	r0, r3
 8000626:	f001 ff0d 	bl	8002444 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000630:	f7ff ff8c 	bl	800054c <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	; 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_CRC_Init+0x20>)
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <MX_CRC_Init+0x24>)
 800064c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_CRC_Init+0x20>)
 8000650:	f001 fa8d 	bl	8001b6e <HAL_CRC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800065a:	f7ff ff77 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000002c 	.word	0x2000002c
 8000668:	40023000 	.word	0x40023000

0800066c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_SPI1_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800067c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006a0:	2218      	movs	r2, #24
 80006a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006b8:	220a      	movs	r2, #10
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006be:	f002 f86d 	bl	800279c <HAL_SPI_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006c8:	f7ff ff40 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000034 	.word	0x20000034
 80006d4:	40013000 	.word	0x40013000

080006d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b092      	sub	sp, #72	; 0x48
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 ffc0 	bl	8004688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <MX_TIM1_Init+0x100>)
 800070a:	4a34      	ldr	r2, [pc, #208]	; (80007dc <MX_TIM1_Init+0x104>)
 800070c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_TIM1_Init+0x100>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_TIM1_Init+0x100>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_TIM1_Init+0x100>)
 800071c:	f640 2247 	movw	r2, #2631	; 0xa47
 8000720:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_TIM1_Init+0x100>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_TIM1_Init+0x100>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_TIM1_Init+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000734:	4828      	ldr	r0, [pc, #160]	; (80007d8 <MX_TIM1_Init+0x100>)
 8000736:	f002 fe28 	bl	800338a <HAL_TIM_PWM_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000740:	f7ff ff04 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000750:	4619      	mov	r1, r3
 8000752:	4821      	ldr	r0, [pc, #132]	; (80007d8 <MX_TIM1_Init+0x100>)
 8000754:	f003 fea4 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800075e:	f7ff fef5 	bl	800054c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000766:	f240 5323 	movw	r3, #1315	; 0x523
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_TIM1_Init+0x100>)
 800078a:	f003 f849 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000794:	f7ff feda 	bl	800054c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_TIM1_Init+0x100>)
 80007bc:	f003 fedc 	bl	8004578 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80007c6:	f7ff fec1 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <MX_TIM1_Init+0x100>)
 80007cc:	f000 ff84 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 80007d0:	bf00      	nop
 80007d2:	3748      	adds	r7, #72	; 0x48
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	40010000 	.word	0x40010000

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM2_Init+0x94>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM2_Init+0x94>)
 8000806:	2263      	movs	r2, #99	; 0x63
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM2_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM2_Init+0x94>)
 8000812:	f04f 32ff 	mov.w	r2, #4294967295
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM2_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM2_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_TIM2_Init+0x94>)
 8000826:	f002 fd61 	bl	80032ec <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000830:	f7ff fe8c 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM2_Init+0x94>)
 8000842:	f003 f8af 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800084c:	f7ff fe7e 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM2_Init+0x94>)
 800085e:	f003 fe1f 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000868:	f7ff fe70 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000d4 	.word	0x200000d4

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_TIM3_Init+0x110>)
 80008b4:	4a35      	ldr	r2, [pc, #212]	; (800098c <MX_TIM3_Init+0x114>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_TIM3_Init+0x110>)
 80008ba:	2263      	movs	r2, #99	; 0x63
 80008bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_TIM3_Init+0x110>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_TIM3_Init+0x110>)
 80008c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_TIM3_Init+0x110>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_TIM3_Init+0x110>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d8:	482b      	ldr	r0, [pc, #172]	; (8000988 <MX_TIM3_Init+0x110>)
 80008da:	f002 fd07 	bl	80032ec <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008e4:	f7ff fe32 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f2:	4619      	mov	r1, r3
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <MX_TIM3_Init+0x110>)
 80008f6:	f003 f855 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000900:	f7ff fe24 	bl	800054c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <MX_TIM3_Init+0x110>)
 8000906:	f002 fd8f 	bl	8003428 <HAL_TIM_IC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000910:	f7ff fe1c 	bl	800054c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000914:	2304      	movs	r3, #4
 8000916:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <MX_TIM3_Init+0x110>)
 800092c:	f003 f901 	bl	8003b32 <HAL_TIM_SlaveConfigSynchro>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000936:	f7ff fe09 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <MX_TIM3_Init+0x110>)
 800094a:	f003 fda9 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000954:	f7ff fdfa 	bl	800054c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000958:	2302      	movs	r3, #2
 800095a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800095c:	2301      	movs	r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM3_Init+0x110>)
 8000970:	f002 feba 	bl	80036e8 <HAL_TIM_IC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800097a:	f7ff fde7 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3740      	adds	r7, #64	; 0x40
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000011c 	.word	0x2000011c
 800098c:	40000400 	.word	0x40000400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0x104>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0x104>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <MX_GPIO_Init+0x104>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0x104>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_NRF_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2103      	movs	r1, #3
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <MX_GPIO_Init+0x108>)
 8000a1c:	f001 fa46 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2120      	movs	r1, #32
 8000a24:	481d      	ldr	r0, [pc, #116]	; (8000a9c <MX_GPIO_Init+0x10c>)
 8000a26:	f001 fa41 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_NRF_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_NRF_Pin|CE_NRF_Pin;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_GPIO_Init+0x108>)
 8000a42:	f001 f8b1 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <MX_GPIO_Init+0x10c>)
 8000a5e:	f001 f8a3 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <MX_GPIO_Init+0x110>)
 8000a78:	f001 f896 	bl	8001ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2017      	movs	r0, #23
 8000a82:	f001 f83e 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a86:	2017      	movs	r0, #23
 8000a88:	f001 f857 	bl	8001b3a <HAL_NVIC_EnableIRQ>

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 ff2c 	bl	800190c <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <nRF24_SendSpi+0x28>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	f001 feea 	bl	80028ae <HAL_SPI_Transmit>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000168 	.word	0x20000168

08000ae8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <nRF24_ReadSpi+0x28>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	f002 f810 	bl	8002b26 <HAL_SPI_Receive>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000168 	.word	0x20000168

08000b14 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <nRF24_ReadRegister+0x44>)
 8000b28:	f001 f9c0 	bl	8001eac <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ffc3 	bl	8000abc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000b36:	f107 030f 	add.w	r3, r7, #15
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffd3 	bl	8000ae8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000b42:	2201      	movs	r2, #1
 8000b44:	2101      	movs	r1, #1
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <nRF24_ReadRegister+0x44>)
 8000b48:	f001 f9b0 	bl	8001eac <HAL_GPIO_WritePin>

	return result;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40020800 	.word	0x40020800

08000b5c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <nRF24_ReadRegisters+0x44>)
 8000b76:	f001 f999 	bl	8001eac <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff9c 	bl	8000abc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	4619      	mov	r1, r3
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f7ff ffad 	bl	8000ae8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2101      	movs	r1, #1
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <nRF24_ReadRegisters+0x44>)
 8000b94:	f001 f98a 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <nRF24_WriteRegister+0x48>)
 8000bc8:	f001 f970 	bl	8001eac <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff72 	bl	8000abc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <nRF24_WriteRegister+0x48>)
 8000bde:	f001 f965 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020800 	.word	0x40020800

08000bf0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <nRF24_WriteRegisters+0x4c>)
 8000c10:	f001 f94c 	bl	8001eac <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff4f 	bl	8000abc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	4619      	mov	r1, r3
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f7ff ff4a 	bl	8000abc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <nRF24_WriteRegisters+0x4c>)
 8000c2e:	f001 f93d 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40020800 	.word	0x40020800

08000c40 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8000c46:	f000 f829 	bl	8000c9c <nRF24_ReadConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8000c4e:	4911      	ldr	r1, [pc, #68]	; (8000c94 <nRF24_RX_Mode+0x54>)
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 f9d2 	bl	8000ffa <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f81f 	bl	8000cac <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000c6e:	2070      	movs	r0, #112	; 0x70
 8000c70:	f000 f877 	bl	8000d62 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000c74:	f000 f884 	bl	8000d80 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000c78:	f000 f89c 	bl	8000db4 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <nRF24_RX_Mode+0x58>)
 8000c82:	f001 f913 	bl	8001eac <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff0c 	bl	8000aa4 <nRF24_Delay>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000016c 	.word	0x2000016c
 8000c98:	40020800 	.word	0x40020800

08000c9c <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ff37 	bl	8000b14 <nRF24_ReadRegister>
 8000ca6:	4603      	mov	r3, r0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}

08000cac <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff72 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f7ff ff1e 	bl	8000b14 <nRF24_ReadRegister>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	f023 0307 	bic.w	r3, r3, #7
 8000ce2:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	b25a      	sxtb	r2, r3
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f7ff ff53 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000d10:	2006      	movs	r0, #6
 8000d12:	f7ff feff 	bl	8000b14 <nRF24_ReadRegister>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d20:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d104      	bne.n	8000d32 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f043 0320 	orr.w	r3, r3, #32
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e006      	b.n	8000d40 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d103      	bne.n	8000d40 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4619      	mov	r1, r3
 8000d44:	2006      	movs	r0, #6
 8000d46:	f7ff ff2d 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000d56:	2007      	movs	r0, #7
 8000d58:	f7ff fedc 	bl	8000b14 <nRF24_ReadRegister>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	2007      	movs	r0, #7
 8000d72:	f7ff ff17 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000d86:	23e2      	movs	r3, #226	; 0xe2
 8000d88:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <nRF24_FlushRX+0x30>)
 8000d90:	f001 f88c 	bl	8001eac <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe8f 	bl	8000abc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <nRF24_FlushRX+0x30>)
 8000da4:	f001 f882 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020800 	.word	0x40020800

08000db4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000dba:	23e1      	movs	r3, #225	; 0xe1
 8000dbc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <nRF24_FlushTX+0x30>)
 8000dc4:	f001 f872 	bl	8001eac <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe75 	bl	8000abc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <nRF24_FlushTX+0x30>)
 8000dd8:	f001 f868 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40020800 	.word	0x40020800

08000de8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000df2:	f7ff ff53 	bl	8000c9c <nRF24_ReadConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e003      	b.n	8000e12 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f023 0308 	bic.w	r3, r3, #8
 8000e10:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff49 	bl	8000cac <nRF24_WriteConfig>
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e2c:	f7ff ff36 	bl	8000c9c <nRF24_ReadConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d104      	bne.n	8000e44 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e003      	b.n	8000e4c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f023 0304 	bic.w	r3, r3, #4
 8000e4a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff2c 	bl	8000cac <nRF24_WriteConfig>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	2004      	movs	r0, #4
 8000e86:	f7ff fe8d 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f7ff fe7c 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d901      	bls.n	8000ece <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000eca:	2305      	movs	r3, #5
 8000ecc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	3311      	adds	r3, #17
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f7ff fe60 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d901      	bls.n	8000f06 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000f02:	2305      	movs	r3, #5
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f7ff fe04 	bl	8000b14 <nRF24_ReadRegister>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d10a      	bne.n	8000f2c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e00b      	b.n	8000f44 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	4619      	mov	r1, r3
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff fe2b 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	460a      	mov	r2, r1
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	4613      	mov	r3, r2
 8000f64:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d901      	bls.n	8000f70 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fdcf 	bl	8000b14 <nRF24_ReadRegister>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d10a      	bne.n	8000f96 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2201      	movs	r2, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	b25a      	sxtb	r2, r3
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e00b      	b.n	8000fae <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fdf6 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d901      	bls.n	8000fd4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d801      	bhi.n	8000fde <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000fda:	2303      	movs	r3, #3
 8000fdc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	3b02      	subs	r3, #2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	2003      	movs	r0, #3
 8000fee:	f7ff fdd9 	bl	8000ba4 <nRF24_WriteRegister>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	6039      	str	r1, [r7, #0]
 8001004:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <nRF24_SetRXAddress+0x18>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d11d      	bne.n	800104e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e00d      	b.n	8001034 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	441a      	add	r2, r3
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f1c3 0302 	rsb	r3, r3, #2
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	3310      	adds	r3, #16
 8001028:	443b      	add	r3, r7
 800102a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3301      	adds	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d9ee      	bls.n	8001018 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	330a      	adds	r3, #10
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f107 010c 	add.w	r1, r7, #12
 8001044:	2203      	movs	r2, #3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdd2 	bl	8000bf0 <nRF24_WriteRegisters>
	{
 800104c:	e00a      	b.n	8001064 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	330a      	adds	r3, #10
 8001052:	b2da      	uxtb	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3302      	adds	r3, #2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f7ff fda1 	bl	8000ba4 <nRF24_WriteRegister>
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2203      	movs	r2, #3
 800107a:	4619      	mov	r1, r3
 800107c:	200a      	movs	r0, #10
 800107e:	f7ff fd6d 	bl	8000b5c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e00c      	b.n	80010a2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f1c3 0302 	rsb	r3, r3, #2
 8001090:	3210      	adds	r2, #16
 8001092:	443a      	add	r2, r7
 8001094:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001098:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <nRF24_SetTXAddress+0x88>)
 800109a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	3301      	adds	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d9ef      	bls.n	8001088 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e00d      	b.n	80010ca <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	441a      	add	r2, r3
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f1c3 0302 	rsb	r3, r3, #2
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	3310      	adds	r3, #16
 80010be:	443b      	add	r3, r7
 80010c0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d9ee      	bls.n	80010ae <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2203      	movs	r2, #3
 80010d6:	4619      	mov	r1, r3
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff fd89 	bl	8000bf0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2203      	movs	r2, #3
 80010e4:	4619      	mov	r1, r3
 80010e6:	2010      	movs	r0, #16
 80010e8:	f7ff fd82 	bl	8000bf0 <nRF24_WriteRegisters>

}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000016c 	.word	0x2000016c

080010f8 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80010fe:	f7ff fe28 	bl	8000d52 <nRF24_ReadStatus>
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800110c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fe26 	bl	8000d62 <nRF24_WriteStatus>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001128:	f7ff fdb8 	bl	8000c9c <nRF24_ReadConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e003      	b.n	8001148 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001146:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdae 	bl	8000cac <nRF24_WriteConfig>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001162:	f7ff fd9b 	bl	8000c9c <nRF24_ReadConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e003      	b.n	8001182 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	f023 0320 	bic.w	r3, r3, #32
 8001180:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd91 	bl	8000cac <nRF24_WriteConfig>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800119c:	f7ff fd7e 	bl	8000c9c <nRF24_ReadConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e003      	b.n	80011bc <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f023 0310 	bic.w	r3, r3, #16
 80011ba:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fd74 	bl	8000cac <nRF24_WriteConfig>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80011d4:	2220      	movs	r2, #32
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2061      	movs	r0, #97	; 0x61
 80011da:	f7ff fcbf 	bl	8000b5c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 80011de:	2101      	movs	r1, #1
 80011e0:	2007      	movs	r0, #7
 80011e2:	f7ff fcdf 	bl	8000ba4 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 80011e6:	f7ff fdb4 	bl	8000d52 <nRF24_ReadStatus>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80011f4:	2120      	movs	r1, #32
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff fcd4 	bl	8000ba4 <nRF24_WriteRegister>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800120a:	f7ff fda2 	bl	8000d52 <nRF24_ReadStatus>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <nRF24_RXAvailible+0x3c>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fd98 	bl	8000d62 <nRF24_WriteStatus>
		return 1;
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000164 	.word	0x20000164

08001244 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <nRF24_Init+0xa0>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001252:	2200      	movs	r2, #0
 8001254:	2102      	movs	r1, #2
 8001256:	4824      	ldr	r0, [pc, #144]	; (80012e8 <nRF24_Init+0xa4>)
 8001258:	f000 fe28 	bl	8001eac <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	4821      	ldr	r0, [pc, #132]	; (80012e8 <nRF24_Init+0xa4>)
 8001262:	f000 fe23 	bl	8001eac <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001266:	2005      	movs	r0, #5
 8001268:	f7ff fc1c 	bl	8000aa4 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800126c:	2003      	movs	r0, #3
 800126e:	f7ff fd2b 	bl	8000cc8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff fd47 	bl	8000d06 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff fdb5 	bl	8000de8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fdcf 	bl	8000e22 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001284:	2107      	movs	r1, #7
 8001286:	2004      	movs	r0, #4
 8001288:	f7ff fde8 	bl	8000e5c <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 800128c:	2100      	movs	r1, #0
 800128e:	201c      	movs	r0, #28
 8001290:	f7ff fc88 	bl	8000ba4 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001294:	200a      	movs	r0, #10
 8001296:	f7ff fdfc 	bl	8000e92 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 800129a:	2120      	movs	r1, #32
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fe09 	bl	8000eb4 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80012a2:	2101      	movs	r1, #1
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fe21 	bl	8000eec <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80012aa:	2101      	movs	r1, #1
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fe52 	bl	8000f56 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff fe84 	bl	8000fc0 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80012b8:	2014      	movs	r0, #20
 80012ba:	f7ff fbf3 	bl	8000aa4 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff ff2d 	bl	800111e <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ff47 	bl	8001158 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff ff61 	bl	8001192 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80012d0:	2014      	movs	r0, #20
 80012d2:	f7ff fbe7 	bl	8000aa4 <nRF24_Delay>

	nRF24_ClearInterrupts();
 80012d6:	f7ff ff0f 	bl	80010f8 <nRF24_ClearInterrupts>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000168 	.word	0x20000168
 80012e8:	40020800 	.word	0x40020800

080012ec <buffer_add_rx>:
uint8_t rx_ring_buffer[BUFFER_SIZE];  // Ring buffer to store received data
uint16_t rx_head = 0, rx_tail = 0;    // Head and tail for the ring buffer
//uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk

// Add received chunk to the ring buffer
void buffer_add_rx(uint8_t* data, uint16_t length) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	81fb      	strh	r3, [r7, #14]
 80012fc:	e01b      	b.n	8001336 <buffer_add_rx+0x4a>
        rx_ring_buffer[rx_head] = data[i];
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <buffer_add_rx+0x60>)
 8001306:	8812      	ldrh	r2, [r2, #0]
 8001308:	7819      	ldrb	r1, [r3, #0]
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <buffer_add_rx+0x64>)
 800130c:	5499      	strb	r1, [r3, r2]
        rx_head = (rx_head + 1) % BUFFER_SIZE;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <buffer_add_rx+0x60>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <buffer_add_rx+0x68>)
 8001316:	fb82 1203 	smull	r1, r2, r2, r3
 800131a:	1191      	asrs	r1, r2, #6
 800131c:	17da      	asrs	r2, r3, #31
 800131e:	1a8a      	subs	r2, r1, r2
 8001320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001324:	fb01 f202 	mul.w	r2, r1, r2
 8001328:	1a9a      	subs	r2, r3, r2
 800132a:	b292      	uxth	r2, r2
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <buffer_add_rx+0x60>)
 800132e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	3301      	adds	r3, #1
 8001334:	81fb      	strh	r3, [r7, #14]
 8001336:	89fa      	ldrh	r2, [r7, #14]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3df      	bcc.n	80012fe <buffer_add_rx+0x12>
    }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000578 	.word	0x20000578
 8001350:	20000190 	.word	0x20000190
 8001354:	10624dd3 	.word	0x10624dd3

08001358 <buffer_get_full_message>:

// Extract full message from the ring buffer
void buffer_get_full_message(uint8_t* message, uint16_t length) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	e01c      	b.n	80013a4 <buffer_get_full_message+0x4c>
        message[i] = rx_ring_buffer[rx_tail];
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <buffer_get_full_message+0x60>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a11      	ldr	r2, [pc, #68]	; (80013bc <buffer_get_full_message+0x64>)
 8001378:	5c52      	ldrb	r2, [r2, r1]
 800137a:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % BUFFER_SIZE;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <buffer_get_full_message+0x60>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <buffer_get_full_message+0x68>)
 8001384:	fb82 1203 	smull	r1, r2, r2, r3
 8001388:	1191      	asrs	r1, r2, #6
 800138a:	17da      	asrs	r2, r3, #31
 800138c:	1a8a      	subs	r2, r1, r2
 800138e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001392:	fb01 f202 	mul.w	r2, r1, r2
 8001396:	1a9a      	subs	r2, r3, r2
 8001398:	b292      	uxth	r2, r2
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <buffer_get_full_message+0x60>)
 800139c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	3301      	adds	r3, #1
 80013a2:	81fb      	strh	r3, [r7, #14]
 80013a4:	89fa      	ldrh	r2, [r7, #14]
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3de      	bcc.n	800136a <buffer_get_full_message+0x12>
    }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	2000057a 	.word	0x2000057a
 80013bc:	20000190 	.word	0x20000190
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <flush_rx_buffer>:

// Function to flush the transmission ring buffer
void flush_rx_buffer() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    // Reset the head, tail, and size to flush the buffer
    rx_head = 0;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <flush_rx_buffer+0x20>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
    rx_tail = 0;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <flush_rx_buffer+0x24>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
    //rx_size = 0;

    // Optionally clear the buffer content
    memset(rx_ring_buffer, 0, sizeof(rx_ring_buffer));
 80013d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d8:	2100      	movs	r1, #0
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <flush_rx_buffer+0x28>)
 80013dc:	f003 f954 	bl	8004688 <memset>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000578 	.word	0x20000578
 80013e8:	2000057a 	.word	0x2000057a
 80013ec:	20000190 	.word	0x20000190

080013f0 <receive_message>:

void receive_message(){
 80013f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
	if (nRF24_RXAvailible()) {
 80013f8:	f7ff ff04 	bl	8001204 <nRF24_RXAvailible>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d043      	beq.n	800148a <receive_message+0x9a>
		    nRF24_ReadRXPaylaod(chunk);  // Receive 32-byte chunk
 8001402:	4824      	ldr	r0, [pc, #144]	; (8001494 <receive_message+0xa4>)
 8001404:	f7ff fee2 	bl	80011cc <nRF24_ReadRXPaylaod>
		    buffer_add_rx(chunk, NRF24_PAYLOAD_SIZE);  // Store received chunk in the buffer
 8001408:	2120      	movs	r1, #32
 800140a:	4822      	ldr	r0, [pc, #136]	; (8001494 <receive_message+0xa4>)
 800140c:	f7ff ff6e 	bl	80012ec <buffer_add_rx>
		    //MessageLength = sprintf(Message, "%s\n\r", chunk);
		    //HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);

		    // Optionally, you can check if the entire message is received and process it
		    if (rx_head >= expected_message_size) {
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <receive_message+0xa8>)
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <receive_message+0xac>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d332      	bcc.n	8001482 <receive_message+0x92>
 800141c:	466b      	mov	r3, sp
 800141e:	461e      	mov	r6, r3
		    uint8_t received_message[expected_message_size];
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <receive_message+0xac>)
 8001422:	8819      	ldrh	r1, [r3, #0]
 8001424:	460b      	mov	r3, r1
 8001426:	3b01      	subs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	b28b      	uxth	r3, r1
 800142c:	2200      	movs	r2, #0
 800142e:	4698      	mov	r8, r3
 8001430:	4691      	mov	r9, r2
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800143e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001446:	b28b      	uxth	r3, r1
 8001448:	2200      	movs	r2, #0
 800144a:	461c      	mov	r4, r3
 800144c:	4615      	mov	r5, r2
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	00eb      	lsls	r3, r5, #3
 8001458:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800145c:	00e2      	lsls	r2, r4, #3
 800145e:	460b      	mov	r3, r1
 8001460:	3307      	adds	r3, #7
 8001462:	08db      	lsrs	r3, r3, #3
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	ebad 0d03 	sub.w	sp, sp, r3
 800146a:	466b      	mov	r3, sp
 800146c:	3300      	adds	r3, #0
 800146e:	603b      	str	r3, [r7, #0]
		    buffer_get_full_message(received_message, expected_message_size);  // Extract full message
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <receive_message+0xac>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f7ff ff6e 	bl	8001358 <buffer_get_full_message>
//		          PrivKey_st.mModulusSize = sizeof(Modulus);
//		          PrivKey_st.pmExponent = (uint8_t *) PrivateExponent;
//		          PrivKey_st.pmModulus = (uint8_t *) Modulus;
//		          status = RSA_Decrypt(&PrivKey_st, received_message, output, &outputSize);

		     flush_rx_buffer();
 800147c:	f7ff ffa2 	bl	80013c4 <flush_rx_buffer>
 8001480:	46b5      	mov	sp, r6
		     }

		     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate reception
 8001482:	2120      	movs	r1, #32
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <receive_message+0xb0>)
 8001486:	f000 fd29 	bl	8001edc <HAL_GPIO_TogglePin>
		}
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001494:	20000170 	.word	0x20000170
 8001498:	20000578 	.word	0x20000578
 800149c:	20000000 	.word	0x20000000
 80014a0:	40020000 	.word	0x40020000

080014a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x48>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x48>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x48>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_MspInit+0x48>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_MspInit+0x48>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_MspInit+0x48>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_CRC_MspInit+0x38>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_CRC_MspInit+0x3c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_CRC_MspInit+0x3c>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_CRC_MspInit+0x3c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40023000 	.word	0x40023000
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12b      	bne.n	80015aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 800155c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800158a:	2338      	movs	r3, #56	; 0x38
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159a:	2305      	movs	r3, #5
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 80015a6:	f000 faff 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40013000 	.word	0x40013000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400

080015c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_TIM_PWM_MspInit+0x38>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10d      	bne.n	80015ee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_TIM_PWM_MspInit+0x3c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_TIM_PWM_MspInit+0x3c>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_TIM_PWM_MspInit+0x3c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d116      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a28      	ldr	r2, [pc, #160]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201c      	movs	r0, #28
 8001644:	f000 fa5d 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001648:	201c      	movs	r0, #28
 800164a:	f000 fa76 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800164e:	e038      	b.n	80016c2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_TIM_Base_MspInit+0xd0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d133      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_TIM_Base_MspInit+0xcc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001692:	2340      	movs	r3, #64	; 0x40
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a2:	2302      	movs	r3, #2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <HAL_TIM_Base_MspInit+0xd4>)
 80016ae:	f000 fa7b 	bl	8001ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	201d      	movs	r0, #29
 80016b8:	f000 fa23 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016bc:	201d      	movs	r0, #29
 80016be:	f000 fa3c 	bl	8001b3a <HAL_NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40000400 	.word	0x40000400
 80016d4:	40020000 	.word	0x40020000

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_TIM_MspPostInit+0x68>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11e      	bne.n	8001738 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_TIM_MspPostInit+0x6c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_TIM_MspPostInit+0x6c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_TIM_MspPostInit+0x70>)
 8001734:	f000 fa38 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010000 	.word	0x40010000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 f89f 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}

0800179a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 800179e:	2040      	movs	r0, #64	; 0x40
 80017a0:	f000 fbb6 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM2_IRQHandler+0x10>)
 80017ae:	f001 fe93 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200000d4 	.word	0x200000d4

080017bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM3_IRQHandler+0x10>)
 80017c2:	f001 fe89 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000011c 	.word	0x2000011c

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f8:	4c0b      	ldr	r4, [pc, #44]	; (8001828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001806:	f7ff ffe3 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f002 ff19 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7fe fe65 	bl	80004dc <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001820:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 8001824:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001828:	20000580 	.word	0x20000580

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 f947 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fe1e 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f95f 	bl	8001b56 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f927 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000004 	.word	0x20000004
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	20000008 	.word	0x20000008

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x1c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_IncTick+0x20>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <HAL_IncTick+0x20>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	2000057c 	.word	0x2000057c

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_GetTick+0x10>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	2000057c 	.word	0x2000057c

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff fff0 	bl	80018f8 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffe0 	bl	80018f8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000000c 	.word	0x2000000c

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <__NVIC_EnableIRQ+0x34>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff90 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff2d 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff42 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff90 	bl	8001a44 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5f 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff35 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00e      	b.n	8001b9e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fcad 	bl	80014f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e159      	b.n	8001e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8148 	bne.w	8001e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d005      	beq.n	8001bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a2 	beq.w	8001e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_GPIO_Init+0x2e4>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_GPIO_Init+0x2e4>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_GPIO_Init+0x2e4>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a51      	ldr	r2, [pc, #324]	; (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_GPIO_Init+0x2ec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_Init+0x202>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x1fe>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <HAL_GPIO_Init+0x2f4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x1fa>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	; (8001ea0 <HAL_GPIO_Init+0x2f8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x1f6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a44      	ldr	r2, [pc, #272]	; (8001ea4 <HAL_GPIO_Init+0x2fc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x1f2>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e008      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e004      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_Init+0x204>
 8001daa:	2300      	movs	r3, #0
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f002 0203 	and.w	r2, r2, #3
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dbc:	4934      	ldr	r1, [pc, #208]	; (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dee:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_GPIO_Init+0x300>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	f67f aea2 	bls.w	8001bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43d9      	mvns	r1, r3
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	400b      	ands	r3, r1
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f806 	bl	8001f40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e267      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d157      	bne.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e242      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x74>
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fec:	4b69      	ldr	r3, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a68      	ldr	r2, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a65      	ldr	r2, [pc, #404]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fc74 	bl	80018f8 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fc70 	bl	80018f8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e207      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fc60 	bl	80018f8 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fc5c 	bl	80018f8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1f3      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c7      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_OscConfig+0x244>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff fc15 	bl	80018f8 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff fc11 	bl	80018f8 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a8      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4925      	ldr	r1, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fbf4 	bl	80018f8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff fbf0 	bl	80018f8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e187      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d036      	beq.n	80021ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x248>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff fbd4 	bl	80018f8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fbd0 	bl	80018f8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e167      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x200>
 8002172:	e01b      	b.n	80021ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x248>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff fbbd 	bl	80018f8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e00e      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002182:	f7ff fbb9 	bl	80018f8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d907      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e150      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ea      	bne.n	8002182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8097 	beq.w	80022e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b81      	ldr	r3, [pc, #516]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a7c      	ldr	r2, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b7a      	ldr	r3, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b77      	ldr	r3, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b74      	ldr	r3, [pc, #464]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a73      	ldr	r2, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff fb79 	bl	80018f8 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff fb75 	bl	80018f8 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e10c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x2ea>
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x30c>
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a5e      	ldr	r2, [pc, #376]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 8002260:	4b58      	ldr	r3, [pc, #352]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff fb3a 	bl	80018f8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7ff fb36 	bl	80018f8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0cb      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ee      	beq.n	8002288 <HAL_RCC_OscConfig+0x334>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fb24 	bl	80018f8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff fb20 	bl	80018f8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b5      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ee      	bne.n	80022b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a1 	beq.w	8002434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d05c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d141      	bne.n	800238a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff faf4 	bl	80018f8 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff faf0 	bl	80018f8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e087      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	491b      	ldr	r1, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7ff fac9 	bl	80018f8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7ff fac5 	bl	80018f8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e05c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x416>
 8002388:	e054      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fab2 	bl	80018f8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff faae 	bl	80018f8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e045      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e038      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4ec>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d028      	beq.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d121      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11a      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cc      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d90c      	bls.n	8002480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b63      	ldr	r3, [pc, #396]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	494d      	ldr	r1, [pc, #308]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d044      	beq.n	8002564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d119      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e07f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e067      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4934      	ldr	r1, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7ff f9e0 	bl	80018f8 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7ff f9dc 	bl	80018f8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 020c 	and.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	429a      	cmp	r2, r3
 8002562:	d1eb      	bne.n	800253c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20c      	bcs.n	800258c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4916      	ldr	r1, [pc, #88]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	490e      	ldr	r1, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ca:	f000 f821 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490a      	ldr	r1, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f942 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	080046b8 	.word	0x080046b8
 8002608:	20000004 	.word	0x20000004
 800260c:	20000008 	.word	0x20000008

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b090      	sub	sp, #64	; 0x40
 8002616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002620:	2300      	movs	r3, #0
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x40>
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 80a2 	bhi.w	800277e <HAL_RCC_GetSysClockFreq+0x16e>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x3a>
 8002642:	e09c      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_GetSysClockFreq+0x184>)
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002648:	e09c      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_GetSysClockFreq+0x188>)
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264e:	e099      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265a:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d027      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	627a      	str	r2, [r7, #36]	; 0x24
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002678:	2100      	movs	r1, #0
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_GetSysClockFreq+0x188>)
 800267c:	fb03 f201 	mul.w	r2, r3, r1
 8002680:	2300      	movs	r3, #0
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	4413      	add	r3, r2
 8002688:	4a43      	ldr	r2, [pc, #268]	; (8002798 <HAL_RCC_GetSysClockFreq+0x188>)
 800268a:	fba0 2102 	umull	r2, r1, r0, r2
 800268e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002690:	62ba      	str	r2, [r7, #40]	; 0x28
 8002692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002694:	4413      	add	r3, r2
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	2200      	movs	r2, #0
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	61fa      	str	r2, [r7, #28]
 80026a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026a8:	f7fd fd96 	bl	80001d8 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b4:	e055      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	2200      	movs	r2, #0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	617a      	str	r2, [r7, #20]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026c8:	f04f 0b00 	mov.w	fp, #0
 80026cc:	4652      	mov	r2, sl
 80026ce:	465b      	mov	r3, fp
 80026d0:	f04f 0000 	mov.w	r0, #0
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	0159      	lsls	r1, r3, #5
 80026da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026de:	0150      	lsls	r0, r2, #5
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	ebb2 080a 	subs.w	r8, r2, sl
 80026e8:	eb63 090b 	sbc.w	r9, r3, fp
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026f8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026fc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002700:	ebb2 0408 	subs.w	r4, r2, r8
 8002704:	eb63 0509 	sbc.w	r5, r3, r9
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	00eb      	lsls	r3, r5, #3
 8002712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
 800271c:	eb14 030a 	adds.w	r3, r4, sl
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	eb45 030b 	adc.w	r3, r5, fp
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002734:	4629      	mov	r1, r5
 8002736:	028b      	lsls	r3, r1, #10
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	4604      	mov	r4, r0
 800273e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002742:	4601      	mov	r1, r0
 8002744:	028a      	lsls	r2, r1, #10
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	2200      	movs	r2, #0
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	60fa      	str	r2, [r7, #12]
 8002752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002756:	f7fd fd3f 	bl	80001d8 <__aeabi_uldivmod>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4613      	mov	r3, r2
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	3301      	adds	r3, #1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800277c:	e002      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetSysClockFreq+0x184>)
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002786:	4618      	mov	r0, r3
 8002788:	3740      	adds	r7, #64	; 0x40
 800278a:	46bd      	mov	sp, r7
 800278c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	00f42400 	.word	0x00f42400
 8002798:	017d7840 	.word	0x017d7840

0800279c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07b      	b.n	80028a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027be:	d009      	beq.n	80027d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
 80027c6:	e005      	b.n	80027d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fe9e 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	ea42 0103 	orr.w	r1, r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	f003 0104 	and.w	r1, r3, #4
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f003 0210 	and.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b088      	sub	sp, #32
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_SPI_Transmit+0x22>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e126      	b.n	8002b1e <HAL_SPI_Transmit+0x270>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d8:	f7ff f80e 	bl	80018f8 <HAL_GetTick>
 80028dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d002      	beq.n	80028f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028f2:	e10b      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Transmit+0x52>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002904:	e102      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	d10f      	bne.n	800296e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800296c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d007      	beq.n	800298c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002994:	d14b      	bne.n	8002a2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Transmit+0xf6>
 800299e:	8afb      	ldrh	r3, [r7, #22]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d13e      	bne.n	8002a22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	1c9a      	adds	r2, r3, #2
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c8:	e02b      	b.n	8002a22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d112      	bne.n	80029fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80029fc:	e011      	b.n	8002a22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fe:	f7fe ff7b 	bl	80018f8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d803      	bhi.n	8002a16 <HAL_SPI_Transmit+0x168>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_Transmit+0x16e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a20:	e074      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ce      	bne.n	80029ca <HAL_SPI_Transmit+0x11c>
 8002a2c:	e04c      	b.n	8002ac8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_Transmit+0x18e>
 8002a36:	8afb      	ldrh	r3, [r7, #22]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d140      	bne.n	8002abe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a62:	e02c      	b.n	8002abe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d113      	bne.n	8002a9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a98:	e011      	b.n	8002abe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9a:	f7fe ff2d 	bl	80018f8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d803      	bhi.n	8002ab2 <HAL_SPI_Transmit+0x204>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x20a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002abc:	e026      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1cd      	bne.n	8002a64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fbcb 	bl	8003268 <SPI_EndRxTxTransaction>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e000      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b088      	sub	sp, #32
 8002b2a:	af02      	add	r7, sp, #8
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b42:	d112      	bne.n	8002b6a <HAL_SPI_Receive+0x44>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10e      	bne.n	8002b6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f8f1 	bl	8002d48 <HAL_SPI_TransmitReceive>
 8002b66:	4603      	mov	r3, r0
 8002b68:	e0ea      	b.n	8002d40 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_SPI_Receive+0x52>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0e3      	b.n	8002d40 <HAL_SPI_Receive+0x21a>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b80:	f7fe feba 	bl	80018f8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b96:	e0ca      	b.n	8002d2e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_Receive+0x7e>
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ba8:	e0c1      	b.n	8002d2e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2204      	movs	r2, #4
 8002bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf0:	d10f      	bne.n	8002c12 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d007      	beq.n	8002c30 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d162      	bne.n	8002cfe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c38:	e02e      	b.n	8002c98 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d115      	bne.n	8002c74 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f103 020c 	add.w	r2, r3, #12
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c72:	e011      	b.n	8002c98 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c74:	f7fe fe40 	bl	80018f8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d803      	bhi.n	8002c8c <HAL_SPI_Receive+0x166>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d102      	bne.n	8002c92 <HAL_SPI_Receive+0x16c>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c96:	e04a      	b.n	8002d2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1cb      	bne.n	8002c3a <HAL_SPI_Receive+0x114>
 8002ca2:	e031      	b.n	8002d08 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d113      	bne.n	8002cda <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cd8:	e011      	b.n	8002cfe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cda:	f7fe fe0d 	bl	80018f8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d803      	bhi.n	8002cf2 <HAL_SPI_Receive+0x1cc>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Receive+0x1d2>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cfc:	e017      	b.n	8002d2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1cd      	bne.n	8002ca4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	6839      	ldr	r1, [r7, #0]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fa45 	bl	800319c <SPI_EndRxTransaction>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
 8002d2a:	e000      	b.n	8002d2e <HAL_SPI_Receive+0x208>
  }

error :
 8002d2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d56:	2301      	movs	r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x26>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e18a      	b.n	8003084 <HAL_SPI_TransmitReceive+0x33c>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d76:	f7fe fdbf 	bl	80018f8 <HAL_GetTick>
 8002d7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d00f      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x70>
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9e:	d107      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x68>
 8002da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d003      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002db6:	e15b      	b.n	8003070 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x82>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x82>
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dd0:	e14e      	b.n	8003070 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d003      	beq.n	8002de6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2205      	movs	r2, #5
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d007      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e42:	d178      	bne.n	8002f36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x10a>
 8002e4c:	8b7b      	ldrh	r3, [r7, #26]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d166      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	881a      	ldrh	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e76:	e053      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d11b      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x176>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d016      	beq.n	8002ebe <HAL_SPI_TransmitReceive+0x176>
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d113      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	1c9a      	adds	r2, r3, #2
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d119      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x1b8>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d014      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	1c9a      	adds	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f00:	f7fe fcfa 	bl	80018f8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d807      	bhi.n	8002f20 <HAL_SPI_TransmitReceive+0x1d8>
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d003      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f1e:	e0a7      	b.n	8003070 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1a6      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x130>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1a1      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x130>
 8002f34:	e07c      	b.n	8003030 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_TransmitReceive+0x1fc>
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d16b      	bne.n	800301c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6a:	e057      	b.n	800301c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d11c      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x26c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x26c>
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d114      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d119      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x2ae>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d014      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ff6:	f7fe fc7f 	bl	80018f8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003002:	429a      	cmp	r2, r3
 8003004:	d803      	bhi.n	800300e <HAL_SPI_TransmitReceive+0x2c6>
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d102      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x2cc>
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800301a:	e029      	b.n	8003070 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1a2      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x224>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d19d      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f917 	bl	8003268 <SPI_EndRxTxTransaction>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800304c:	e010      	b.n	8003070 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	e000      	b.n	8003070 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800306e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003084:	4618      	mov	r0, r3
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800309c:	f7fe fc2c 	bl	80018f8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030ac:	f7fe fc24 	bl	80018f8 <HAL_GetTick>
 80030b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030b2:	4b39      	ldr	r3, [pc, #228]	; (8003198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	0d1b      	lsrs	r3, r3, #20
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c2:	e054      	b.n	800316e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d050      	beq.n	800316e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030cc:	f7fe fc14 	bl	80018f8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d902      	bls.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d13d      	bne.n	800315e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fa:	d111      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003104:	d004      	beq.n	8003110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d107      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003128:	d10f      	bne.n	800314a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e017      	b.n	800318e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3b01      	subs	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	429a      	cmp	r2, r3
 800318a:	d19b      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000004 	.word	0x20000004

0800319c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b0:	d111      	bne.n	80031d6 <SPI_EndRxTransaction+0x3a>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ba:	d004      	beq.n	80031c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d107      	bne.n	80031d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031de:	d12a      	bne.n	8003236 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d012      	beq.n	8003210 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff ff49 	bl	800308c <SPI_WaitFlagStateUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02d      	beq.n	800325c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e026      	b.n	800325e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2200      	movs	r2, #0
 8003218:	2101      	movs	r1, #1
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff ff36 	bl	800308c <SPI_WaitFlagStateUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01a      	beq.n	800325c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e013      	b.n	800325e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2200      	movs	r2, #0
 800323e:	2101      	movs	r1, #1
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff ff23 	bl	800308c <SPI_WaitFlagStateUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e000      	b.n	800325e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <SPI_EndRxTxTransaction+0x7c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <SPI_EndRxTxTransaction+0x80>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0d5b      	lsrs	r3, r3, #21
 8003280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003292:	d112      	bne.n	80032ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff fef4 	bl	800308c <SPI_WaitFlagStateUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e00f      	b.n	80032da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d0f2      	beq.n	80032ba <SPI_EndRxTxTransaction+0x52>
 80032d4:	e000      	b.n	80032d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032d6:	bf00      	nop
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000004 	.word	0x20000004
 80032e8:	165e9f81 	.word	0x165e9f81

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e041      	b.n	8003382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe f974 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fc70 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e041      	b.n	8003420 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7fe f905 	bl	80015c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f000 fc21 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e041      	b.n	80034be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f839 	bl	80034c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 fbd2 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fb5d 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fb50 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb5f 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fb33 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fb26 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb35 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fb09 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fafc 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fb0b 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fadf 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fad2 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fae1 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 faad 	bl	8003bb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 ffd2 	bl	800462c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 faa5 	bl	8003bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0220 	mvn.w	r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 ff9d 	bl	800461a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003702:	2302      	movs	r3, #2
 8003704:	e088      	b.n	8003818 <HAL_TIM_IC_ConfigChannel+0x130>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f000 fd0c 	bl	8004140 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 020c 	bic.w	r2, r2, #12
 8003736:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6999      	ldr	r1, [r3, #24]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	e060      	b.n	800380e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d11c      	bne.n	800378c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f000 fd81 	bl	8004268 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003774:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6999      	ldr	r1, [r3, #24]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	021a      	lsls	r2, r3, #8
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	619a      	str	r2, [r3, #24]
 800378a:	e040      	b.n	800380e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11b      	bne.n	80037ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f000 fdcc 	bl	800433e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 020c 	bic.w	r2, r2, #12
 80037b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69d9      	ldr	r1, [r3, #28]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	61da      	str	r2, [r3, #28]
 80037c8:	e021      	b.n	800380e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d11c      	bne.n	800380a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f000 fde8 	bl	80043b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69d9      	ldr	r1, [r3, #28]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	61da      	str	r2, [r3, #28]
 8003808:	e001      	b.n	800380e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ae      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	f200 809f 	bhi.w	800398c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003889 	.word	0x08003889
 8003858:	0800398d 	.word	0x0800398d
 800385c:	0800398d 	.word	0x0800398d
 8003860:	0800398d 	.word	0x0800398d
 8003864:	080038c9 	.word	0x080038c9
 8003868:	0800398d 	.word	0x0800398d
 800386c:	0800398d 	.word	0x0800398d
 8003870:	0800398d 	.word	0x0800398d
 8003874:	0800390b 	.word	0x0800390b
 8003878:	0800398d 	.word	0x0800398d
 800387c:	0800398d 	.word	0x0800398d
 8003880:	0800398d 	.word	0x0800398d
 8003884:	0800394b 	.word	0x0800394b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa3c 	bl	8003d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0204 	bic.w	r2, r2, #4
 80038b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6999      	ldr	r1, [r3, #24]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	619a      	str	r2, [r3, #24]
      break;
 80038c6:	e064      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fa82 	bl	8003dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	619a      	str	r2, [r3, #24]
      break;
 8003908:	e043      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 facb 	bl	8003eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0208 	orr.w	r2, r2, #8
 8003924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0204 	bic.w	r2, r2, #4
 8003934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69d9      	ldr	r1, [r3, #28]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	61da      	str	r2, [r3, #28]
      break;
 8003948:	e023      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb15 	bl	8003f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	021a      	lsls	r2, r3, #8
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	61da      	str	r2, [r3, #28]
      break;
 800398a:	e002      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
      break;
 8003990:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_ConfigClockSource+0x1c>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0b4      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x186>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f8:	d03e      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xd4>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fe:	f200 8087 	bhi.w	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	f000 8086 	beq.w	8003b16 <HAL_TIM_ConfigClockSource+0x172>
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	d87f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d01a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xa6>
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d87b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b60      	cmp	r3, #96	; 0x60
 8003a1a:	d050      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x11a>
 8003a1c:	2b60      	cmp	r3, #96	; 0x60
 8003a1e:	d877      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b50      	cmp	r3, #80	; 0x50
 8003a22:	d03c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xfa>
 8003a24:	2b50      	cmp	r3, #80	; 0x50
 8003a26:	d873      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d058      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x13a>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d86f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d064      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d86b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d060      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d867      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d05a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	e062      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 fd01 	bl	8004460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	609a      	str	r2, [r3, #8]
      break;
 8003a76:	e04f      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f000 fcea 	bl	8004460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a9a:	609a      	str	r2, [r3, #8]
      break;
 8003a9c:	e03c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fbae 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2150      	movs	r1, #80	; 0x50
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fcb8 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003abc:	e02c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fc08 	bl	80042e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2160      	movs	r1, #96	; 0x60
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fca8 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003adc:	e01c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fb8e 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc98 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003afc:	e00c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f000 fc8f 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e000      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e031      	b.n	8003bae <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa5d 	bl	800401c <TIM_SlaveTimer_SetConfig>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e018      	b.n	8003bae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b9a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00f      	beq.n	8003c48 <TIM_Base_SetConfig+0x38>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d00b      	beq.n	8003c48 <TIM_Base_SetConfig+0x38>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <TIM_Base_SetConfig+0xe4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <TIM_Base_SetConfig+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <TIM_Base_SetConfig+0xe8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <TIM_Base_SetConfig+0xec>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d108      	bne.n	8003c5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01b      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c68:	d017      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <TIM_Base_SetConfig+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <TIM_Base_SetConfig+0xe8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00f      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <TIM_Base_SetConfig+0xec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00b      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <TIM_Base_SetConfig+0xf0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <TIM_Base_SetConfig+0xf4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <TIM_Base_SetConfig+0xf8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d108      	bne.n	8003cac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0302 	bic.w	r3, r3, #2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <TIM_OC1_SetConfig+0xc8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10c      	bne.n	8003d82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0308 	bic.w	r3, r3, #8
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <TIM_OC1_SetConfig+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d111      	bne.n	8003dae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	621a      	str	r2, [r3, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000

08003dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0320 	bic.w	r3, r3, #32
 8003e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <TIM_OC2_SetConfig+0xd0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10d      	bne.n	8003e54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <TIM_OC2_SetConfig+0xd0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d113      	bne.n	8003e84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	40010000 	.word	0x40010000

08003eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <TIM_OC3_SetConfig+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10d      	bne.n	8003f26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <TIM_OC3_SetConfig+0xd0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d113      	bne.n	8003f56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40010000 	.word	0x40010000

08003f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <TIM_OC4_SetConfig+0x98>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d109      	bne.n	8003ff4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	019b      	lsls	r3, r3, #6
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000

0800401c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b70      	cmp	r3, #112	; 0x70
 8004064:	d01a      	beq.n	800409c <TIM_SlaveTimer_SetConfig+0x80>
 8004066:	2b70      	cmp	r3, #112	; 0x70
 8004068:	d860      	bhi.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
 800406a:	2b60      	cmp	r3, #96	; 0x60
 800406c:	d054      	beq.n	8004118 <TIM_SlaveTimer_SetConfig+0xfc>
 800406e:	2b60      	cmp	r3, #96	; 0x60
 8004070:	d85c      	bhi.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
 8004072:	2b50      	cmp	r3, #80	; 0x50
 8004074:	d046      	beq.n	8004104 <TIM_SlaveTimer_SetConfig+0xe8>
 8004076:	2b50      	cmp	r3, #80	; 0x50
 8004078:	d858      	bhi.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d019      	beq.n	80040b2 <TIM_SlaveTimer_SetConfig+0x96>
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d854      	bhi.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
 8004082:	2b30      	cmp	r3, #48	; 0x30
 8004084:	d055      	beq.n	8004132 <TIM_SlaveTimer_SetConfig+0x116>
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d850      	bhi.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
 800408a:	2b20      	cmp	r3, #32
 800408c:	d051      	beq.n	8004132 <TIM_SlaveTimer_SetConfig+0x116>
 800408e:	2b20      	cmp	r3, #32
 8004090:	d84c      	bhi.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d04d      	beq.n	8004132 <TIM_SlaveTimer_SetConfig+0x116>
 8004096:	2b10      	cmp	r3, #16
 8004098:	d04b      	beq.n	8004132 <TIM_SlaveTimer_SetConfig+0x116>
 800409a:	e047      	b.n	800412c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f000 f9d8 	bl	8004460 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80040b0:	e040      	b.n	8004134 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d101      	bne.n	80040be <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e03b      	b.n	8004136 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
      break;
 8004102:	e017      	b.n	8004134 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	461a      	mov	r2, r3
 8004112:	f000 f87b 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004116:	e00d      	b.n	8004134 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	461a      	mov	r2, r3
 8004126:	f000 f8db 	bl	80042e0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800412a:	e003      	b.n	8004134 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
      break;
 8004130:	e000      	b.n	8004134 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004132:	bf00      	nop
  }

  return status;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0201 	bic.w	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <TIM_TI1_SetConfig+0xb8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_TI1_SetConfig+0x56>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004174:	d00f      	beq.n	8004196 <TIM_TI1_SetConfig+0x56>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a20      	ldr	r2, [pc, #128]	; (80041fc <TIM_TI1_SetConfig+0xbc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_TI1_SetConfig+0x56>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a1f      	ldr	r2, [pc, #124]	; (8004200 <TIM_TI1_SetConfig+0xc0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_TI1_SetConfig+0x56>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <TIM_TI1_SetConfig+0xc4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_TI1_SetConfig+0x56>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <TIM_TI1_SetConfig+0xc8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <TIM_TI1_SetConfig+0x5a>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <TIM_TI1_SetConfig+0x5c>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e003      	b.n	80041ba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 030a 	and.w	r3, r3, #10
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40014000 	.word	0x40014000

0800420c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0201 	bic.w	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f023 030a 	bic.w	r3, r3, #10
 8004248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f023 0210 	bic.w	r2, r3, #16
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	031b      	lsls	r3, r3, #12
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 0210 	bic.w	r2, r3, #16
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800430a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	031b      	lsls	r3, r3, #12
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800431c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800437a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	b2db      	uxtb	r3, r3
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800438e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004406:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	031b      	lsls	r3, r3, #12
 800440c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	f043 0307 	orr.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	431a      	orrs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e050      	b.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d013      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	40010000 	.word	0x40010000
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40014000 	.word	0x40014000

08004578 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004590:	2302      	movs	r3, #2
 8004592:	e03d      	b.n	8004610 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
	...

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	; (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	; (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	; (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	; (8004684 <__libc_init_array+0x44>)
 8004654:	f000 f820 	bl	8004698 <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	080046d0 	.word	0x080046d0
 800467c:	080046d0 	.word	0x080046d0
 8004680:	080046d0 	.word	0x080046d0
 8004684:	080046d4 	.word	0x080046d4

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
