
Device_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b8  080070b8  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c0  080070c0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c0  080070c0  000170c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080070c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001684  20000030  080070f8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  080070f8  000216b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b4  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205f  00000000  00000000  0002d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0002f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00030008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001790f  00000000  00000000  00030ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011341  00000000  00000000  000485b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000907c9  00000000  00000000  000598f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000ea0c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a8  00000000  00000000  000ea194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006750 	.word	0x08006750

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08006750 	.word	0x08006750

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 f9eb 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f849 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fa55 	bl	8000998 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ee:	f000 f8f7 	bl	80006e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f2:	f000 f979 	bl	80007e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f6:	f000 f9c3 	bl	8000880 <MX_TIM3_Init>
  MX_SPI1_Init();
 80004fa:	f000 f8bb 	bl	8000674 <MX_SPI1_Init>
  MX_CRC_Init();
 80004fe:	f000 f8a5 	bl	800064c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi1);
 8000502:	4810      	ldr	r0, [pc, #64]	; (8000544 <main+0x68>)
 8000504:	f000 fe96 	bl	8001234 <nRF24_Init>
    nRF24_SetRXAddress(0, "Nad");
 8000508:	490f      	ldr	r1, [pc, #60]	; (8000548 <main+0x6c>)
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fd73 	bl	8000ff6 <nRF24_SetRXAddress>
    nRF24_SetTXAddress("Odb");
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x70>)
 8000512:	f000 fda9 	bl	8001068 <nRF24_SetTXAddress>
    nRF24_TX_Mode();
 8000516:	f000 fb97 	bl	8000c48 <nRF24_TX_Mode>

    RSA_Driver_init();
 800051a:	f000 ff91 	bl	8001440 <RSA_Driver_init>
    /* Toggle the green led before starting the algorithm */
    //Led_Toggle(500);


    /* Enable CRC clock */
    __CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0x74>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <main+0x74>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0x74>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_message(50);
 800053a:	2032      	movs	r0, #50	; 0x32
 800053c:	f000 ff4e 	bl	80013dc <send_message>
 8000540:	e7fb      	b.n	800053a <main+0x5e>
 8000542:	bf00      	nop
 8000544:	20000054 	.word	0x20000054
 8000548:	08006768 	.word	0x08006768
 800054c:	0800676c 	.word	0x0800676c
 8000550:	40023800 	.word	0x40023800

08000554 <Error_Handler>:
  /* USER CODE END 3 */
}


void Error_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000558:	2120      	movs	r1, #32
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <Error_Handler+0x24>)
 800055c:	f001 fd04 	bl	8001f68 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000560:	20fa      	movs	r0, #250	; 0xfa
 8000562:	f001 fa19 	bl	8001998 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000566:	2120      	movs	r1, #32
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <Error_Handler+0x24>)
 800056a:	f001 fcfd 	bl	8001f68 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 800056e:	20fa      	movs	r0, #250	; 0xfa
 8000570:	f001 fa12 	bl	8001998 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000574:	e7f0      	b.n	8000558 <Error_Handler+0x4>
 8000576:	bf00      	nop
 8000578:	40020000 	.word	0x40020000

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 f8d8 	bl	8006740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fced 	bl	8001fe0 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f7ff ffa2 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ff4f 	bl	80024d0 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000638:	f7ff ff8c 	bl	8000554 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_CRC_Init+0x20>)
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <MX_CRC_Init+0x24>)
 8000654:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_CRC_Init+0x20>)
 8000658:	f001 facf 	bl	8001bfa <HAL_CRC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000662:	f7ff ff77 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000004c 	.word	0x2000004c
 8000670:	40023000 	.word	0x40023000

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_SPI1_Init+0x64>)
 800067a:	4a18      	ldr	r2, [pc, #96]	; (80006dc <MX_SPI1_Init+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_SPI1_Init+0x64>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_SPI1_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_SPI1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_SPI1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_SPI1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006a8:	2218      	movs	r2, #24
 80006aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006c0:	220a      	movs	r2, #10
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006c6:	f002 f8af 	bl	8002828 <HAL_SPI_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d0:	f7ff ff40 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000054 	.word	0x20000054
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b092      	sub	sp, #72	; 0x48
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 f818 	bl	8006740 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <MX_TIM1_Init+0x100>)
 8000712:	4a34      	ldr	r2, [pc, #208]	; (80007e4 <MX_TIM1_Init+0x104>)
 8000714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <MX_TIM1_Init+0x100>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_TIM1_Init+0x100>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_TIM1_Init+0x100>)
 8000724:	f640 2247 	movw	r2, #2631	; 0xa47
 8000728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_TIM1_Init+0x100>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_TIM1_Init+0x100>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_TIM1_Init+0x100>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <MX_TIM1_Init+0x100>)
 800073e:	f002 fe6a 	bl	8003416 <HAL_TIM_PWM_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000748:	f7ff ff04 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000754:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000758:	4619      	mov	r1, r3
 800075a:	4821      	ldr	r0, [pc, #132]	; (80007e0 <MX_TIM1_Init+0x100>)
 800075c:	f003 fee6 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000766:	f7ff fef5 	bl	8000554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076a:	2360      	movs	r3, #96	; 0x60
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 800076e:	f240 5323 	movw	r3, #1315	; 0x523
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <MX_TIM1_Init+0x100>)
 8000792:	f003 f88b 	bl	80038ac <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800079c:	f7ff feda 	bl	8000554 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM1_Init+0x100>)
 80007c4:	f003 ff1e 	bl	8004604 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80007ce:	f7ff fec1 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM1_Init+0x100>)
 80007d4:	f000 ffc6 	bl	8001764 <HAL_TIM_MspPostInit>

}
 80007d8:	bf00      	nop
 80007da:	3748      	adds	r7, #72	; 0x48
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	40010000 	.word	0x40010000

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0x94>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TIM2_Init+0x94>)
 800080e:	2263      	movs	r2, #99	; 0x63
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0x94>)
 800081a:	f04f 32ff 	mov.w	r2, #4294967295
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_TIM2_Init+0x94>)
 800082e:	f002 fda3 	bl	8003378 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000838:	f7ff fe8c 	bl	8000554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0x94>)
 800084a:	f003 f8f1 	bl	8003a30 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000854:	f7ff fe7e 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0x94>)
 8000866:	f003 fe61 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000870:	f7ff fe70 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000f4 	.word	0x200000f4

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b090      	sub	sp, #64	; 0x40
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ba:	4b35      	ldr	r3, [pc, #212]	; (8000990 <MX_TIM3_Init+0x110>)
 80008bc:	4a35      	ldr	r2, [pc, #212]	; (8000994 <MX_TIM3_Init+0x114>)
 80008be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80008c0:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_TIM3_Init+0x110>)
 80008c2:	2263      	movs	r2, #99	; 0x63
 80008c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <MX_TIM3_Init+0x110>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008cc:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_TIM3_Init+0x110>)
 80008ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_TIM3_Init+0x110>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_TIM3_Init+0x110>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e0:	482b      	ldr	r0, [pc, #172]	; (8000990 <MX_TIM3_Init+0x110>)
 80008e2:	f002 fd49 	bl	8003378 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008ec:	f7ff fe32 	bl	8000554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fa:	4619      	mov	r1, r3
 80008fc:	4824      	ldr	r0, [pc, #144]	; (8000990 <MX_TIM3_Init+0x110>)
 80008fe:	f003 f897 	bl	8003a30 <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000908:	f7ff fe24 	bl	8000554 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800090c:	4820      	ldr	r0, [pc, #128]	; (8000990 <MX_TIM3_Init+0x110>)
 800090e:	f002 fdd1 	bl	80034b4 <HAL_TIM_IC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000918:	f7ff fe1c 	bl	8000554 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4817      	ldr	r0, [pc, #92]	; (8000990 <MX_TIM3_Init+0x110>)
 8000934:	f003 f943 	bl	8003bbe <HAL_TIM_SlaveConfigSynchro>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800093e:	f7ff fe09 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480f      	ldr	r0, [pc, #60]	; (8000990 <MX_TIM3_Init+0x110>)
 8000952:	f003 fdeb 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800095c:	f7ff fdfa 	bl	8000554 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000964:	2301      	movs	r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM3_Init+0x110>)
 8000978:	f002 fefc 	bl	8003774 <HAL_TIM_IC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000982:	f7ff fde7 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3740      	adds	r7, #64	; 0x40
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000013c 	.word	0x2000013c
 8000994:	40000400 	.word	0x40000400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a39      	ldr	r2, [pc, #228]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <MX_GPIO_Init+0x104>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x104>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <MX_GPIO_Init+0x104>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_GPIO_Init+0x104>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_NRF_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2103      	movs	r1, #3
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0x108>)
 8000a24:	f001 fa88 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <MX_GPIO_Init+0x10c>)
 8000a2e:	f001 fa83 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_NRF_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_NRF_Pin|CE_NRF_Pin;
 8000a32:	2303      	movs	r3, #3
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0x108>)
 8000a4a:	f001 f8f3 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4e:	2320      	movs	r3, #32
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <MX_GPIO_Init+0x10c>)
 8000a66:	f001 f8e5 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <MX_GPIO_Init+0x110>)
 8000a80:	f001 f8d8 	bl	8001c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2017      	movs	r0, #23
 8000a8a:	f001 f880 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a8e:	2017      	movs	r0, #23
 8000a90:	f001 f899 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 ff6e 	bl	8001998 <HAL_Delay>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <nRF24_SendSpi+0x28>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f001 ff2c 	bl	800293a <HAL_SPI_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000184 	.word	0x20000184

08000af0 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <nRF24_ReadSpi+0x28>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	f002 f852 	bl	8002bb2 <HAL_SPI_Receive>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000184 	.word	0x20000184

08000b1c <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <nRF24_ReadRegister+0x44>)
 8000b30:	f001 fa02 	bl	8001f38 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffc3 	bl	8000ac4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000b3e:	f107 030f 	add.w	r3, r7, #15
 8000b42:	2101      	movs	r1, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ffd3 	bl	8000af0 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <nRF24_ReadRegister+0x44>)
 8000b50:	f001 f9f2 	bl	8001f38 <HAL_GPIO_WritePin>

	return result;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40020800 	.word	0x40020800

08000b64 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <nRF24_ReadRegisters+0x44>)
 8000b7e:	f001 f9db 	bl	8001f38 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff9c 	bl	8000ac4 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6838      	ldr	r0, [r7, #0]
 8000b92:	f7ff ffad 	bl	8000af0 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <nRF24_ReadRegisters+0x44>)
 8000b9c:	f001 f9cc 	bl	8001f38 <HAL_GPIO_WritePin>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40020800 	.word	0x40020800

08000bac <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <nRF24_WriteRegister+0x48>)
 8000bd0:	f001 f9b2 	bl	8001f38 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff72 	bl	8000ac4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000be0:	2201      	movs	r2, #1
 8000be2:	2101      	movs	r1, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <nRF24_WriteRegister+0x48>)
 8000be6:	f001 f9a7 	bl	8001f38 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000c12:	2200      	movs	r2, #0
 8000c14:	2101      	movs	r1, #1
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <nRF24_WriteRegisters+0x4c>)
 8000c18:	f001 f98e 	bl	8001f38 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff4f 	bl	8000ac4 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	6838      	ldr	r0, [r7, #0]
 8000c2c:	f7ff ff4a 	bl	8000ac4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <nRF24_WriteRegisters+0x4c>)
 8000c36:	f001 f97f 	bl	8001f38 <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40020800 	.word	0x40020800

08000c48 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2102      	movs	r1, #2
 8000c52:	4810      	ldr	r0, [pc, #64]	; (8000c94 <nRF24_TX_Mode+0x4c>)
 8000c54:	f001 f970 	bl	8001f38 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8000c58:	f000 f81e 	bl	8000c98 <nRF24_ReadConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f023 0301 	bic.w	r3, r3, #1
 8000c6e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f818 	bl	8000ca8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000c78:	2070      	movs	r0, #112	; 0x70
 8000c7a:	f000 f870 	bl	8000d5e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000c7e:	f000 f87d 	bl	8000d7c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000c82:	f000 f895 	bl	8000db0 <nRF24_FlushTX>

	nRF24_Delay(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff10 	bl	8000aac <nRF24_Delay>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40020800 	.word	0x40020800

08000c98 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff ff3d 	bl	8000b1c <nRF24_ReadRegister>
 8000ca2:	4603      	mov	r3, r0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff78 	bl	8000bac <nRF24_WriteRegister>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f7ff ff24 	bl	8000b1c <nRF24_ReadRegister>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	f023 0307 	bic.w	r3, r3, #7
 8000cde:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	b25a      	sxtb	r2, r3
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2006      	movs	r0, #6
 8000cf6:	f7ff ff59 	bl	8000bac <nRF24_WriteRegister>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f7ff ff05 	bl	8000b1c <nRF24_ReadRegister>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d1c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d104      	bne.n	8000d2e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e006      	b.n	8000d3c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d103      	bne.n	8000d3c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2006      	movs	r0, #6
 8000d42:	f7ff ff33 	bl	8000bac <nRF24_WriteRegister>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000d52:	2007      	movs	r0, #7
 8000d54:	f7ff fee2 	bl	8000b1c <nRF24_ReadRegister>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f7ff ff1d 	bl	8000bac <nRF24_WriteRegister>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000d82:	23e2      	movs	r3, #226	; 0xe2
 8000d84:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000d86:	2200      	movs	r2, #0
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <nRF24_FlushRX+0x30>)
 8000d8c:	f001 f8d4 	bl	8001f38 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	2101      	movs	r1, #1
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe95 	bl	8000ac4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <nRF24_FlushRX+0x30>)
 8000da0:	f001 f8ca 	bl	8001f38 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020800 	.word	0x40020800

08000db0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000db6:	23e1      	movs	r3, #225	; 0xe1
 8000db8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4808      	ldr	r0, [pc, #32]	; (8000de0 <nRF24_FlushTX+0x30>)
 8000dc0:	f001 f8ba 	bl	8001f38 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fe7b 	bl	8000ac4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <nRF24_FlushTX+0x30>)
 8000dd4:	f001 f8b0 	bl	8001f38 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40020800 	.word	0x40020800

08000de4 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000dee:	f7ff ff53 	bl	8000c98 <nRF24_ReadConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e003      	b.n	8000e0e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f023 0308 	bic.w	r3, r3, #8
 8000e0c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff49 	bl	8000ca8 <nRF24_WriteConfig>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e28:	f7ff ff36 	bl	8000c98 <nRF24_ReadConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d104      	bne.n	8000e40 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	e003      	b.n	8000e48 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	f023 0304 	bic.w	r3, r3, #4
 8000e46:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff2c 	bl	8000ca8 <nRF24_WriteConfig>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	4613      	mov	r3, r2
 8000e66:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	b25a      	sxtb	r2, r3
 8000e6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	2004      	movs	r0, #4
 8000e82:	f7ff fe93 	bl	8000bac <nRF24_WriteRegister>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2005      	movs	r0, #5
 8000ea4:	f7ff fe82 	bl	8000bac <nRF24_WriteRegister>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	d901      	bls.n	8000eca <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3311      	adds	r3, #17
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4610      	mov	r0, r2
 8000edc:	f7ff fe66 	bl	8000bac <nRF24_WriteRegister>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b05      	cmp	r3, #5
 8000efc:	d901      	bls.n	8000f02 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000efe:	2305      	movs	r3, #5
 8000f00:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff fe0a 	bl	8000b1c <nRF24_ReadRegister>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10a      	bne.n	8000f28 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2201      	movs	r2, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e00b      	b.n	8000f40 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	b25a      	sxtb	r2, r3
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	4619      	mov	r1, r3
 8000f44:	2002      	movs	r0, #2
 8000f46:	f7ff fe31 	bl	8000bac <nRF24_WriteRegister>
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d901      	bls.n	8000f6c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000f68:	2305      	movs	r3, #5
 8000f6a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fdd5 	bl	8000b1c <nRF24_ReadRegister>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d10a      	bne.n	8000f92 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e00b      	b.n	8000faa <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2201      	movs	r2, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	b25a      	sxtb	r2, r3
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	4619      	mov	r1, r3
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fdfc 	bl	8000bac <nRF24_WriteRegister>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d901      	bls.n	8000fd0 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000fcc:	2305      	movs	r3, #5
 8000fce:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d801      	bhi.n	8000fda <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f7ff fddf 	bl	8000bac <nRF24_WriteRegister>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	6039      	str	r1, [r7, #0]
 8001000:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <nRF24_SetRXAddress+0x18>
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d11d      	bne.n	800104a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e00d      	b.n	8001030 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	441a      	add	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f1c3 0302 	rsb	r3, r3, #2
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	3310      	adds	r3, #16
 8001024:	443b      	add	r3, r7
 8001026:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3301      	adds	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d9ee      	bls.n	8001014 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	330a      	adds	r3, #10
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2203      	movs	r2, #3
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fdd8 	bl	8000bf8 <nRF24_WriteRegisters>
	{
 8001048:	e00a      	b.n	8001060 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	330a      	adds	r3, #10
 800104e:	b2da      	uxtb	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3302      	adds	r3, #2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	4610      	mov	r0, r2
 800105a:	f7ff fda7 	bl	8000bac <nRF24_WriteRegister>
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2203      	movs	r2, #3
 8001076:	4619      	mov	r1, r3
 8001078:	200a      	movs	r0, #10
 800107a:	f7ff fd73 	bl	8000b64 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e00c      	b.n	800109e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	f1c3 0302 	rsb	r3, r3, #2
 800108c:	3210      	adds	r2, #16
 800108e:	443a      	add	r2, r7
 8001090:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001094:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <nRF24_SetTXAddress+0x88>)
 8001096:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	3301      	adds	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d9ef      	bls.n	8001084 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e00d      	b.n	80010c6 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	441a      	add	r2, r3
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f1c3 0302 	rsb	r3, r3, #2
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	3310      	adds	r3, #16
 80010ba:	443b      	add	r3, r7
 80010bc:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	3301      	adds	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d9ee      	bls.n	80010aa <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2203      	movs	r2, #3
 80010d2:	4619      	mov	r1, r3
 80010d4:	200a      	movs	r0, #10
 80010d6:	f7ff fd8f 	bl	8000bf8 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2203      	movs	r2, #3
 80010e0:	4619      	mov	r1, r3
 80010e2:	2010      	movs	r0, #16
 80010e4:	f7ff fd88 	bl	8000bf8 <nRF24_WriteRegisters>

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000188 	.word	0x20000188

080010f4 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80010fa:	f7ff fe28 	bl	8000d4e <nRF24_ReadStatus>
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001108:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe26 	bl	8000d5e <nRF24_WriteStatus>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001124:	f7ff fdb8 	bl	8000c98 <nRF24_ReadConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e003      	b.n	8001144 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001142:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fdae 	bl	8000ca8 <nRF24_WriteConfig>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800115e:	f7ff fd9b 	bl	8000c98 <nRF24_ReadConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d104      	bne.n	8001176 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 0320 	orr.w	r3, r3, #32
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e003      	b.n	800117e <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f023 0320 	bic.w	r3, r3, #32
 800117c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd91 	bl	8000ca8 <nRF24_WriteConfig>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001198:	f7ff fd7e 	bl	8000c98 <nRF24_ReadConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e003      	b.n	80011b8 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f023 0310 	bic.w	r3, r3, #16
 80011b6:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fd74 	bl	8000ca8 <nRF24_WriteConfig>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80011d0:	2220      	movs	r2, #32
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	20a0      	movs	r0, #160	; 0xa0
 80011d6:	f7ff fd0f 	bl	8000bf8 <nRF24_WriteRegisters>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80011ea:	2201      	movs	r2, #1
 80011ec:	2102      	movs	r1, #2
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <nRF24_WaitTX+0x4c>)
 80011f0:	f000 fea2 	bl	8001f38 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff fc59 	bl	8000aac <nRF24_Delay>
	NRF24_CE_LOW;
 80011fa:	2200      	movs	r2, #0
 80011fc:	2102      	movs	r1, #2
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <nRF24_WaitTX+0x4c>)
 8001200:	f000 fe9a 	bl	8001f38 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fc51 	bl	8000aac <nRF24_Delay>
		status = nRF24_ReadStatus();
 800120a:	f7ff fda0 	bl	8000d4e <nRF24_ReadStatus>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	d104      	bne.n	8001226 <nRF24_WaitTX+0x42>
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0ee      	beq.n	8001204 <nRF24_WaitTX+0x20>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020800 	.word	0x40020800

08001234 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800123c:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <nRF24_Init+0xa0>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001242:	2200      	movs	r2, #0
 8001244:	2102      	movs	r1, #2
 8001246:	4824      	ldr	r0, [pc, #144]	; (80012d8 <nRF24_Init+0xa4>)
 8001248:	f000 fe76 	bl	8001f38 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800124c:	2201      	movs	r2, #1
 800124e:	2101      	movs	r1, #1
 8001250:	4821      	ldr	r0, [pc, #132]	; (80012d8 <nRF24_Init+0xa4>)
 8001252:	f000 fe71 	bl	8001f38 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001256:	2005      	movs	r0, #5
 8001258:	f7ff fc28 	bl	8000aac <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800125c:	2003      	movs	r0, #3
 800125e:	f7ff fd31 	bl	8000cc4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001262:	2002      	movs	r0, #2
 8001264:	f7ff fd4d 	bl	8000d02 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fdbb 	bl	8000de4 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fdd5 	bl	8000e1e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001274:	2107      	movs	r1, #7
 8001276:	2004      	movs	r0, #4
 8001278:	f7ff fdee 	bl	8000e58 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 800127c:	2100      	movs	r1, #0
 800127e:	201c      	movs	r0, #28
 8001280:	f7ff fc94 	bl	8000bac <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001284:	200a      	movs	r0, #10
 8001286:	f7ff fe02 	bl	8000e8e <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 800128a:	2120      	movs	r1, #32
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe0f 	bl	8000eb0 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001292:	2101      	movs	r1, #1
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fe27 	bl	8000ee8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800129a:	2101      	movs	r1, #1
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fe58 	bl	8000f52 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80012a2:	2003      	movs	r0, #3
 80012a4:	f7ff fe8a 	bl	8000fbc <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80012a8:	2014      	movs	r0, #20
 80012aa:	f7ff fbff 	bl	8000aac <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff33 	bl	800111a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff4d 	bl	8001154 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff ff67 	bl	800118e <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80012c0:	2014      	movs	r0, #20
 80012c2:	f7ff fbf3 	bl	8000aac <nRF24_Delay>

	nRF24_ClearInterrupts();
 80012c6:	f7ff ff15 	bl	80010f4 <nRF24_ClearInterrupts>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000184 	.word	0x20000184
 80012d8:	40020800 	.word	0x40020800

080012dc <buffer_add>:
uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk
uint32_t PackageTimer;

//TRANSMISSION
// Add data to the ring buffer
void buffer_add(uint8_t* data, uint16_t length) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	81fb      	strh	r3, [r7, #14]
 80012ec:	e020      	b.n	8001330 <buffer_add+0x54>
        tx_ring_buffer[tx_head] = data[i];
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <buffer_add+0x68>)
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	7819      	ldrb	r1, [r3, #0]
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <buffer_add+0x6c>)
 80012fc:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % BUFFER_SIZE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <buffer_add+0x68>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <buffer_add+0x70>)
 8001306:	fb82 1203 	smull	r1, r2, r2, r3
 800130a:	1191      	asrs	r1, r2, #6
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	1a8a      	subs	r2, r1, r2
 8001310:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001314:	fb01 f202 	mul.w	r2, r1, r2
 8001318:	1a9a      	subs	r2, r3, r2
 800131a:	b292      	uxth	r2, r2
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <buffer_add+0x68>)
 800131e:	801a      	strh	r2, [r3, #0]
        tx_size++;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <buffer_add+0x74>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <buffer_add+0x74>)
 8001328:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < length; i++) {
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	3301      	adds	r3, #1
 800132e:	81fb      	strh	r3, [r7, #14]
 8001330:	89fa      	ldrh	r2, [r7, #14]
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3da      	bcc.n	80012ee <buffer_add+0x12>
    }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000574 	.word	0x20000574
 8001348:	2000018c 	.word	0x2000018c
 800134c:	10624dd3 	.word	0x10624dd3
 8001350:	20000578 	.word	0x20000578

08001354 <buffer_get_chunk>:

// Get 32-byte chunk from the ring buffer
uint8_t buffer_get_chunk(uint8_t* chunk) {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    if (tx_size == 0) return 0;  // No data to send
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <buffer_get_chunk+0x78>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <buffer_get_chunk+0x14>
 8001364:	2300      	movs	r3, #0
 8001366:	e02c      	b.n	80013c2 <buffer_get_chunk+0x6e>

    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e021      	b.n	80013b2 <buffer_get_chunk+0x5e>
        chunk[i] = tx_ring_buffer[tx_tail];
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <buffer_get_chunk+0x7c>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <buffer_get_chunk+0x80>)
 800137c:	5c52      	ldrb	r2, [r2, r1]
 800137e:	701a      	strb	r2, [r3, #0]
        tx_tail = (tx_tail + 1) % BUFFER_SIZE;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <buffer_get_chunk+0x7c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <buffer_get_chunk+0x84>)
 8001388:	fb82 1203 	smull	r1, r2, r2, r3
 800138c:	1191      	asrs	r1, r2, #6
 800138e:	17da      	asrs	r2, r3, #31
 8001390:	1a8a      	subs	r2, r1, r2
 8001392:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001396:	fb01 f202 	mul.w	r2, r1, r2
 800139a:	1a9a      	subs	r2, r3, r2
 800139c:	b292      	uxth	r2, r2
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <buffer_get_chunk+0x7c>)
 80013a0:	801a      	strh	r2, [r3, #0]
        tx_size--;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <buffer_get_chunk+0x78>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <buffer_get_chunk+0x78>)
 80013aa:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	3301      	adds	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b1f      	cmp	r3, #31
 80013b6:	d803      	bhi.n	80013c0 <buffer_get_chunk+0x6c>
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <buffer_get_chunk+0x78>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1d6      	bne.n	800136e <buffer_get_chunk+0x1a>
    }
    return 1;  // Chunk is ready to send
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000578 	.word	0x20000578
 80013d0:	20000576 	.word	0x20000576
 80013d4:	2000018c 	.word	0x2000018c
 80013d8:	10624dd3 	.word	0x10624dd3

080013dc <send_message>:

void send_message(uint32_t delay_time){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if (tx_size > 0 && HAL_GetTick() - PackageTimer > delay_time) {
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <send_message+0x54>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01c      	beq.n	8001426 <send_message+0x4a>
 80013ec:	f000 faca 	bl	8001984 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <send_message+0x58>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d213      	bcs.n	8001426 <send_message+0x4a>
		if (buffer_get_chunk(chunk)) {
 80013fe:	480e      	ldr	r0, [pc, #56]	; (8001438 <send_message+0x5c>)
 8001400:	f7ff ffa8 	bl	8001354 <buffer_get_chunk>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <send_message+0x38>
		    nRF24_WriteTXPayload(chunk);  // Send 32-byte chunk
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <send_message+0x5c>)
 800140c:	f7ff fedc 	bl	80011c8 <nRF24_WriteTXPayload>
		    nRF24_WaitTX();               // Wait until the transmission is completed
 8001410:	f7ff fee8 	bl	80011e4 <nRF24_WaitTX>
		    }
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate transmission
 8001414:	2120      	movs	r1, #32
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <send_message+0x60>)
 8001418:	f000 fda6 	bl	8001f68 <HAL_GPIO_TogglePin>
		PackageTimer = HAL_GetTick();
 800141c:	f000 fab2 	bl	8001984 <HAL_GetTick>
 8001420:	4603      	mov	r3, r0
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <send_message+0x58>)
 8001424:	6013      	str	r3, [r2, #0]
	}
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000578 	.word	0x20000578
 8001434:	2000059c 	.word	0x2000059c
 8001438:	2000057c 	.word	0x2000057c
 800143c:	40020000 	.word	0x40020000

08001440 <RSA_Driver_init>:
int32_t status = RSA_ERR_GENERIC;

RSApubKey_stt PubKey_st;
RSAprivKey_stt PrivKey_st;

void RSA_Driver_init(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	RSA_Encryption_preparation();
 8001444:	f000 f81c 	bl	8001480 <RSA_Encryption_preparation>
	status = RSA_Encrypt(&PubKey_st, Message, sizeof(Message), output);
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <RSA_Driver_init+0x30>)
 800144a:	2210      	movs	r2, #16
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <RSA_Driver_init+0x34>)
 800144e:	480a      	ldr	r0, [pc, #40]	; (8001478 <RSA_Driver_init+0x38>)
 8001450:	f000 f830 	bl	80014b4 <RSA_Encrypt>
 8001454:	4603      	mov	r3, r0
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <RSA_Driver_init+0x3c>)
 8001458:	6013      	str	r3, [r2, #0]
	if (status == RSA_SUCCESS){
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <RSA_Driver_init+0x3c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d104      	bne.n	800146c <RSA_Driver_init+0x2c>
		buffer_add(output, sizeof(output));
 8001462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <RSA_Driver_init+0x30>)
 8001468:	f7ff ff38 	bl	80012dc <buffer_add>
	}
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200015a0 	.word	0x200015a0
 8001474:	08006a6c 	.word	0x08006a6c
 8001478:	200016a0 	.word	0x200016a0
 800147c:	20000020 	.word	0x20000020

08001480 <RSA_Encryption_preparation>:

/* Preparing for Encryption */
void RSA_Encryption_preparation(){
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

PubKey_st.mExponentSize = sizeof(PublicExponent);
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <RSA_Encryption_preparation+0x28>)
 8001486:	2203      	movs	r2, #3
 8001488:	60da      	str	r2, [r3, #12]
PubKey_st.mModulusSize = sizeof(Modulus);
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <RSA_Encryption_preparation+0x28>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	605a      	str	r2, [r3, #4]
PubKey_st.pmExponent = (uint8_t *) PublicExponent;
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <RSA_Encryption_preparation+0x28>)
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <RSA_Encryption_preparation+0x2c>)
 8001496:	609a      	str	r2, [r3, #8]
PubKey_st.pmModulus = (uint8_t *)Modulus;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <RSA_Encryption_preparation+0x28>)
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <RSA_Encryption_preparation+0x30>)
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200016a0 	.word	0x200016a0
 80014ac:	08006b7c 	.word	0x08006b7c
 80014b0:	08006a7c 	.word	0x08006a7c

080014b4 <RSA_Encrypt>:

int32_t RSA_Encrypt(RSApubKey_stt *P_pPubKey,
                    const uint8_t *P_pInputMessage,
                    int32_t P_InputSize,
                    uint8_t *P_pOutput)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	; 0x70
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  int32_t status = RNG_SUCCESS ;
 80014c2:	2300      	movs	r3, #0
 80014c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RNGstate_stt RNGstate;
  RNGinitInput_stt RNGinit_st;
  RNGinit_st.pmEntropyData = entropy_data;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <RSA_Encrypt+0x74>)
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RNGinit_st.mEntropyDataSize = sizeof(entropy_data);
 80014ca:	2320      	movs	r3, #32
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RNGinit_st.mPersDataSize = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RNGinit_st.mNonceSize = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34

  status = RNGinit(&RNGinit_st, &RNGstate);
 80014d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f005 f8df 	bl	80066a4 <RNGinit>
 80014e6:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (status == RNG_SUCCESS)
 80014e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <RSA_Encrypt+0x68>
  {
    RSAinOut_stt inOut_st;
    membuf_stt mb;

    mb.mSize = sizeof(preallocated_buffer);
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	833b      	strh	r3, [r7, #24]
    mb.mUsed = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	837b      	strh	r3, [r7, #26]
    mb.pmBuf = preallocated_buffer;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <RSA_Encrypt+0x78>)
 80014fa:	617b      	str	r3, [r7, #20]

    /* Fill the RSAinOut_stt */
    inOut_st.pmInput = P_pInputMessage;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	61fb      	str	r3, [r7, #28]
    inOut_st.mInputSize = P_InputSize;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	623b      	str	r3, [r7, #32]
    inOut_st.pmOutput = P_pOutput;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	627b      	str	r3, [r7, #36]	; 0x24

    /* Encrypt the message, this function will write sizeof(modulus) data */
    status = RSA_PKCS1v15_Encrypt(P_pPubKey, &inOut_st, &RNGstate, &mb);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001510:	f107 011c 	add.w	r1, r7, #28
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f004 ff47 	bl	80063a8 <RSA_PKCS1v15_Encrypt>
 800151a:	66f8      	str	r0, [r7, #108]	; 0x6c
  }
  return(status);
 800151c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800151e:	4618      	mov	r0, r3
 8001520:	3770      	adds	r7, #112	; 0x70
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000
 800152c:	200005a0 	.word	0x200005a0

08001530 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x48>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_MspInit+0x48>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_MspInit+0x48>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_MspInit+0x48>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_MspInit+0x48>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_MspInit+0x48>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_CRC_MspInit+0x38>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10d      	bne.n	80015aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_CRC_MspInit+0x3c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_CRC_MspInit+0x3c>)
 8001598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_CRC_MspInit+0x3c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40023000 	.word	0x40023000
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_SPI_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_SPI_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_SPI_MspInit+0x88>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_SPI_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001616:	2338      	movs	r3, #56	; 0x38
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001626:	2305      	movs	r3, #5
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_SPI_MspInit+0x8c>)
 8001632:	f000 faff 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40013000 	.word	0x40013000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_TIM_PWM_MspInit+0x38>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d10d      	bne.n	800167a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_TIM_PWM_MspInit+0x3c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_TIM_PWM_MspInit+0x3c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_TIM_PWM_MspInit+0x3c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40010000 	.word	0x40010000
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d116      	bne.n	80016dc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b29      	ldr	r3, [pc, #164]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a28      	ldr	r2, [pc, #160]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	201c      	movs	r0, #28
 80016d0:	f000 fa5d 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d4:	201c      	movs	r0, #28
 80016d6:	f000 fa76 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016da:	e038      	b.n	800174e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_TIM_Base_MspInit+0xd0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d133      	bne.n	800174e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_TIM_Base_MspInit+0xcc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800172e:	2302      	movs	r3, #2
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <HAL_TIM_Base_MspInit+0xd4>)
 800173a:	f000 fa7b 	bl	8001c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	201d      	movs	r0, #29
 8001744:	f000 fa23 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001748:	201d      	movs	r0, #29
 800174a:	f000 fa3c 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40000400 	.word	0x40000400
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_TIM_MspPostInit+0x68>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d11e      	bne.n	80017c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_TIM_MspPostInit+0x70>)
 80017c0:	f000 fa38 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010000 	.word	0x40010000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181e:	f000 f89f 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 800182a:	2040      	movs	r0, #64	; 0x40
 800182c:	f000 fbb6 	bl	8001f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM2_IRQHandler+0x10>)
 800183a:	f001 fe93 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200000f4 	.word	0x200000f4

08001848 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM3_IRQHandler+0x10>)
 800184e:	f001 fe89 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000013c 	.word	0x2000013c

0800185c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800186e:	490e      	ldr	r1, [pc, #56]	; (80018a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001884:	4c0b      	ldr	r4, [pc, #44]	; (80018b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001892:	f7ff ffe3 	bl	800185c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f004 ff21 	bl	80066dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7fe fe1f 	bl	80004dc <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80018ac:	080070c8 	.word	0x080070c8
  ldr r2, =_sbss
 80018b0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80018b4:	200016b4 	.word	0x200016b4

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f947 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fe1e 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f95f 	bl	8001be2 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f927 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000024 	.word	0x20000024
 8001958:	2000002c 	.word	0x2000002c
 800195c:	20000028 	.word	0x20000028

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000002c 	.word	0x2000002c
 8001980:	200016b0 	.word	0x200016b0

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	200016b0 	.word	0x200016b0

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fff0 	bl	8001984 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffe0 	bl	8001984 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000002c 	.word	0x2000002c

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4906      	ldr	r1, [pc, #24]	; (8001a78 <__NVIC_EnableIRQ+0x34>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff2d 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff42 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff35 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00e      	b.n	8001c2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	795b      	ldrb	r3, [r3, #5]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d105      	bne.n	8001c22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fcad 	bl	800157c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e159      	b.n	8001f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 8148 	bne.w	8001efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d005      	beq.n	8001c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a2 	beq.w	8001efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a55      	ldr	r2, [pc, #340]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a51      	ldr	r2, [pc, #324]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x202>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_GPIO_Init+0x2f0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x1fe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_GPIO_Init+0x2f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x1fa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_GPIO_Init+0x2f8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x1f6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x1f2>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4934      	ldr	r1, [pc, #208]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a2e      	ldr	r2, [pc, #184]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f aea2 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43d9      	mvns	r1, r3
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	400b      	ands	r3, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f806 	bl	8001fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e267      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d075      	beq.n	80020ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffe:	4b88      	ldr	r3, [pc, #544]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00c      	beq.n	8002024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002012:	2b08      	cmp	r3, #8
 8002014:	d112      	bne.n	800203c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002016:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002022:	d10b      	bne.n	800203c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05b      	beq.n	80020e8 <HAL_RCC_OscConfig+0x108>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d157      	bne.n	80020e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e242      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d106      	bne.n	8002054 <HAL_RCC_OscConfig+0x74>
 8002046:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a75      	ldr	r2, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e01d      	b.n	8002090 <HAL_RCC_OscConfig+0xb0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x98>
 800205e:	4b70      	ldr	r3, [pc, #448]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6f      	ldr	r2, [pc, #444]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6c      	ldr	r2, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0xb0>
 8002078:	4b69      	ldr	r3, [pc, #420]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a68      	ldr	r2, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800207e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b66      	ldr	r3, [pc, #408]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800208a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fc74 	bl	8001984 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff fc70 	bl	8001984 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e207      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0xc0>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fc60 	bl	8001984 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff fc5c 	bl	8001984 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1f3      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0xe8>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d063      	beq.n	80021be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f6:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800210a:	2b08      	cmp	r3, #8
 800210c:	d11c      	bne.n	8002148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d116      	bne.n	8002148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_RCC_OscConfig+0x152>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1c7      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4937      	ldr	r1, [pc, #220]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	e03a      	b.n	80021be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002150:	4b34      	ldr	r3, [pc, #208]	; (8002224 <HAL_RCC_OscConfig+0x244>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff fc15 	bl	8001984 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215e:	f7ff fc11 	bl	8001984 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1a8      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4925      	ldr	r1, [pc, #148]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_OscConfig+0x244>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff fbf4 	bl	8001984 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a0:	f7ff fbf0 	bl	8001984 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e187      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d036      	beq.n	8002238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0x248>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff fbd4 	bl	8001984 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff fbd0 	bl	8001984 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e167      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x240>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x200>
 80021fe:	e01b      	b.n	8002238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_OscConfig+0x248>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff fbbd 	bl	8001984 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	e00e      	b.n	800222c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220e:	f7ff fbb9 	bl	8001984 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d907      	bls.n	800222c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e150      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
 8002220:	40023800 	.word	0x40023800
 8002224:	42470000 	.word	0x42470000
 8002228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b88      	ldr	r3, [pc, #544]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ea      	bne.n	800220e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8097 	beq.w	8002374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b7d      	ldr	r3, [pc, #500]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a7c      	ldr	r2, [pc, #496]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b7a      	ldr	r3, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b77      	ldr	r3, [pc, #476]	; (8002454 <HAL_RCC_OscConfig+0x474>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b74      	ldr	r3, [pc, #464]	; (8002454 <HAL_RCC_OscConfig+0x474>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a73      	ldr	r2, [pc, #460]	; (8002454 <HAL_RCC_OscConfig+0x474>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff fb79 	bl	8001984 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7ff fb75 	bl	8001984 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e10c      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <HAL_RCC_OscConfig+0x474>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x2ea>
 80022bc:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a63      	ldr	r2, [pc, #396]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x324>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x30c>
 80022d2:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a5e      	ldr	r2, [pc, #376]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a5b      	ldr	r2, [pc, #364]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0x324>
 80022ec:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a57      	ldr	r2, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a54      	ldr	r2, [pc, #336]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80022fe:	f023 0304 	bic.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff fb3a 	bl	8001984 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff fb36 	bl	8001984 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0cb      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232a:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ee      	beq.n	8002314 <HAL_RCC_OscConfig+0x334>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff fb24 	bl	8001984 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff fb20 	bl	8001984 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0b5      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002356:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ee      	bne.n	8002340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b39      	ldr	r3, [pc, #228]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	4a38      	ldr	r2, [pc, #224]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a1 	beq.w	80024c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800237e:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b08      	cmp	r3, #8
 8002388:	d05c      	beq.n	8002444 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d141      	bne.n	8002416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_OscConfig+0x478>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff faf4 	bl	8001984 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff faf0 	bl	8001984 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e087      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	019b      	lsls	r3, r3, #6
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	3b01      	subs	r3, #1
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	491b      	ldr	r1, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x478>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7ff fac9 	bl	8001984 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f6:	f7ff fac5 	bl	8001984 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e05c      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x416>
 8002414:	e054      	b.n	80024c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCC_OscConfig+0x478>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff fab2 	bl	8001984 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002424:	f7ff faae 	bl	8001984 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e045      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_OscConfig+0x470>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x444>
 8002442:	e03d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e038      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
 8002450:	40023800 	.word	0x40023800
 8002454:	40007000 	.word	0x40007000
 8002458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d028      	beq.n	80024bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d121      	bne.n	80024bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d11a      	bne.n	80024bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002494:	4293      	cmp	r3, r2
 8002496:	d111      	bne.n	80024bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	3b01      	subs	r3, #1
 80024a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cc      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90c      	bls.n	800250c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d044      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e067      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7ff f9e0 	bl	8001984 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff f9dc 	bl	8001984 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d20c      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f942 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00
 800268c:	40023800 	.word	0x40023800
 8002690:	08006b80 	.word	0x08006b80
 8002694:	20000024 	.word	0x20000024
 8002698:	20000028 	.word	0x20000028

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a0:	b090      	sub	sp, #64	; 0x40
 80026a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d00d      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x40>
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	f200 80a2 	bhi.w	800280a <HAL_RCC_GetSysClockFreq+0x16e>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d003      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ce:	e09c      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_GetSysClockFreq+0x184>)
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026d4:	e09c      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_GetSysClockFreq+0x188>)
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026da:	e099      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e6:	4b4d      	ldr	r3, [pc, #308]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d027      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	2200      	movs	r2, #0
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	627a      	str	r2, [r7, #36]	; 0x24
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002704:	2100      	movs	r1, #0
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_GetSysClockFreq+0x188>)
 8002708:	fb03 f201 	mul.w	r2, r3, r1
 800270c:	2300      	movs	r3, #0
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	4413      	add	r3, r2
 8002714:	4a43      	ldr	r2, [pc, #268]	; (8002824 <HAL_RCC_GetSysClockFreq+0x188>)
 8002716:	fba0 2102 	umull	r2, r1, r0, r2
 800271a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800271c:	62ba      	str	r2, [r7, #40]	; 0x28
 800271e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002720:	4413      	add	r3, r2
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002726:	2200      	movs	r2, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	61fa      	str	r2, [r7, #28]
 800272c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002730:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002734:	f7fd fd50 	bl	80001d8 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002740:	e055      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2200      	movs	r2, #0
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	617a      	str	r2, [r7, #20]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002754:	f04f 0b00 	mov.w	fp, #0
 8002758:	4652      	mov	r2, sl
 800275a:	465b      	mov	r3, fp
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	ebb2 080a 	subs.w	r8, r2, sl
 8002774:	eb63 090b 	sbc.w	r9, r3, fp
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002784:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002788:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800278c:	ebb2 0408 	subs.w	r4, r2, r8
 8002790:	eb63 0509 	sbc.w	r5, r3, r9
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	00eb      	lsls	r3, r5, #3
 800279e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	4614      	mov	r4, r2
 80027a6:	461d      	mov	r5, r3
 80027a8:	eb14 030a 	adds.w	r3, r4, sl
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	eb45 030b 	adc.w	r3, r5, fp
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c0:	4629      	mov	r1, r5
 80027c2:	028b      	lsls	r3, r1, #10
 80027c4:	4620      	mov	r0, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	4604      	mov	r4, r0
 80027ca:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80027ce:	4601      	mov	r1, r0
 80027d0:	028a      	lsls	r2, r1, #10
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	2200      	movs	r2, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	60fa      	str	r2, [r7, #12]
 80027de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e2:	f7fd fcf9 	bl	80001d8 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4613      	mov	r3, r2
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	3301      	adds	r3, #1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002808:	e002      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0x184>)
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800280e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002812:	4618      	mov	r0, r3
 8002814:	3740      	adds	r7, #64	; 0x40
 8002816:	46bd      	mov	sp, r7
 8002818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	017d7840 	.word	0x017d7840

08002828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07b      	b.n	8002932 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284a:	d009      	beq.n	8002860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
 8002852:	e005      	b.n	8002860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fe9e 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	ea42 0103 	orr.w	r1, r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0104 	and.w	r1, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f003 0210 	and.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b088      	sub	sp, #32
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_SPI_Transmit+0x22>
 8002958:	2302      	movs	r3, #2
 800295a:	e126      	b.n	8002baa <HAL_SPI_Transmit+0x270>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002964:	f7ff f80e 	bl	8001984 <HAL_GetTick>
 8002968:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d002      	beq.n	8002980 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800297e:	e10b      	b.n	8002b98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_SPI_Transmit+0x52>
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002990:	e102      	b.n	8002b98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2203      	movs	r2, #3
 8002996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	d10f      	bne.n	80029fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d007      	beq.n	8002a18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a20:	d14b      	bne.n	8002aba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Transmit+0xf6>
 8002a2a:	8afb      	ldrh	r3, [r7, #22]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d13e      	bne.n	8002aae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	1c9a      	adds	r2, r3, #2
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a54:	e02b      	b.n	8002aae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d112      	bne.n	8002a8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a88:	e011      	b.n	8002aae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a8a:	f7fe ff7b 	bl	8001984 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d803      	bhi.n	8002aa2 <HAL_SPI_Transmit+0x168>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d102      	bne.n	8002aa8 <HAL_SPI_Transmit+0x16e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aac:	e074      	b.n	8002b98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ce      	bne.n	8002a56 <HAL_SPI_Transmit+0x11c>
 8002ab8:	e04c      	b.n	8002b54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Transmit+0x18e>
 8002ac2:	8afb      	ldrh	r3, [r7, #22]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d140      	bne.n	8002b4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aee:	e02c      	b.n	8002b4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d113      	bne.n	8002b26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b24:	e011      	b.n	8002b4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b26:	f7fe ff2d 	bl	8001984 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d803      	bhi.n	8002b3e <HAL_SPI_Transmit+0x204>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d102      	bne.n	8002b44 <HAL_SPI_Transmit+0x20a>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b48:	e026      	b.n	8002b98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1cd      	bne.n	8002af0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fbcb 	bl	80032f4 <SPI_EndRxTxTransaction>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e000      	b.n	8002b98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b088      	sub	sp, #32
 8002bb6:	af02      	add	r7, sp, #8
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bce:	d112      	bne.n	8002bf6 <HAL_SPI_Receive+0x44>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002be0:	88fa      	ldrh	r2, [r7, #6]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f8f1 	bl	8002dd4 <HAL_SPI_TransmitReceive>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	e0ea      	b.n	8002dcc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_SPI_Receive+0x52>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0e3      	b.n	8002dcc <HAL_SPI_Receive+0x21a>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c0c:	f7fe feba 	bl	8001984 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c22:	e0ca      	b.n	8002dba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Receive+0x7e>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c34:	e0c1      	b.n	8002dba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7c:	d10f      	bne.n	8002c9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d007      	beq.n	8002cbc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d162      	bne.n	8002d8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cc4:	e02e      	b.n	8002d24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d115      	bne.n	8002d00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f103 020c 	add.w	r2, r3, #12
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cfe:	e011      	b.n	8002d24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d00:	f7fe fe40 	bl	8001984 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d803      	bhi.n	8002d18 <HAL_SPI_Receive+0x166>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_Receive+0x16c>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d22:	e04a      	b.n	8002dba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1cb      	bne.n	8002cc6 <HAL_SPI_Receive+0x114>
 8002d2e:	e031      	b.n	8002d94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d113      	bne.n	8002d66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d64:	e011      	b.n	8002d8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d66:	f7fe fe0d 	bl	8001984 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d803      	bhi.n	8002d7e <HAL_SPI_Receive+0x1cc>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d102      	bne.n	8002d84 <HAL_SPI_Receive+0x1d2>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d88:	e017      	b.n	8002dba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1cd      	bne.n	8002d30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fa45 	bl	8003228 <SPI_EndRxTransaction>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
 8002db6:	e000      	b.n	8002dba <HAL_SPI_Receive+0x208>
  }

error :
 8002db8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002de2:	2301      	movs	r3, #1
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x26>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e18a      	b.n	8003110 <HAL_SPI_TransmitReceive+0x33c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e02:	f7fe fdbf 	bl	8001984 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d00f      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x70>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2a:	d107      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x68>
 8002e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d003      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e42:	e15b      	b.n	80030fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_SPI_TransmitReceive+0x82>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_SPI_TransmitReceive+0x82>
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e5c:	e14e      	b.n	80030fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d003      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	887a      	ldrh	r2, [r7, #2]
 8002e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d007      	beq.n	8002ec6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ece:	d178      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x10a>
 8002ed8:	8b7b      	ldrh	r3, [r7, #26]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d166      	bne.n	8002fac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	1c9a      	adds	r2, r3, #2
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f02:	e053      	b.n	8002fac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d11b      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x176>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0x176>
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d113      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	881a      	ldrh	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	1c9a      	adds	r2, r3, #2
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d119      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x1b8>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d014      	beq.n	8002f8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f8c:	f7fe fcfa 	bl	8001984 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d807      	bhi.n	8002fac <HAL_SPI_TransmitReceive+0x1d8>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d003      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002faa:	e0a7      	b.n	80030fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1a6      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x130>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1a1      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x130>
 8002fc0:	e07c      	b.n	80030bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x1fc>
 8002fca:	8b7b      	ldrh	r3, [r7, #26]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d16b      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff6:	e057      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d11c      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x26c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x26c>
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d114      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d119      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x2ae>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d014      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800307e:	2301      	movs	r3, #1
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003082:	f7fe fc7f 	bl	8001984 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800308e:	429a      	cmp	r2, r3
 8003090:	d803      	bhi.n	800309a <HAL_SPI_TransmitReceive+0x2c6>
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d102      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x2cc>
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030a6:	e029      	b.n	80030fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1a2      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x224>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d19d      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f917 	bl	80032f4 <SPI_EndRxTxTransaction>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030d8:	e010      	b.n	80030fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	e000      	b.n	80030fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800310c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003110:	4618      	mov	r0, r3
 8003112:	3730      	adds	r7, #48	; 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003128:	f7fe fc2c 	bl	8001984 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003138:	f7fe fc24 	bl	8001984 <HAL_GetTick>
 800313c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	0d1b      	lsrs	r3, r3, #20
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314e:	e054      	b.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d050      	beq.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003158:	f7fe fc14 	bl	8001984 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	429a      	cmp	r2, r3
 8003166:	d902      	bls.n	800316e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d13d      	bne.n	80031ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800317c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003186:	d111      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003190:	d004      	beq.n	800319c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d107      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d10f      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e017      	b.n	800321a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	429a      	cmp	r2, r3
 8003216:	d19b      	bne.n	8003150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000024 	.word	0x20000024

08003228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323c:	d111      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d004      	beq.n	8003252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d107      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d12a      	bne.n	80032c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d012      	beq.n	800329c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff ff49 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02d      	beq.n	80032e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e026      	b.n	80032ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2101      	movs	r1, #1
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff36 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01a      	beq.n	80032e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e013      	b.n	80032ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2101      	movs	r1, #1
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff ff23 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e000      	b.n	80032ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <SPI_EndRxTxTransaction+0x7c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <SPI_EndRxTxTransaction+0x80>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0d5b      	lsrs	r3, r3, #21
 800330c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d112      	bne.n	8003346 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff fef4 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3b01      	subs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d0f2      	beq.n	8003346 <SPI_EndRxTxTransaction+0x52>
 8003360:	e000      	b.n	8003364 <SPI_EndRxTxTransaction+0x70>
        break;
 8003362:	bf00      	nop
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000024 	.word	0x20000024
 8003374:	165e9f81 	.word	0x165e9f81

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e041      	b.n	800340e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe f974 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fc70 	bl	8003c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e041      	b.n	80034ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fe f905 	bl	800164c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fc21 	bl	8003c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e041      	b.n	800354a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f839 	bl	8003552 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 fbd2 	bl	8003c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0202 	mvn.w	r2, #2
 8003590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb5d 	bl	8003c66 <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb50 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb5f 	bl	8003c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fb33 	bl	8003c66 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fb26 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb35 	bl	8003c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0208 	mvn.w	r2, #8
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2204      	movs	r2, #4
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fb09 	bl	8003c66 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fafc 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb0b 	bl	8003c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b10      	cmp	r3, #16
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2208      	movs	r2, #8
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fadf 	bl	8003c66 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fad2 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fae1 	bl	8003c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0201 	mvn.w	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 faad 	bl	8003c42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 ffd2 	bl	80046b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d107      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 faa5 	bl	8003c8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d10e      	bne.n	800376c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b20      	cmp	r3, #32
 800375a:	d107      	bne.n	800376c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0220 	mvn.w	r2, #32
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 ff9d 	bl	80046a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_IC_ConfigChannel+0x1e>
 800378e:	2302      	movs	r3, #2
 8003790:	e088      	b.n	80038a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f000 fd0c 	bl	80041cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 020c 	bic.w	r2, r2, #12
 80037c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6999      	ldr	r1, [r3, #24]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	619a      	str	r2, [r3, #24]
 80037d6:	e060      	b.n	800389a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d11c      	bne.n	8003818 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f000 fd81 	bl	80042f4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003800:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6999      	ldr	r1, [r3, #24]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	619a      	str	r2, [r3, #24]
 8003816:	e040      	b.n	800389a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11b      	bne.n	8003856 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f000 fdcc 	bl	80043ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 020c 	bic.w	r2, r2, #12
 8003840:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
 8003854:	e021      	b.n	800389a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d11c      	bne.n	8003896 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 fde8 	bl	8004440 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800387e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69d9      	ldr	r1, [r3, #28]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	021a      	lsls	r2, r3, #8
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
 8003894:	e001      	b.n	800389a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e0ae      	b.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	f200 809f 	bhi.w	8003a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003a19 	.word	0x08003a19
 80038e8:	08003a19 	.word	0x08003a19
 80038ec:	08003a19 	.word	0x08003a19
 80038f0:	08003955 	.word	0x08003955
 80038f4:	08003a19 	.word	0x08003a19
 80038f8:	08003a19 	.word	0x08003a19
 80038fc:	08003a19 	.word	0x08003a19
 8003900:	08003997 	.word	0x08003997
 8003904:	08003a19 	.word	0x08003a19
 8003908:	08003a19 	.word	0x08003a19
 800390c:	08003a19 	.word	0x08003a19
 8003910:	080039d7 	.word	0x080039d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fa3c 	bl	8003d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6999      	ldr	r1, [r3, #24]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
      break;
 8003952:	e064      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa82 	bl	8003e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]
      break;
 8003994:	e043      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 facb 	bl	8003f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0208 	orr.w	r2, r2, #8
 80039b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
      break;
 80039d4:	e023      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fb15 	bl	800400c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	61da      	str	r2, [r3, #28]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIM_ConfigClockSource+0x1c>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0b4      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x186>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d03e      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xd4>
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	f200 8087 	bhi.w	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	f000 8086 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x172>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d87f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d01a      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d87b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d050      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x11a>
 8003aa8:	2b60      	cmp	r3, #96	; 0x60
 8003aaa:	d877      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d03c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xfa>
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d873      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d058      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x13a>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d86f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d064      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d86b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d060      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d867      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d05a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	e062      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f000 fd01 	bl	80044ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	609a      	str	r2, [r3, #8]
      break;
 8003b02:	e04f      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f000 fcea 	bl	80044ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e03c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 fbae 	bl	8004298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fcb8 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e02c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 fc08 	bl	800436c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2160      	movs	r1, #96	; 0x60
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fca8 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 fb8e 	bl	8004298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fc98 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e00c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 fc8f 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e031      	b.n	8003c3a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fa5d 	bl	80040a8 <TIM_SlaveTimer_SetConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e018      	b.n	8003c3a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c16:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c26:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <TIM_Base_SetConfig+0xe0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00f      	beq.n	8003cd4 <TIM_Base_SetConfig+0x38>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d00b      	beq.n	8003cd4 <TIM_Base_SetConfig+0x38>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a30      	ldr	r2, [pc, #192]	; (8003d80 <TIM_Base_SetConfig+0xe4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_Base_SetConfig+0x38>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a2f      	ldr	r2, [pc, #188]	; (8003d84 <TIM_Base_SetConfig+0xe8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_Base_SetConfig+0x38>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a2e      	ldr	r2, [pc, #184]	; (8003d88 <TIM_Base_SetConfig+0xec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d108      	bne.n	8003ce6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a24      	ldr	r2, [pc, #144]	; (8003d7c <TIM_Base_SetConfig+0xe0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01b      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf4:	d017      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <TIM_Base_SetConfig+0xe4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <TIM_Base_SetConfig+0xe8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <TIM_Base_SetConfig+0xec>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <TIM_Base_SetConfig+0xf0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <TIM_Base_SetConfig+0xf4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x8a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <TIM_Base_SetConfig+0xf8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <TIM_Base_SetConfig+0xe0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	615a      	str	r2, [r3, #20]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <TIM_OC1_SetConfig+0xc8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10c      	bne.n	8003e0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0308 	bic.w	r3, r3, #8
 8003dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <TIM_OC1_SetConfig+0xc8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000

08003e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0210 	bic.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0320 	bic.w	r3, r3, #32
 8003eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <TIM_OC2_SetConfig+0xd0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10d      	bne.n	8003ee0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <TIM_OC2_SetConfig+0xd0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d113      	bne.n	8003f10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	40010000 	.word	0x40010000

08003f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <TIM_OC3_SetConfig+0xd0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10d      	bne.n	8003fb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <TIM_OC3_SetConfig+0xd0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d113      	bne.n	8003fe2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	621a      	str	r2, [r3, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000

0800400c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	031b      	lsls	r3, r3, #12
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <TIM_OC4_SetConfig+0x98>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d109      	bne.n	8004080 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	019b      	lsls	r3, r3, #6
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000

080040a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b70      	cmp	r3, #112	; 0x70
 80040f0:	d01a      	beq.n	8004128 <TIM_SlaveTimer_SetConfig+0x80>
 80040f2:	2b70      	cmp	r3, #112	; 0x70
 80040f4:	d860      	bhi.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
 80040f6:	2b60      	cmp	r3, #96	; 0x60
 80040f8:	d054      	beq.n	80041a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80040fa:	2b60      	cmp	r3, #96	; 0x60
 80040fc:	d85c      	bhi.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
 80040fe:	2b50      	cmp	r3, #80	; 0x50
 8004100:	d046      	beq.n	8004190 <TIM_SlaveTimer_SetConfig+0xe8>
 8004102:	2b50      	cmp	r3, #80	; 0x50
 8004104:	d858      	bhi.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d019      	beq.n	800413e <TIM_SlaveTimer_SetConfig+0x96>
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d854      	bhi.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
 800410e:	2b30      	cmp	r3, #48	; 0x30
 8004110:	d055      	beq.n	80041be <TIM_SlaveTimer_SetConfig+0x116>
 8004112:	2b30      	cmp	r3, #48	; 0x30
 8004114:	d850      	bhi.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
 8004116:	2b20      	cmp	r3, #32
 8004118:	d051      	beq.n	80041be <TIM_SlaveTimer_SetConfig+0x116>
 800411a:	2b20      	cmp	r3, #32
 800411c:	d84c      	bhi.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04d      	beq.n	80041be <TIM_SlaveTimer_SetConfig+0x116>
 8004122:	2b10      	cmp	r3, #16
 8004124:	d04b      	beq.n	80041be <TIM_SlaveTimer_SetConfig+0x116>
 8004126:	e047      	b.n	80041b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68d9      	ldr	r1, [r3, #12]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f000 f9d8 	bl	80044ec <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800413c:	e040      	b.n	80041c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d101      	bne.n	800414a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e03b      	b.n	80041c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004170:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
      break;
 800418e:	e017      	b.n	80041c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	461a      	mov	r2, r3
 800419e:	f000 f87b 	bl	8004298 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80041a2:	e00d      	b.n	80041c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f000 f8db 	bl	800436c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80041b6:	e003      	b.n	80041c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
      break;
 80041bc:	e000      	b.n	80041c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80041be:	bf00      	nop
  }

  return status;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a23      	ldr	r2, [pc, #140]	; (8004284 <TIM_TI1_SetConfig+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d00f      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a20      	ldr	r2, [pc, #128]	; (8004288 <TIM_TI1_SetConfig+0xbc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <TIM_TI1_SetConfig+0xc0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <TIM_TI1_SetConfig+0xc4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_TI1_SetConfig+0xc8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <TIM_TI1_SetConfig+0x5a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <TIM_TI1_SetConfig+0x5c>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e003      	b.n	8004246 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	b2db      	uxtb	r3, r3
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 030a 	bic.w	r3, r3, #10
 8004260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 030a 	and.w	r3, r3, #10
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	40010000 	.word	0x40010000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40014000 	.word	0x40014000

08004298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0201 	bic.w	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 030a 	bic.w	r3, r3, #10
 80042d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0210 	bic.w	r2, r3, #16
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004332:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	031b      	lsls	r3, r3, #12
 8004338:	b29b      	uxth	r3, r3
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 0210 	bic.w	r2, r3, #16
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004396:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	031b      	lsls	r3, r3, #12
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b087      	sub	sp, #28
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	b2db      	uxtb	r3, r3
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800441a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800447e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	031b      	lsls	r3, r3, #12
 8004484:	b29b      	uxth	r3, r3
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004492:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	031b      	lsls	r3, r3, #12
 8004498:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f043 0307 	orr.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	609a      	str	r2, [r3, #8]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	431a      	orrs	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
	...

0800452c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e050      	b.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d013      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a14      	ldr	r2, [pc, #80]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10c      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40014000 	.word	0x40014000

08004604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800461c:	2302      	movs	r3, #2
 800461e:	e03d      	b.n	800469c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
	...

080046cc <AES_keyschedule_enc_LL>:
 80046cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046d0:	1092      	asrs	r2, r2, #2
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	b084      	sub	sp, #16
 80046d6:	dd06      	ble.n	80046e6 <AES_keyschedule_enc_LL+0x1a>
 80046d8:	0095      	lsls	r5, r2, #2
 80046da:	2300      	movs	r3, #0
 80046dc:	58c4      	ldr	r4, [r0, r3]
 80046de:	50cc      	str	r4, [r1, r3]
 80046e0:	3304      	adds	r3, #4
 80046e2:	42ab      	cmp	r3, r5
 80046e4:	d1fa      	bne.n	80046dc <AES_keyschedule_enc_LL+0x10>
 80046e6:	2a06      	cmp	r2, #6
 80046e8:	d007      	beq.n	80046fa <AES_keyschedule_enc_LL+0x2e>
 80046ea:	2a08      	cmp	r2, #8
 80046ec:	d06c      	beq.n	80047c8 <AES_keyschedule_enc_LL+0xfc>
 80046ee:	2a04      	cmp	r2, #4
 80046f0:	d03a      	beq.n	8004768 <AES_keyschedule_enc_LL+0x9c>
 80046f2:	b004      	add	sp, #16
 80046f4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046f8:	4770      	bx	lr
 80046fa:	f8df c190 	ldr.w	ip, [pc, #400]	; 800488c <AES_keyschedule_enc_LL+0x1c0>
 80046fe:	684c      	ldr	r4, [r1, #4]
 8004700:	688d      	ldr	r5, [r1, #8]
 8004702:	68c8      	ldr	r0, [r1, #12]
 8004704:	680e      	ldr	r6, [r1, #0]
 8004706:	4b60      	ldr	r3, [pc, #384]	; (8004888 <AES_keyschedule_enc_LL+0x1bc>)
 8004708:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 800470c:	e005      	b.n	800471a <AES_keyschedule_enc_LL+0x4e>
 800470e:	690f      	ldr	r7, [r1, #16]
 8004710:	4047      	eors	r7, r0
 8004712:	407a      	eors	r2, r7
 8004714:	62ca      	str	r2, [r1, #44]	; 0x2c
 8004716:	628f      	str	r7, [r1, #40]	; 0x28
 8004718:	3118      	adds	r1, #24
 800471a:	694a      	ldr	r2, [r1, #20]
 800471c:	f85c af04 	ldr.w	sl, [ip, #4]!
 8004720:	fa5f f982 	uxtb.w	r9, r2
 8004724:	0e17      	lsrs	r7, r2, #24
 8004726:	f813 9009 	ldrb.w	r9, [r3, r9]
 800472a:	5ddf      	ldrb	r7, [r3, r7]
 800472c:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8004730:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8004734:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8004738:	f813 b00b 	ldrb.w	fp, [r3, fp]
 800473c:	f813 9009 	ldrb.w	r9, [r3, r9]
 8004740:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8004744:	ea86 060a 	eor.w	r6, r6, sl
 8004748:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 800474c:	407e      	eors	r6, r7
 800474e:	4074      	eors	r4, r6
 8004750:	4065      	eors	r5, r4
 8004752:	4068      	eors	r0, r5
 8004754:	4541      	cmp	r1, r8
 8004756:	6248      	str	r0, [r1, #36]	; 0x24
 8004758:	620d      	str	r5, [r1, #32]
 800475a:	61cc      	str	r4, [r1, #28]
 800475c:	618e      	str	r6, [r1, #24]
 800475e:	d1d6      	bne.n	800470e <AES_keyschedule_enc_LL+0x42>
 8004760:	b004      	add	sp, #16
 8004762:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004766:	4770      	bx	lr
 8004768:	4608      	mov	r0, r1
 800476a:	4f48      	ldr	r7, [pc, #288]	; (800488c <AES_keyschedule_enc_LL+0x1c0>)
 800476c:	f850 4b90 	ldr.w	r4, [r0], #144
 8004770:	68ca      	ldr	r2, [r1, #12]
 8004772:	684d      	ldr	r5, [r1, #4]
 8004774:	688e      	ldr	r6, [r1, #8]
 8004776:	4b44      	ldr	r3, [pc, #272]	; (8004888 <AES_keyschedule_enc_LL+0x1bc>)
 8004778:	e000      	b.n	800477c <AES_keyschedule_enc_LL+0xb0>
 800477a:	3110      	adds	r1, #16
 800477c:	fa5f f982 	uxtb.w	r9, r2
 8004780:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8004784:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8004788:	f813 b009 	ldrb.w	fp, [r3, r9]
 800478c:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8004790:	f813 a008 	ldrb.w	sl, [r3, r8]
 8004794:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8004798:	f3c2 2907 	ubfx	r9, r2, #8, #8
 800479c:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 80047a0:	f813 9009 	ldrb.w	r9, [r3, r9]
 80047a4:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 80047a8:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80047ac:	ea84 0408 	eor.w	r4, r4, r8
 80047b0:	ea84 040c 	eor.w	r4, r4, ip
 80047b4:	4065      	eors	r5, r4
 80047b6:	406e      	eors	r6, r5
 80047b8:	4072      	eors	r2, r6
 80047ba:	4281      	cmp	r1, r0
 80047bc:	61ca      	str	r2, [r1, #28]
 80047be:	618e      	str	r6, [r1, #24]
 80047c0:	614d      	str	r5, [r1, #20]
 80047c2:	610c      	str	r4, [r1, #16]
 80047c4:	d1d9      	bne.n	800477a <AES_keyschedule_enc_LL+0xae>
 80047c6:	e794      	b.n	80046f2 <AES_keyschedule_enc_LL+0x26>
 80047c8:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <AES_keyschedule_enc_LL+0x1bc>)
 80047ca:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800488c <AES_keyschedule_enc_LL+0x1c0>
 80047ce:	68ca      	ldr	r2, [r1, #12]
 80047d0:	688c      	ldr	r4, [r1, #8]
 80047d2:	684d      	ldr	r5, [r1, #4]
 80047d4:	f8d1 c000 	ldr.w	ip, [r1]
 80047d8:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 80047dc:	4699      	mov	r9, r3
 80047de:	9003      	str	r0, [sp, #12]
 80047e0:	e023      	b.n	800482a <AES_keyschedule_enc_LL+0x15e>
 80047e2:	f819 b00b 	ldrb.w	fp, [r9, fp]
 80047e6:	f819 7007 	ldrb.w	r7, [r9, r7]
 80047ea:	f819 8008 	ldrb.w	r8, [r9, r8]
 80047ee:	9702      	str	r7, [sp, #8]
 80047f0:	9f01      	ldr	r7, [sp, #4]
 80047f2:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 80047f6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80047fa:	f819 6007 	ldrb.w	r6, [r9, r7]
 80047fe:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 8004802:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 8004806:	690e      	ldr	r6, [r1, #16]
 8004808:	694f      	ldr	r7, [r1, #20]
 800480a:	ea88 0806 	eor.w	r8, r8, r6
 800480e:	698e      	ldr	r6, [r1, #24]
 8004810:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 8004814:	ea88 0707 	eor.w	r7, r8, r7
 8004818:	ea87 0b06 	eor.w	fp, r7, r6
 800481c:	ea8b 0000 	eor.w	r0, fp, r0
 8004820:	634f      	str	r7, [r1, #52]	; 0x34
 8004822:	63c8      	str	r0, [r1, #60]	; 0x3c
 8004824:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8004828:	3120      	adds	r1, #32
 800482a:	69c8      	ldr	r0, [r1, #28]
 800482c:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 8004830:	b2c7      	uxtb	r7, r0
 8004832:	0e06      	lsrs	r6, r0, #24
 8004834:	f813 b007 	ldrb.w	fp, [r3, r7]
 8004838:	5d9e      	ldrb	r6, [r3, r6]
 800483a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800483e:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8004842:	f813 b007 	ldrb.w	fp, [r3, r7]
 8004846:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800484a:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 800484e:	5ddf      	ldrb	r7, [r3, r7]
 8004850:	ea8c 0c08 	eor.w	ip, ip, r8
 8004854:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8004858:	ea8c 0c06 	eor.w	ip, ip, r6
 800485c:	ea8c 0505 	eor.w	r5, ip, r5
 8004860:	406c      	eors	r4, r5
 8004862:	4062      	eors	r2, r4
 8004864:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8004868:	9601      	str	r6, [sp, #4]
 800486a:	9e03      	ldr	r6, [sp, #12]
 800486c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800486e:	42b1      	cmp	r1, r6
 8004870:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8004874:	fa5f f882 	uxtb.w	r8, r2
 8004878:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800487c:	628c      	str	r4, [r1, #40]	; 0x28
 800487e:	624d      	str	r5, [r1, #36]	; 0x24
 8004880:	f8c1 c020 	str.w	ip, [r1, #32]
 8004884:	d1ad      	bne.n	80047e2 <AES_keyschedule_enc_LL+0x116>
 8004886:	e734      	b.n	80046f2 <AES_keyschedule_enc_LL+0x26>
 8004888:	08006fb8 	.word	0x08006fb8
 800488c:	08006b8c 	.word	0x08006b8c

08004890 <AES_general_SW_enc>:
 8004890:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004894:	4cbe      	ldr	r4, [pc, #760]	; (8004b90 <AES_general_SW_enc+0x300>)
 8004896:	4dbf      	ldr	r5, [pc, #764]	; (8004b94 <AES_general_SW_enc+0x304>)
 8004898:	b08a      	sub	sp, #40	; 0x28
 800489a:	2700      	movs	r7, #0
 800489c:	2601      	movs	r6, #1
 800489e:	9709      	str	r7, [sp, #36]	; 0x24
 80048a0:	6026      	str	r6, [r4, #0]
 80048a2:	6824      	ldr	r4, [r4, #0]
 80048a4:	9409      	str	r4, [sp, #36]	; 0x24
 80048a6:	682c      	ldr	r4, [r5, #0]
 80048a8:	9409      	str	r4, [sp, #36]	; 0x24
 80048aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80048ac:	9107      	str	r1, [sp, #28]
 80048ae:	10db      	asrs	r3, r3, #3
 80048b0:	3303      	adds	r3, #3
 80048b2:	3401      	adds	r4, #1
 80048b4:	9306      	str	r3, [sp, #24]
 80048b6:	f000 8151 	beq.w	8004b5c <AES_general_SW_enc+0x2cc>
 80048ba:	6804      	ldr	r4, [r0, #0]
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	6840      	ldr	r0, [r0, #4]
 80048c0:	6853      	ldr	r3, [r2, #4]
 80048c2:	ea81 0b04 	eor.w	fp, r1, r4
 80048c6:	4058      	eors	r0, r3
 80048c8:	9003      	str	r0, [sp, #12]
 80048ca:	46d9      	mov	r9, fp
 80048cc:	46dc      	mov	ip, fp
 80048ce:	4bb2      	ldr	r3, [pc, #712]	; (8004b98 <AES_general_SW_enc+0x308>)
 80048d0:	9c03      	ldr	r4, [sp, #12]
 80048d2:	4698      	mov	r8, r3
 80048d4:	e067      	b.n	80049a6 <AES_general_SW_enc+0x116>
 80048d6:	ea4f 611b 	mov.w	r1, fp, lsr #24
 80048da:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80048de:	0e07      	lsrs	r7, r0, #24
 80048e0:	ea4f 651a 	mov.w	r5, sl, lsr #24
 80048e4:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 80048e8:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 80048ec:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 80048f0:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 80048f4:	e892 0022 	ldmia.w	r2, {r1, r5}
 80048f8:	404e      	eors	r6, r1
 80048fa:	fa5f f18a 	uxtb.w	r1, sl
 80048fe:	ea89 0505 	eor.w	r5, r9, r5
 8004902:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 8004906:	6891      	ldr	r1, [r2, #8]
 8004908:	ea8c 0c01 	eor.w	ip, ip, r1
 800490c:	68d1      	ldr	r1, [r2, #12]
 800490e:	404f      	eors	r7, r1
 8004910:	9704      	str	r7, [sp, #16]
 8004912:	fa5f f78b 	uxtb.w	r7, fp
 8004916:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 800491a:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 800491e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8004922:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 8004926:	b2e5      	uxtb	r5, r4
 8004928:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800492c:	b2c1      	uxtb	r1, r0
 800492e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004932:	9405      	str	r4, [sp, #20]
 8004934:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004938:	9c04      	ldr	r4, [sp, #16]
 800493a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800493e:	9703      	str	r7, [sp, #12]
 8004940:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 8004944:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004948:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800494c:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 8004950:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8004954:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 8004958:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 800495c:	f3ca 2007 	ubfx	r0, sl, #8, #8
 8004960:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8004964:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 8004968:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 800496c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004970:	f3cb 4007 	ubfx	r0, fp, #16, #8
 8004974:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004978:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 800497c:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8004980:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004984:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8004988:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 800498c:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 8004990:	9805      	ldr	r0, [sp, #20]
 8004992:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 8004996:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 800499a:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 800499e:	9703      	str	r7, [sp, #12]
 80049a0:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 80049a4:	463c      	mov	r4, r7
 80049a6:	0e21      	lsrs	r1, r4, #24
 80049a8:	ea4f 661c 	mov.w	r6, ip, lsr #24
 80049ac:	ea4f 6419 	mov.w	r4, r9, lsr #24
 80049b0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80049b4:	6911      	ldr	r1, [r2, #16]
 80049b6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80049ba:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 80049be:	6954      	ldr	r4, [r2, #20]
 80049c0:	404d      	eors	r5, r1
 80049c2:	ea4f 601b 	mov.w	r0, fp, lsr #24
 80049c6:	fa5f f189 	uxtb.w	r1, r9
 80049ca:	407c      	eors	r4, r7
 80049cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80049d0:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 80049d4:	6991      	ldr	r1, [r2, #24]
 80049d6:	4048      	eors	r0, r1
 80049d8:	69d1      	ldr	r1, [r2, #28]
 80049da:	404e      	eors	r6, r1
 80049dc:	9604      	str	r6, [sp, #16]
 80049de:	9e03      	ldr	r6, [sp, #12]
 80049e0:	9904      	ldr	r1, [sp, #16]
 80049e2:	fa5f fa86 	uxtb.w	sl, r6
 80049e6:	fa5f f68b 	uxtb.w	r6, fp
 80049ea:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80049ee:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80049f2:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 80049f6:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 80049fa:	f3cc 4507 	ubfx	r5, ip, #16, #8
 80049fe:	fa5f f48c 	uxtb.w	r4, ip
 8004a02:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8004a06:	9702      	str	r7, [sp, #8]
 8004a08:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004a0c:	9705      	str	r7, [sp, #20]
 8004a0e:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 8004a12:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8004a16:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004a1a:	9f06      	ldr	r7, [sp, #24]
 8004a1c:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 8004a20:	9601      	str	r6, [sp, #4]
 8004a22:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8004a26:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8004a2a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8004a2e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004a32:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8004a36:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8004a3a:	9604      	str	r6, [sp, #16]
 8004a3c:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8004a40:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004a44:	3f01      	subs	r7, #1
 8004a46:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 8004a4a:	9706      	str	r7, [sp, #24]
 8004a4c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004a50:	9904      	ldr	r1, [sp, #16]
 8004a52:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 8004a56:	f3cb 4507 	ubfx	r5, fp, #16, #8
 8004a5a:	f3cb 2907 	ubfx	r9, fp, #8, #8
 8004a5e:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 8004a62:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 8004a66:	9901      	ldr	r1, [sp, #4]
 8004a68:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 8004a6c:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 8004a70:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 8004a74:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 8004a78:	9f06      	ldr	r7, [sp, #24]
 8004a7a:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 8004a7e:	9e05      	ldr	r6, [sp, #20]
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8004a86:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 8004a8a:	f102 0220 	add.w	r2, r2, #32
 8004a8e:	f73f af22 	bgt.w	80048d6 <AES_general_SW_enc+0x46>
 8004a92:	4b42      	ldr	r3, [pc, #264]	; (8004b9c <AES_general_SW_enc+0x30c>)
 8004a94:	6811      	ldr	r1, [r2, #0]
 8004a96:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8004a9a:	fa5f f68a 	uxtb.w	r6, sl
 8004a9e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004aa2:	f813 8007 	ldrb.w	r8, [r3, r7]
 8004aa6:	5d9f      	ldrb	r7, [r3, r6]
 8004aa8:	5d5d      	ldrb	r5, [r3, r5]
 8004aaa:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8004aae:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 8004ab2:	f813 c006 	ldrb.w	ip, [r3, r6]
 8004ab6:	0e27      	lsrs	r7, r4, #24
 8004ab8:	fa5f f68b 	uxtb.w	r6, fp
 8004abc:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 8004ac0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8004ac4:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 8004ac8:	ea88 0101 	eor.w	r1, r8, r1
 8004acc:	f813 c007 	ldrb.w	ip, [r3, r7]
 8004ad0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004ad4:	5d9f      	ldrb	r7, [r3, r6]
 8004ad6:	5d5e      	ldrb	r6, [r3, r5]
 8004ad8:	f8c8 1000 	str.w	r1, [r8]
 8004adc:	f3ca 2507 	ubfx	r5, sl, #8, #8
 8004ae0:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8004ae4:	f813 8005 	ldrb.w	r8, [r3, r5]
 8004ae8:	6851      	ldr	r1, [r2, #4]
 8004aea:	0e07      	lsrs	r7, r0, #24
 8004aec:	b2e5      	uxtb	r5, r4
 8004aee:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 8004af2:	f3ca 4607 	ubfx	r6, sl, #16, #8
 8004af6:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 8004afa:	5ddf      	ldrb	r7, [r3, r7]
 8004afc:	f813 9006 	ldrb.w	r9, [r3, r6]
 8004b00:	5d5d      	ldrb	r5, [r3, r5]
 8004b02:	ea8c 0101 	eor.w	r1, ip, r1
 8004b06:	f3cb 2607 	ubfx	r6, fp, #8, #8
 8004b0a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004b0e:	5d9e      	ldrb	r6, [r3, r6]
 8004b10:	f8cc 1004 	str.w	r1, [ip, #4]
 8004b14:	b2c0      	uxtb	r0, r0
 8004b16:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 8004b1a:	ea4f 671a 	mov.w	r7, sl, lsr #24
 8004b1e:	f813 8000 	ldrb.w	r8, [r3, r0]
 8004b22:	6890      	ldr	r0, [r2, #8]
 8004b24:	5ddf      	ldrb	r7, [r3, r7]
 8004b26:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8004b2a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8004b2e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004b32:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8004b36:	4045      	eors	r5, r0
 8004b38:	5c58      	ldrb	r0, [r3, r1]
 8004b3a:	f8cc 5008 	str.w	r5, [ip, #8]
 8004b3e:	5d19      	ldrb	r1, [r3, r4]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 8004b46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004b4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b4e:	4053      	eors	r3, r2
 8004b50:	f8cc 300c 	str.w	r3, [ip, #12]
 8004b54:	b00a      	add	sp, #40	; 0x28
 8004b56:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b5a:	4770      	bx	lr
 8004b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f47f aea7 	bne.w	80048ba <AES_general_SW_enc+0x2a>
 8004b6c:	6803      	ldr	r3, [r0, #0]
 8004b6e:	6815      	ldr	r5, [r2, #0]
 8004b70:	6847      	ldr	r7, [r0, #4]
 8004b72:	6886      	ldr	r6, [r0, #8]
 8004b74:	6854      	ldr	r4, [r2, #4]
 8004b76:	68c0      	ldr	r0, [r0, #12]
 8004b78:	6891      	ldr	r1, [r2, #8]
 8004b7a:	406b      	eors	r3, r5
 8004b7c:	9303      	str	r3, [sp, #12]
 8004b7e:	68d3      	ldr	r3, [r2, #12]
 8004b80:	ea84 0c07 	eor.w	ip, r4, r7
 8004b84:	ea81 0b06 	eor.w	fp, r1, r6
 8004b88:	ea83 0900 	eor.w	r9, r3, r0
 8004b8c:	e69f      	b.n	80048ce <AES_general_SW_enc+0x3e>
 8004b8e:	bf00      	nop
 8004b90:	40023008 	.word	0x40023008
 8004b94:	40023000 	.word	0x40023000
 8004b98:	08006bb8 	.word	0x08006bb8
 8004b9c:	08006fb8 	.word	0x08006fb8

08004ba0 <DRBG_AES128_Block_cipher_df.constprop.37>:
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	b0ff      	sub	sp, #508	; 0x1fc
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	f101 0519 	add.w	r5, r1, #25
 8004bac:	4606      	mov	r6, r0
 8004bae:	9201      	str	r2, [sp, #4]
 8004bb0:	499c      	ldr	r1, [pc, #624]	; (8004e24 <DRBG_AES128_Block_cipher_df.constprop.37+0x284>)
 8004bb2:	22b0      	movs	r2, #176	; 0xb0
 8004bb4:	a852      	add	r0, sp, #328	; 0x148
 8004bb6:	f001 fdb5 	bl	8006724 <memcpy>
 8004bba:	f015 080f 	ands.w	r8, r5, #15
 8004bbe:	ea4f 2214 	mov.w	r2, r4, lsr #8
 8004bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004bc6:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8004bca:	f04f 0320 	mov.w	r3, #32
 8004bce:	bf18      	it	ne
 8004bd0:	f1c8 0810 	rsbne	r8, r8, #16
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8004bda:	f04f 0600 	mov.w	r6, #0
 8004bde:	4622      	mov	r2, r4
 8004be0:	a810      	add	r0, sp, #64	; 0x40
 8004be2:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 8004be6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8004bea:	462f      	mov	r7, r5
 8004bec:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 8004bf0:	bf18      	it	ne
 8004bf2:	eb05 0708 	addne.w	r7, r5, r8
 8004bf6:	f88d e038 	strb.w	lr, [sp, #56]	; 0x38
 8004bfa:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
 8004bfe:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
 8004c02:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8004c06:	f001 fd8d 	bl	8006724 <memcpy>
 8004c0a:	ab0a      	add	r3, sp, #40	; 0x28
 8004c0c:	441c      	add	r4, r3
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	7623      	strb	r3, [r4, #24]
 8004c12:	f1b8 0f00 	cmp.w	r8, #0
 8004c16:	d005      	beq.n	8004c24 <DRBG_AES128_Block_cipher_df.constprop.37+0x84>
 8004c18:	a80a      	add	r0, sp, #40	; 0x28
 8004c1a:	4428      	add	r0, r5
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4642      	mov	r2, r8
 8004c20:	f001 fd8e 	bl	8006740 <memset>
 8004c24:	2300      	movs	r3, #0
 8004c26:	093f      	lsrs	r7, r7, #4
 8004c28:	930a      	str	r3, [sp, #40]	; 0x28
 8004c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	930d      	str	r3, [sp, #52]	; 0x34
 8004c32:	9303      	str	r3, [sp, #12]
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	9305      	str	r3, [sp, #20]
 8004c38:	f000 80ec 	beq.w	8004e14 <DRBG_AES128_Block_cipher_df.constprop.37+0x274>
 8004c3c:	46b8      	mov	r8, r7
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	461e      	mov	r6, r3
 8004c46:	ac0a      	add	r4, sp, #40	; 0x28
 8004c48:	ad26      	add	r5, sp, #152	; 0x98
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	e003      	b.n	8004c56 <DRBG_AES128_Block_cipher_df.constprop.37+0xb6>
 8004c4e:	9a02      	ldr	r2, [sp, #8]
 8004c50:	9903      	ldr	r1, [sp, #12]
 8004c52:	9804      	ldr	r0, [sp, #16]
 8004c54:	9f05      	ldr	r7, [sp, #20]
 8004c56:	7863      	ldrb	r3, [r4, #1]
 8004c58:	f894 e000 	ldrb.w	lr, [r4]
 8004c5c:	f894 a009 	ldrb.w	sl, [r4, #9]
 8004c60:	f894 900d 	ldrb.w	r9, [r4, #13]
 8004c64:	f894 c005 	ldrb.w	ip, [r4, #5]
 8004c68:	f894 b004 	ldrb.w	fp, [r4, #4]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8004c72:	f894 e003 	ldrb.w	lr, [r4, #3]
 8004c76:	ea43 030e 	orr.w	r3, r3, lr
 8004c7a:	f894 e008 	ldrb.w	lr, [r4, #8]
 8004c7e:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8004c82:	ea4a 6a0e 	orr.w	sl, sl, lr, lsl #24
 8004c86:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8004c8a:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8004c8e:	ea49 690e 	orr.w	r9, r9, lr, lsl #24
 8004c92:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004c96:	f894 e007 	ldrb.w	lr, [r4, #7]
 8004c9a:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
 8004c9e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004ca2:	f894 b002 	ldrb.w	fp, [r4, #2]
 8004ca6:	f894 e00b 	ldrb.w	lr, [r4, #11]
 8004caa:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 8004cae:	ea4a 0a0e 	orr.w	sl, sl, lr
 8004cb2:	f894 e00f 	ldrb.w	lr, [r4, #15]
 8004cb6:	405a      	eors	r2, r3
 8004cb8:	ea49 090e 	orr.w	r9, r9, lr
 8004cbc:	79a3      	ldrb	r3, [r4, #6]
 8004cbe:	f894 e00a 	ldrb.w	lr, [r4, #10]
 8004cc2:	602a      	str	r2, [r5, #0]
 8004cc4:	7ba2      	ldrb	r2, [r4, #14]
 8004cc6:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
 8004cca:	ea49 2202 	orr.w	r2, r9, r2, lsl #8
 8004cce:	ea4a 2e0e 	orr.w	lr, sl, lr, lsl #8
 8004cd2:	ea81 0c0c 	eor.w	ip, r1, ip
 8004cd6:	ea80 0e0e 	eor.w	lr, r0, lr
 8004cda:	4057      	eors	r7, r2
 8004cdc:	2310      	movs	r3, #16
 8004cde:	3601      	adds	r6, #1
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	a902      	add	r1, sp, #8
 8004ce4:	aa52      	add	r2, sp, #328	; 0x148
 8004ce6:	f8c5 c004 	str.w	ip, [r5, #4]
 8004cea:	f8c5 e008 	str.w	lr, [r5, #8]
 8004cee:	60ef      	str	r7, [r5, #12]
 8004cf0:	441c      	add	r4, r3
 8004cf2:	f7ff fdcd 	bl	8004890 <AES_general_SW_enc>
 8004cf6:	4546      	cmp	r6, r8
 8004cf8:	d1a9      	bne.n	8004c4e <DRBG_AES128_Block_cipher_df.constprop.37+0xae>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2401      	movs	r4, #1
 8004cfe:	f10d 0e18 	add.w	lr, sp, #24
 8004d02:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
 8004d06:	4647      	mov	r7, r8
 8004d08:	4613      	mov	r3, r2
 8004d0a:	9206      	str	r2, [sp, #24]
 8004d0c:	9207      	str	r2, [sp, #28]
 8004d0e:	9208      	str	r2, [sp, #32]
 8004d10:	9209      	str	r2, [sp, #36]	; 0x24
 8004d12:	4610      	mov	r0, r2
 8004d14:	4611      	mov	r1, r2
 8004d16:	4616      	mov	r6, r2
 8004d18:	ac0a      	add	r4, sp, #40	; 0x28
 8004d1a:	f8cd e000 	str.w	lr, [sp]
 8004d1e:	e003      	b.n	8004d28 <DRBG_AES128_Block_cipher_df.constprop.37+0x188>
 8004d20:	9a06      	ldr	r2, [sp, #24]
 8004d22:	9907      	ldr	r1, [sp, #28]
 8004d24:	9808      	ldr	r0, [sp, #32]
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	f894 8001 	ldrb.w	r8, [r4, #1]
 8004d2c:	f894 9000 	ldrb.w	r9, [r4]
 8004d30:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8004d34:	f894 e005 	ldrb.w	lr, [r4, #5]
 8004d38:	f894 b004 	ldrb.w	fp, [r4, #4]
 8004d3c:	f894 a009 	ldrb.w	sl, [r4, #9]
 8004d40:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8004d44:	ea48 6809 	orr.w	r8, r8, r9, lsl #24
 8004d48:	f894 9003 	ldrb.w	r9, [r4, #3]
 8004d4c:	ea48 0809 	orr.w	r8, r8, r9
 8004d50:	f894 9002 	ldrb.w	r9, [r4, #2]
 8004d54:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8004d58:	f894 800c 	ldrb.w	r8, [r4, #12]
 8004d5c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004d60:	ea4c 6c08 	orr.w	ip, ip, r8, lsl #24
 8004d64:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8004d68:	f894 8007 	ldrb.w	r8, [r4, #7]
 8004d6c:	ea4e 6e0b 	orr.w	lr, lr, fp, lsl #24
 8004d70:	f894 b008 	ldrb.w	fp, [r4, #8]
 8004d74:	ea4e 0e08 	orr.w	lr, lr, r8
 8004d78:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8004d7c:	f894 800b 	ldrb.w	r8, [r4, #11]
 8004d80:	ea4a 6a0b 	orr.w	sl, sl, fp, lsl #24
 8004d84:	ea4a 0a08 	orr.w	sl, sl, r8
 8004d88:	f894 800f 	ldrb.w	r8, [r4, #15]
 8004d8c:	f894 b006 	ldrb.w	fp, [r4, #6]
 8004d90:	ea82 0209 	eor.w	r2, r2, r9
 8004d94:	ea4c 0c08 	orr.w	ip, ip, r8
 8004d98:	602a      	str	r2, [r5, #0]
 8004d9a:	f894 800a 	ldrb.w	r8, [r4, #10]
 8004d9e:	7ba2      	ldrb	r2, [r4, #14]
 8004da0:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
 8004da4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8004da8:	ea4a 2808 	orr.w	r8, sl, r8, lsl #8
 8004dac:	ea81 0e0e 	eor.w	lr, r1, lr
 8004db0:	ea83 0c0c 	eor.w	ip, r3, ip
 8004db4:	ea80 0808 	eor.w	r8, r0, r8
 8004db8:	2310      	movs	r3, #16
 8004dba:	3601      	adds	r6, #1
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	9900      	ldr	r1, [sp, #0]
 8004dc0:	f8c5 e004 	str.w	lr, [r5, #4]
 8004dc4:	aa52      	add	r2, sp, #328	; 0x148
 8004dc6:	f8c5 8008 	str.w	r8, [r5, #8]
 8004dca:	f8c5 c00c 	str.w	ip, [r5, #12]
 8004dce:	441c      	add	r4, r3
 8004dd0:	f7ff fd5e 	bl	8004890 <AES_general_SW_enc>
 8004dd4:	42be      	cmp	r6, r7
 8004dd6:	d1a3      	bne.n	8004d20 <DRBG_AES128_Block_cipher_df.constprop.37+0x180>
 8004dd8:	a802      	add	r0, sp, #8
 8004dda:	4629      	mov	r1, r5
 8004ddc:	2210      	movs	r2, #16
 8004dde:	f7ff fc75 	bl	80046cc <AES_keyschedule_enc_LL>
 8004de2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8004de6:	462a      	mov	r2, r5
 8004de8:	2310      	movs	r3, #16
 8004dea:	f7ff fd51 	bl	8004890 <AES_general_SW_enc>
 8004dee:	9c01      	ldr	r4, [sp, #4]
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	6861      	ldr	r1, [r4, #4]
 8004df4:	68a2      	ldr	r2, [r4, #8]
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	9c00      	ldr	r4, [sp, #0]
 8004dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dfc:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8004e00:	462a      	mov	r2, r5
 8004e02:	f104 0110 	add.w	r1, r4, #16
 8004e06:	2310      	movs	r3, #16
 8004e08:	f7ff fd42 	bl	8004890 <AES_general_SW_enc>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	b07f      	add	sp, #508	; 0x1fc
 8004e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	ac06      	add	r4, sp, #24
 8004e16:	9706      	str	r7, [sp, #24]
 8004e18:	9707      	str	r7, [sp, #28]
 8004e1a:	9708      	str	r7, [sp, #32]
 8004e1c:	9709      	str	r7, [sp, #36]	; 0x24
 8004e1e:	ad26      	add	r5, sp, #152	; 0x98
 8004e20:	9400      	str	r4, [sp, #0]
 8004e22:	e7d9      	b.n	8004dd8 <DRBG_AES128_Block_cipher_df.constprop.37+0x238>
 8004e24:	08006858 	.word	0x08006858

08004e28 <crl_DRBG_AES128_Generate.part.25.constprop.36>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	1e19      	subs	r1, r3, #0
 8004e30:	b0c1      	sub	sp, #260	; 0x104
 8004e32:	4680      	mov	r8, r0
 8004e34:	f340 810d 	ble.w	8005052 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x22a>
 8004e38:	4610      	mov	r0, r2
 8004e3a:	aa04      	add	r2, sp, #16
 8004e3c:	f7ff feb0 	bl	8004ba0 <DRBG_AES128_Block_cipher_df.constprop.37>
 8004e40:	b110      	cbz	r0, 8004e48 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x20>
 8004e42:	b041      	add	sp, #260	; 0x104
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e48:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8004e4c:	f108 0a10 	add.w	sl, r8, #16
 8004e50:	4650      	mov	r0, sl
 8004e52:	4649      	mov	r1, r9
 8004e54:	2210      	movs	r2, #16
 8004e56:	f7ff fc39 	bl	80046cc <AES_keyschedule_enc_LL>
 8004e5a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004e5e:	464c      	mov	r4, r9
 8004e60:	465f      	mov	r7, fp
 8004e62:	462e      	mov	r6, r5
 8004e64:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8004e68:	2310      	movs	r3, #16
 8004e6a:	3501      	adds	r5, #1
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	4640      	mov	r0, r8
 8004e70:	464a      	mov	r2, r9
 8004e72:	441f      	add	r7, r3
 8004e74:	f8c8 500c 	str.w	r5, [r8, #12]
 8004e78:	b985      	cbnz	r5, 8004e9c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8004e7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8004e7e:	3501      	adds	r5, #1
 8004e80:	f8c8 5008 	str.w	r5, [r8, #8]
 8004e84:	b955      	cbnz	r5, 8004e9c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8004e86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004e8a:	3501      	adds	r5, #1
 8004e8c:	f8c8 5004 	str.w	r5, [r8, #4]
 8004e90:	b925      	cbnz	r5, 8004e9c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8004e92:	f8d8 5000 	ldr.w	r5, [r8]
 8004e96:	3501      	adds	r5, #1
 8004e98:	f8c8 5000 	str.w	r5, [r8]
 8004e9c:	f7ff fcf8 	bl	8004890 <AES_general_SW_enc>
 8004ea0:	454f      	cmp	r7, r9
 8004ea2:	d1df      	bne.n	8004e64 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x3c>
 8004ea4:	9a06      	ldr	r2, [sp, #24]
 8004ea6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eaa:	9804      	ldr	r0, [sp, #16]
 8004eac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004eae:	4635      	mov	r5, r6
 8004eb0:	9e05      	ldr	r6, [sp, #20]
 8004eb2:	4053      	eors	r3, r2
 8004eb4:	4071      	eors	r1, r6
 8004eb6:	9a07      	ldr	r2, [sp, #28]
 8004eb8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8004eba:	f8c8 3018 	str.w	r3, [r8, #24]
 8004ebe:	4047      	eors	r7, r0
 8004ec0:	ea82 0e06 	eor.w	lr, r2, r6
 8004ec4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004ec6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eca:	f8c8 7010 	str.w	r7, [r8, #16]
 8004ece:	9f08      	ldr	r7, [sp, #32]
 8004ed0:	f8c8 1014 	str.w	r1, [r8, #20]
 8004ed4:	ea83 0600 	eor.w	r6, r3, r0
 8004ed8:	ea87 0102 	eor.w	r1, r7, r2
 8004edc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee2:	f8c8 e01c 	str.w	lr, [r8, #28]
 8004ee6:	ea80 0702 	eor.w	r7, r0, r2
 8004eea:	e888 00c2 	stmia.w	r8, {r1, r6, r7}
 8004eee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004ef0:	ea83 0200 	eor.w	r2, r3, r0
 8004ef4:	f8c8 200c 	str.w	r2, [r8, #12]
 8004ef8:	4650      	mov	r0, sl
 8004efa:	4621      	mov	r1, r4
 8004efc:	2210      	movs	r2, #16
 8004efe:	f7ff fbe5 	bl	80046cc <AES_keyschedule_enc_LL>
 8004f02:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8004f06:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4669      	mov	r1, sp
 8004f10:	4622      	mov	r2, r4
 8004f12:	2310      	movs	r3, #16
 8004f14:	f8c8 600c 	str.w	r6, [r8, #12]
 8004f18:	b986      	cbnz	r6, 8004f3c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8004f1a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8004f1e:	3601      	adds	r6, #1
 8004f20:	f8c8 6008 	str.w	r6, [r8, #8]
 8004f24:	b956      	cbnz	r6, 8004f3c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8004f26:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	f8c8 6004 	str.w	r6, [r8, #4]
 8004f30:	b926      	cbnz	r6, 8004f3c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8004f32:	f8d8 6000 	ldr.w	r6, [r8]
 8004f36:	3601      	adds	r6, #1
 8004f38:	f8c8 6000 	str.w	r6, [r8]
 8004f3c:	f7ff fca8 	bl	8004890 <AES_general_SW_enc>
 8004f40:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 8004f44:	70e8      	strb	r0, [r5, #3]
 8004f46:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8004f4a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8004f4e:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8004f52:	0a0e      	lsrs	r6, r1, #8
 8004f54:	0c08      	lsrs	r0, r1, #16
 8004f56:	f885 9002 	strb.w	r9, [r5, #2]
 8004f5a:	f885 c001 	strb.w	ip, [r5, #1]
 8004f5e:	f885 e000 	strb.w	lr, [r5]
 8004f62:	71e9      	strb	r1, [r5, #7]
 8004f64:	71ae      	strb	r6, [r5, #6]
 8004f66:	7168      	strb	r0, [r5, #5]
 8004f68:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8004f6c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004f70:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f74:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8004f78:	0a1e      	lsrs	r6, r3, #8
 8004f7a:	0c18      	lsrs	r0, r3, #16
 8004f7c:	0e19      	lsrs	r1, r3, #24
 8004f7e:	f885 a004 	strb.w	sl, [r5, #4]
 8004f82:	72ea      	strb	r2, [r5, #11]
 8004f84:	f885 900a 	strb.w	r9, [r5, #10]
 8004f88:	f885 c009 	strb.w	ip, [r5, #9]
 8004f8c:	f885 e008 	strb.w	lr, [r5, #8]
 8004f90:	73eb      	strb	r3, [r5, #15]
 8004f92:	73ae      	strb	r6, [r5, #14]
 8004f94:	7368      	strb	r0, [r5, #13]
 8004f96:	7329      	strb	r1, [r5, #12]
 8004f98:	3510      	adds	r5, #16
 8004f9a:	42bd      	cmp	r5, r7
 8004f9c:	d1b3      	bne.n	8004f06 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xde>
 8004f9e:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8004fa2:	2310      	movs	r3, #16
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4622      	mov	r2, r4
 8004fac:	449b      	add	fp, r3
 8004fae:	f8c8 500c 	str.w	r5, [r8, #12]
 8004fb2:	b985      	cbnz	r5, 8004fd6 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8004fb4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8004fb8:	3501      	adds	r5, #1
 8004fba:	f8c8 5008 	str.w	r5, [r8, #8]
 8004fbe:	b955      	cbnz	r5, 8004fd6 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8004fc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	f8c8 5004 	str.w	r5, [r8, #4]
 8004fca:	b925      	cbnz	r5, 8004fd6 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8004fcc:	f8d8 5000 	ldr.w	r5, [r8]
 8004fd0:	3501      	adds	r5, #1
 8004fd2:	f8c8 5000 	str.w	r5, [r8]
 8004fd6:	f7ff fc5b 	bl	8004890 <AES_general_SW_enc>
 8004fda:	45a3      	cmp	fp, r4
 8004fdc:	d1df      	bne.n	8004f9e <crl_DRBG_AES128_Generate.part.25.constprop.36+0x176>
 8004fde:	9906      	ldr	r1, [sp, #24]
 8004fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fe2:	9c05      	ldr	r4, [sp, #20]
 8004fe4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004fe6:	9e04      	ldr	r6, [sp, #16]
 8004fe8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fec:	ea81 0c02 	eor.w	ip, r1, r2
 8004ff0:	9a07      	ldr	r2, [sp, #28]
 8004ff2:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8004ff6:	f8c8 c018 	str.w	ip, [r8, #24]
 8004ffa:	4060      	eors	r0, r4
 8004ffc:	ea82 0307 	eor.w	r3, r2, r7
 8005000:	4075      	eors	r5, r6
 8005002:	9c08      	ldr	r4, [sp, #32]
 8005004:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005006:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005008:	f8c8 0014 	str.w	r0, [r8, #20]
 800500c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800500e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005010:	f8c8 5010 	str.w	r5, [r8, #16]
 8005014:	ea84 0506 	eor.w	r5, r4, r6
 8005018:	ea87 0600 	eor.w	r6, r7, r0
 800501c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800501e:	f8c8 301c 	str.w	r3, [r8, #28]
 8005022:	ea82 0407 	eor.w	r4, r2, r7
 8005026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005028:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800502a:	f8c8 4008 	str.w	r4, [r8, #8]
 800502e:	ea82 0007 	eor.w	r0, r2, r7
 8005032:	1c4b      	adds	r3, r1, #1
 8005034:	f8c8 000c 	str.w	r0, [r8, #12]
 8005038:	bf1a      	itte	ne
 800503a:	3101      	addne	r1, #1
 800503c:	2000      	movne	r0, #0
 800503e:	f241 7073 	movweq	r0, #6003	; 0x1773
 8005042:	e888 0060 	stmia.w	r8, {r5, r6}
 8005046:	bf18      	it	ne
 8005048:	f8c8 1020 	strne.w	r1, [r8, #32]
 800504c:	b041      	add	sp, #260	; 0x104
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	2300      	movs	r3, #0
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	9306      	str	r3, [sp, #24]
 800505a:	9307      	str	r3, [sp, #28]
 800505c:	9308      	str	r3, [sp, #32]
 800505e:	9309      	str	r3, [sp, #36]	; 0x24
 8005060:	930a      	str	r3, [sp, #40]	; 0x28
 8005062:	930b      	str	r3, [sp, #44]	; 0x2c
 8005064:	f100 0a10 	add.w	sl, r0, #16
 8005068:	ac14      	add	r4, sp, #80	; 0x50
 800506a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800506e:	e743      	b.n	8004ef8 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xd0>

08005070 <crl_DRBG_AES128_Generate.part.25>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	b0c3      	sub	sp, #268	; 0x10c
 8005076:	4605      	mov	r5, r0
 8005078:	9100      	str	r1, [sp, #0]
 800507a:	1e19      	subs	r1, r3, #0
 800507c:	f8dd b130 	ldr.w	fp, [sp, #304]	; 0x130
 8005080:	f340 80f4 	ble.w	800526c <crl_DRBG_AES128_Generate.part.25+0x1fc>
 8005084:	4610      	mov	r0, r2
 8005086:	aa06      	add	r2, sp, #24
 8005088:	f7ff fd8a 	bl	8004ba0 <DRBG_AES128_Block_cipher_df.constprop.37>
 800508c:	b110      	cbz	r0, 8005094 <crl_DRBG_AES128_Generate.part.25+0x24>
 800508e:	b043      	add	sp, #268	; 0x10c
 8005090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005094:	af16      	add	r7, sp, #88	; 0x58
 8005096:	f105 0910 	add.w	r9, r5, #16
 800509a:	ac0e      	add	r4, sp, #56	; 0x38
 800509c:	4648      	mov	r0, r9
 800509e:	4639      	mov	r1, r7
 80050a0:	2210      	movs	r2, #16
 80050a2:	f7ff fb13 	bl	80046cc <AES_keyschedule_enc_LL>
 80050a6:	46ba      	mov	sl, r7
 80050a8:	9401      	str	r4, [sp, #4]
 80050aa:	4626      	mov	r6, r4
 80050ac:	68ec      	ldr	r4, [r5, #12]
 80050ae:	2310      	movs	r3, #16
 80050b0:	3401      	adds	r4, #1
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	463a      	mov	r2, r7
 80050b8:	441e      	add	r6, r3
 80050ba:	60ec      	str	r4, [r5, #12]
 80050bc:	b954      	cbnz	r4, 80050d4 <crl_DRBG_AES128_Generate.part.25+0x64>
 80050be:	68ac      	ldr	r4, [r5, #8]
 80050c0:	3401      	adds	r4, #1
 80050c2:	60ac      	str	r4, [r5, #8]
 80050c4:	b934      	cbnz	r4, 80050d4 <crl_DRBG_AES128_Generate.part.25+0x64>
 80050c6:	686c      	ldr	r4, [r5, #4]
 80050c8:	3401      	adds	r4, #1
 80050ca:	606c      	str	r4, [r5, #4]
 80050cc:	b914      	cbnz	r4, 80050d4 <crl_DRBG_AES128_Generate.part.25+0x64>
 80050ce:	682c      	ldr	r4, [r5, #0]
 80050d0:	3401      	adds	r4, #1
 80050d2:	602c      	str	r4, [r5, #0]
 80050d4:	f7ff fbdc 	bl	8004890 <AES_general_SW_enc>
 80050d8:	42be      	cmp	r6, r7
 80050da:	d1e7      	bne.n	80050ac <crl_DRBG_AES128_Generate.part.25+0x3c>
 80050dc:	9807      	ldr	r0, [sp, #28]
 80050de:	9a08      	ldr	r2, [sp, #32]
 80050e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050e4:	9e06      	ldr	r6, [sp, #24]
 80050e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80050e8:	4041      	eors	r1, r0
 80050ea:	4053      	eors	r3, r2
 80050ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80050f0:	61ab      	str	r3, [r5, #24]
 80050f2:	4074      	eors	r4, r6
 80050f4:	ea80 0702 	eor.w	r7, r0, r2
 80050f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050fe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005100:	612c      	str	r4, [r5, #16]
 8005102:	6169      	str	r1, [r5, #20]
 8005104:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005106:	61ef      	str	r7, [r5, #28]
 8005108:	ea80 0102 	eor.w	r1, r0, r2
 800510c:	ea83 0006 	eor.w	r0, r3, r6
 8005110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005112:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005114:	6029      	str	r1, [r5, #0]
 8005116:	405c      	eors	r4, r3
 8005118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511a:	6068      	str	r0, [r5, #4]
 800511c:	405a      	eors	r2, r3
 800511e:	60ac      	str	r4, [r5, #8]
 8005120:	60ea      	str	r2, [r5, #12]
 8005122:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80053a8 <crl_DRBG_AES128_Generate.part.25+0x338>
 8005126:	4648      	mov	r0, r9
 8005128:	4651      	mov	r1, sl
 800512a:	2210      	movs	r2, #16
 800512c:	ea0b 0808 	and.w	r8, fp, r8
 8005130:	f7ff facc 	bl	80046cc <AES_keyschedule_enc_LL>
 8005134:	f1b8 0f00 	cmp.w	r8, #0
 8005138:	f2c0 811e 	blt.w	8005378 <crl_DRBG_AES128_Generate.part.25+0x308>
 800513c:	f1bb 0f0f 	cmp.w	fp, #15
 8005140:	f340 8121 	ble.w	8005386 <crl_DRBG_AES128_Generate.part.25+0x316>
 8005144:	9f00      	ldr	r7, [sp, #0]
 8005146:	f04f 0910 	mov.w	r9, #16
 800514a:	1cfc      	adds	r4, r7, #3
 800514c:	ae02      	add	r6, sp, #8
 800514e:	68ef      	ldr	r7, [r5, #12]
 8005150:	2310      	movs	r3, #16
 8005152:	3701      	adds	r7, #1
 8005154:	4628      	mov	r0, r5
 8005156:	4631      	mov	r1, r6
 8005158:	4652      	mov	r2, sl
 800515a:	4499      	add	r9, r3
 800515c:	60ef      	str	r7, [r5, #12]
 800515e:	b957      	cbnz	r7, 8005176 <crl_DRBG_AES128_Generate.part.25+0x106>
 8005160:	68af      	ldr	r7, [r5, #8]
 8005162:	3701      	adds	r7, #1
 8005164:	60af      	str	r7, [r5, #8]
 8005166:	b937      	cbnz	r7, 8005176 <crl_DRBG_AES128_Generate.part.25+0x106>
 8005168:	686f      	ldr	r7, [r5, #4]
 800516a:	3701      	adds	r7, #1
 800516c:	606f      	str	r7, [r5, #4]
 800516e:	b917      	cbnz	r7, 8005176 <crl_DRBG_AES128_Generate.part.25+0x106>
 8005170:	682f      	ldr	r7, [r5, #0]
 8005172:	3701      	adds	r7, #1
 8005174:	602f      	str	r7, [r5, #0]
 8005176:	f7ff fb8b 	bl	8004890 <AES_general_SW_enc>
 800517a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800517e:	0a07      	lsrs	r7, r0, #8
 8005180:	7020      	strb	r0, [r4, #0]
 8005182:	f804 7c01 	strb.w	r7, [r4, #-1]
 8005186:	0c07      	lsrs	r7, r0, #16
 8005188:	0e00      	lsrs	r0, r0, #24
 800518a:	f804 7c02 	strb.w	r7, [r4, #-2]
 800518e:	f804 0c03 	strb.w	r0, [r4, #-3]
 8005192:	0a0f      	lsrs	r7, r1, #8
 8005194:	0c08      	lsrs	r0, r1, #16
 8005196:	7121      	strb	r1, [r4, #4]
 8005198:	0e09      	lsrs	r1, r1, #24
 800519a:	70e7      	strb	r7, [r4, #3]
 800519c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80051a0:	70a0      	strb	r0, [r4, #2]
 80051a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051a6:	7061      	strb	r1, [r4, #1]
 80051a8:	0e17      	lsrs	r7, r2, #24
 80051aa:	7222      	strb	r2, [r4, #8]
 80051ac:	0a18      	lsrs	r0, r3, #8
 80051ae:	0c19      	lsrs	r1, r3, #16
 80051b0:	0e1a      	lsrs	r2, r3, #24
 80051b2:	45cb      	cmp	fp, r9
 80051b4:	f884 c007 	strb.w	ip, [r4, #7]
 80051b8:	f884 e006 	strb.w	lr, [r4, #6]
 80051bc:	7167      	strb	r7, [r4, #5]
 80051be:	7323      	strb	r3, [r4, #12]
 80051c0:	72e0      	strb	r0, [r4, #11]
 80051c2:	72a1      	strb	r1, [r4, #10]
 80051c4:	7262      	strb	r2, [r4, #9]
 80051c6:	f104 0410 	add.w	r4, r4, #16
 80051ca:	dac0      	bge.n	800514e <crl_DRBG_AES128_Generate.part.25+0xde>
 80051cc:	f1b8 0f00 	cmp.w	r8, #0
 80051d0:	d15c      	bne.n	800528c <crl_DRBG_AES128_Generate.part.25+0x21c>
 80051d2:	9c01      	ldr	r4, [sp, #4]
 80051d4:	68ee      	ldr	r6, [r5, #12]
 80051d6:	2310      	movs	r3, #16
 80051d8:	3601      	adds	r6, #1
 80051da:	4621      	mov	r1, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	4652      	mov	r2, sl
 80051e0:	441c      	add	r4, r3
 80051e2:	60ee      	str	r6, [r5, #12]
 80051e4:	b956      	cbnz	r6, 80051fc <crl_DRBG_AES128_Generate.part.25+0x18c>
 80051e6:	68ae      	ldr	r6, [r5, #8]
 80051e8:	3601      	adds	r6, #1
 80051ea:	60ae      	str	r6, [r5, #8]
 80051ec:	b936      	cbnz	r6, 80051fc <crl_DRBG_AES128_Generate.part.25+0x18c>
 80051ee:	686e      	ldr	r6, [r5, #4]
 80051f0:	3601      	adds	r6, #1
 80051f2:	606e      	str	r6, [r5, #4]
 80051f4:	b916      	cbnz	r6, 80051fc <crl_DRBG_AES128_Generate.part.25+0x18c>
 80051f6:	682e      	ldr	r6, [r5, #0]
 80051f8:	3601      	adds	r6, #1
 80051fa:	602e      	str	r6, [r5, #0]
 80051fc:	f7ff fb48 	bl	8004890 <AES_general_SW_enc>
 8005200:	4554      	cmp	r4, sl
 8005202:	d1e7      	bne.n	80051d4 <crl_DRBG_AES128_Generate.part.25+0x164>
 8005204:	9c07      	ldr	r4, [sp, #28]
 8005206:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005208:	9f06      	ldr	r7, [sp, #24]
 800520a:	9908      	ldr	r1, [sp, #32]
 800520c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800520e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005210:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005212:	4060      	eors	r0, r4
 8005214:	ea81 0c02 	eor.w	ip, r1, r2
 8005218:	407e      	eors	r6, r7
 800521a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800521e:	6168      	str	r0, [r5, #20]
 8005220:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005222:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005224:	612e      	str	r6, [r5, #16]
 8005226:	ea87 0800 	eor.w	r8, r7, r0
 800522a:	ea82 0603 	eor.w	r6, r2, r3
 800522e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005232:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005234:	6a29      	ldr	r1, [r5, #32]
 8005236:	f8c5 c018 	str.w	ip, [r5, #24]
 800523a:	ea84 0700 	eor.w	r7, r4, r0
 800523e:	ea82 0403 	eor.w	r4, r2, r3
 8005242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005246:	f8c5 801c 	str.w	r8, [r5, #28]
 800524a:	ea82 0003 	eor.w	r0, r2, r3
 800524e:	1c4b      	adds	r3, r1, #1
 8005250:	60e8      	str	r0, [r5, #12]
 8005252:	bf1a      	itte	ne
 8005254:	3101      	addne	r1, #1
 8005256:	2000      	movne	r0, #0
 8005258:	f241 7073 	movweq	r0, #6003	; 0x1773
 800525c:	e885 00c0 	stmia.w	r5, {r6, r7}
 8005260:	60ac      	str	r4, [r5, #8]
 8005262:	bf18      	it	ne
 8005264:	6229      	strne	r1, [r5, #32]
 8005266:	b043      	add	sp, #268	; 0x10c
 8005268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526c:	2300      	movs	r3, #0
 800526e:	ac0e      	add	r4, sp, #56	; 0x38
 8005270:	9306      	str	r3, [sp, #24]
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	9308      	str	r3, [sp, #32]
 8005276:	9309      	str	r3, [sp, #36]	; 0x24
 8005278:	930a      	str	r3, [sp, #40]	; 0x28
 800527a:	930b      	str	r3, [sp, #44]	; 0x2c
 800527c:	930c      	str	r3, [sp, #48]	; 0x30
 800527e:	930d      	str	r3, [sp, #52]	; 0x34
 8005280:	f100 0910 	add.w	r9, r0, #16
 8005284:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8005288:	9401      	str	r4, [sp, #4]
 800528a:	e74a      	b.n	8005122 <crl_DRBG_AES128_Generate.part.25+0xb2>
 800528c:	68eb      	ldr	r3, [r5, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60eb      	str	r3, [r5, #12]
 8005292:	b953      	cbnz	r3, 80052aa <crl_DRBG_AES128_Generate.part.25+0x23a>
 8005294:	68ab      	ldr	r3, [r5, #8]
 8005296:	3301      	adds	r3, #1
 8005298:	60ab      	str	r3, [r5, #8]
 800529a:	b933      	cbnz	r3, 80052aa <crl_DRBG_AES128_Generate.part.25+0x23a>
 800529c:	686b      	ldr	r3, [r5, #4]
 800529e:	3301      	adds	r3, #1
 80052a0:	606b      	str	r3, [r5, #4]
 80052a2:	b913      	cbnz	r3, 80052aa <crl_DRBG_AES128_Generate.part.25+0x23a>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	602b      	str	r3, [r5, #0]
 80052aa:	ae02      	add	r6, sp, #8
 80052ac:	4652      	mov	r2, sl
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	2310      	movs	r3, #16
 80052b4:	f7ff faec 	bl	8004890 <AES_general_SW_enc>
 80052b8:	f1b8 0f00 	cmp.w	r8, #0
 80052bc:	4642      	mov	r2, r8
 80052be:	bfb8      	it	lt
 80052c0:	f108 0203 	addlt.w	r2, r8, #3
 80052c4:	1092      	asrs	r2, r2, #2
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	dd60      	ble.n	800538c <crl_DRBG_AES128_Generate.part.25+0x31c>
 80052ca:	9900      	ldr	r1, [sp, #0]
 80052cc:	6833      	ldr	r3, [r6, #0]
 80052ce:	f1a9 0010 	sub.w	r0, r9, #16
 80052d2:	4401      	add	r1, r0
 80052d4:	0c1f      	lsrs	r7, r3, #16
 80052d6:	704f      	strb	r7, [r1, #1]
 80052d8:	9f00      	ldr	r7, [sp, #0]
 80052da:	70cb      	strb	r3, [r1, #3]
 80052dc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 80052e0:	0e1c      	lsrs	r4, r3, #24
 80052e2:	2a01      	cmp	r2, #1
 80052e4:	f881 e002 	strb.w	lr, [r1, #2]
 80052e8:	543c      	strb	r4, [r7, r0]
 80052ea:	dd51      	ble.n	8005390 <crl_DRBG_AES128_Generate.part.25+0x320>
 80052ec:	6873      	ldr	r3, [r6, #4]
 80052ee:	f1a9 000c 	sub.w	r0, r9, #12
 80052f2:	4639      	mov	r1, r7
 80052f4:	4401      	add	r1, r0
 80052f6:	0c1f      	lsrs	r7, r3, #16
 80052f8:	704f      	strb	r7, [r1, #1]
 80052fa:	9f00      	ldr	r7, [sp, #0]
 80052fc:	70cb      	strb	r3, [r1, #3]
 80052fe:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8005302:	0e1c      	lsrs	r4, r3, #24
 8005304:	2a02      	cmp	r2, #2
 8005306:	f881 e002 	strb.w	lr, [r1, #2]
 800530a:	543c      	strb	r4, [r7, r0]
 800530c:	dd42      	ble.n	8005394 <crl_DRBG_AES128_Generate.part.25+0x324>
 800530e:	68b3      	ldr	r3, [r6, #8]
 8005310:	f1a9 0108 	sub.w	r1, r9, #8
 8005314:	463a      	mov	r2, r7
 8005316:	440a      	add	r2, r1
 8005318:	0a1f      	lsrs	r7, r3, #8
 800531a:	7097      	strb	r7, [r2, #2]
 800531c:	9f00      	ldr	r7, [sp, #0]
 800531e:	70d3      	strb	r3, [r2, #3]
 8005320:	0c18      	lsrs	r0, r3, #16
 8005322:	0e1c      	lsrs	r4, r3, #24
 8005324:	7050      	strb	r0, [r2, #1]
 8005326:	547c      	strb	r4, [r7, r1]
 8005328:	2003      	movs	r0, #3
 800532a:	f018 0f03 	tst.w	r8, #3
 800532e:	f43f af50 	beq.w	80051d2 <crl_DRBG_AES128_Generate.part.25+0x162>
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <crl_DRBG_AES128_Generate.part.25+0x334>)
 8005334:	ea08 0303 	and.w	r3, r8, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	db2d      	blt.n	8005398 <crl_DRBG_AES128_Generate.part.25+0x328>
 800533c:	9c00      	ldr	r4, [sp, #0]
 800533e:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 8005342:	f1a9 0110 	sub.w	r1, r9, #16
 8005346:	441c      	add	r4, r3
 8005348:	f1c3 0704 	rsb	r7, r3, #4
 800534c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005350:	440c      	add	r4, r1
 8005352:	00ff      	lsls	r7, r7, #3
 8005354:	40fa      	lsrs	r2, r7
 8005356:	3b02      	subs	r3, #2
 8005358:	f804 2c01 	strb.w	r2, [r4, #-1]
 800535c:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8005360:	f53f af37 	bmi.w	80051d2 <crl_DRBG_AES128_Generate.part.25+0x162>
 8005364:	9c00      	ldr	r4, [sp, #0]
 8005366:	4421      	add	r1, r4
 8005368:	0a12      	lsrs	r2, r2, #8
 800536a:	54ca      	strb	r2, [r1, r3]
 800536c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005370:	d2fa      	bcs.n	8005368 <crl_DRBG_AES128_Generate.part.25+0x2f8>
 8005372:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8005376:	e72c      	b.n	80051d2 <crl_DRBG_AES128_Generate.part.25+0x162>
 8005378:	f108 38ff 	add.w	r8, r8, #4294967295
 800537c:	f068 080f 	orn	r8, r8, #15
 8005380:	f108 0801 	add.w	r8, r8, #1
 8005384:	e6da      	b.n	800513c <crl_DRBG_AES128_Generate.part.25+0xcc>
 8005386:	f04f 0910 	mov.w	r9, #16
 800538a:	e71f      	b.n	80051cc <crl_DRBG_AES128_Generate.part.25+0x15c>
 800538c:	2000      	movs	r0, #0
 800538e:	e7cc      	b.n	800532a <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8005390:	2001      	movs	r0, #1
 8005392:	e7ca      	b.n	800532a <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8005394:	2002      	movs	r0, #2
 8005396:	e7c8      	b.n	800532a <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8005398:	3b01      	subs	r3, #1
 800539a:	f063 0303 	orn	r3, r3, #3
 800539e:	3301      	adds	r3, #1
 80053a0:	e7cc      	b.n	800533c <crl_DRBG_AES128_Generate.part.25+0x2cc>
 80053a2:	bf00      	nop
 80053a4:	80000003 	.word	0x80000003
 80053a8:	8000000f 	.word	0x8000000f

080053ac <StAllocBig>:
 80053ac:	88d3      	ldrh	r3, [r2, #6]
 80053ae:	b4f0      	push	{r4, r5, r6, r7}
 80053b0:	1c4c      	adds	r4, r1, #1
 80053b2:	8896      	ldrh	r6, [r2, #4]
 80053b4:	f103 0508 	add.w	r5, r3, #8
 80053b8:	00a4      	lsls	r4, r4, #2
 80053ba:	1967      	adds	r7, r4, r5
 80053bc:	42b7      	cmp	r7, r6
 80053be:	d903      	bls.n	80053c8 <StAllocBig+0x1c>
 80053c0:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80053c4:	bcf0      	pop	{r4, r5, r6, r7}
 80053c6:	4770      	bx	lr
 80053c8:	6816      	ldr	r6, [r2, #0]
 80053ca:	18f7      	adds	r7, r6, r3
 80053cc:	6007      	str	r7, [r0, #0]
 80053ce:	6817      	ldr	r7, [r2, #0]
 80053d0:	443d      	add	r5, r7
 80053d2:	50f5      	str	r5, [r6, r3]
 80053d4:	6803      	ldr	r3, [r0, #0]
 80053d6:	7199      	strb	r1, [r3, #6]
 80053d8:	88d3      	ldrh	r3, [r2, #6]
 80053da:	3308      	adds	r3, #8
 80053dc:	441c      	add	r4, r3
 80053de:	80d4      	strh	r4, [r2, #6]
 80053e0:	2000      	movs	r0, #0
 80053e2:	bcf0      	pop	{r4, r5, r6, r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop

080053e8 <StFreeBig>:
 80053e8:	6803      	ldr	r3, [r0, #0]
 80053ea:	b14b      	cbz	r3, 8005400 <StFreeBig+0x18>
 80053ec:	b141      	cbz	r1, 8005400 <StFreeBig+0x18>
 80053ee:	799a      	ldrb	r2, [r3, #6]
 80053f0:	88cb      	ldrh	r3, [r1, #6]
 80053f2:	43d2      	mvns	r2, r2
 80053f4:	3b08      	subs	r3, #8
 80053f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80053fa:	2300      	movs	r3, #0
 80053fc:	80ca      	strh	r2, [r1, #6]
 80053fe:	6003      	str	r3, [r0, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop

08005404 <InitBig>:
 8005404:	7983      	ldrb	r3, [r0, #6]
 8005406:	b470      	push	{r4, r5, r6}
 8005408:	b1b3      	cbz	r3, 8005438 <InitBig+0x34>
 800540a:	2201      	movs	r2, #1
 800540c:	6805      	ldr	r5, [r0, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	2600      	movs	r6, #0
 8005412:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 8005416:	7984      	ldrb	r4, [r0, #6]
 8005418:	3301      	adds	r3, #1
 800541a:	b29b      	uxth	r3, r3
 800541c:	3401      	adds	r4, #1
 800541e:	42a3      	cmp	r3, r4
 8005420:	461a      	mov	r2, r3
 8005422:	d3f6      	bcc.n	8005412 <InitBig+0xe>
 8005424:	2301      	movs	r3, #1
 8005426:	2900      	cmp	r1, #0
 8005428:	8083      	strh	r3, [r0, #4]
 800542a:	bfb4      	ite	lt
 800542c:	4249      	neglt	r1, r1
 800542e:	2300      	movge	r3, #0
 8005430:	71c3      	strb	r3, [r0, #7]
 8005432:	6029      	str	r1, [r5, #0]
 8005434:	bc70      	pop	{r4, r5, r6}
 8005436:	4770      	bx	lr
 8005438:	6805      	ldr	r5, [r0, #0]
 800543a:	e7f3      	b.n	8005424 <InitBig+0x20>

0800543c <CopyBig>:
 800543c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8005440:	798b      	ldrb	r3, [r1, #6]
 8005442:	8884      	ldrh	r4, [r0, #4]
 8005444:	429c      	cmp	r4, r3
 8005446:	d907      	bls.n	8005458 <CopyBig+0x1c>
 8005448:	3301      	adds	r3, #1
 800544a:	42a3      	cmp	r3, r4
 800544c:	d227      	bcs.n	800549e <CopyBig+0x62>
 800544e:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8005452:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005456:	4770      	bx	lr
 8005458:	f04f 0800 	mov.w	r8, #0
 800545c:	79c3      	ldrb	r3, [r0, #7]
 800545e:	71cb      	strb	r3, [r1, #7]
 8005460:	808c      	strh	r4, [r1, #4]
 8005462:	4622      	mov	r2, r4
 8005464:	b1f4      	cbz	r4, 80054a4 <CopyBig+0x68>
 8005466:	6807      	ldr	r7, [r0, #0]
 8005468:	680d      	ldr	r5, [r1, #0]
 800546a:	00a6      	lsls	r6, r4, #2
 800546c:	2300      	movs	r3, #0
 800546e:	58f8      	ldr	r0, [r7, r3]
 8005470:	50e8      	str	r0, [r5, r3]
 8005472:	3304      	adds	r3, #4
 8005474:	42b3      	cmp	r3, r6
 8005476:	d1fa      	bne.n	800546e <CopyBig+0x32>
 8005478:	798b      	ldrb	r3, [r1, #6]
 800547a:	42a3      	cmp	r3, r4
 800547c:	db0b      	blt.n	8005496 <CopyBig+0x5a>
 800547e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8005482:	3b01      	subs	r3, #1
 8005484:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005488:	2500      	movs	r5, #0
 800548a:	f843 5f04 	str.w	r5, [r3, #4]!
 800548e:	798c      	ldrb	r4, [r1, #6]
 8005490:	3201      	adds	r2, #1
 8005492:	4294      	cmp	r4, r2
 8005494:	daf9      	bge.n	800548a <CopyBig+0x4e>
 8005496:	4640      	mov	r0, r8
 8005498:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800549c:	4770      	bx	lr
 800549e:	f241 48b5 	movw	r8, #5301	; 0x14b5
 80054a2:	e7db      	b.n	800545c <CopyBig+0x20>
 80054a4:	680d      	ldr	r5, [r1, #0]
 80054a6:	e7ea      	b.n	800547e <CopyBig+0x42>

080054a8 <Add_Moduli_Big>:
 80054a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	7983      	ldrb	r3, [r0, #6]
 80054ae:	8884      	ldrh	r4, [r0, #4]
 80054b0:	888f      	ldrh	r7, [r1, #4]
 80054b2:	6805      	ldr	r5, [r0, #0]
 80054b4:	680e      	ldr	r6, [r1, #0]
 80054b6:	4692      	mov	sl, r2
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	42a7      	cmp	r7, r4
 80054bc:	bf34      	ite	cc
 80054be:	46bb      	movcc	fp, r7
 80054c0:	46a3      	movcs	fp, r4
 80054c2:	4294      	cmp	r4, r2
 80054c4:	4623      	mov	r3, r4
 80054c6:	f8da 8000 	ldr.w	r8, [sl]
 80054ca:	d20f      	bcs.n	80054ec <Add_Moduli_Big+0x44>
 80054cc:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80054d0:	3a01      	subs	r2, #1
 80054d2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80054d6:	f04f 0c00 	mov.w	ip, #0
 80054da:	f842 cf04 	str.w	ip, [r2, #4]!
 80054de:	f890 e006 	ldrb.w	lr, [r0, #6]
 80054e2:	3301      	adds	r3, #1
 80054e4:	f10e 0e01 	add.w	lr, lr, #1
 80054e8:	459e      	cmp	lr, r3
 80054ea:	d8f6      	bhi.n	80054da <Add_Moduli_Big+0x32>
 80054ec:	798a      	ldrb	r2, [r1, #6]
 80054ee:	3201      	adds	r2, #1
 80054f0:	4297      	cmp	r7, r2
 80054f2:	463b      	mov	r3, r7
 80054f4:	d20f      	bcs.n	8005516 <Add_Moduli_Big+0x6e>
 80054f6:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80054fa:	3a01      	subs	r2, #1
 80054fc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005500:	f04f 0c00 	mov.w	ip, #0
 8005504:	f842 cf04 	str.w	ip, [r2, #4]!
 8005508:	f891 e006 	ldrb.w	lr, [r1, #6]
 800550c:	3301      	adds	r3, #1
 800550e:	f10e 0e01 	add.w	lr, lr, #1
 8005512:	459e      	cmp	lr, r3
 8005514:	d8f6      	bhi.n	8005504 <Add_Moduli_Big+0x5c>
 8005516:	42bc      	cmp	r4, r7
 8005518:	d200      	bcs.n	800551c <Add_Moduli_Big+0x74>
 800551a:	4608      	mov	r0, r1
 800551c:	4651      	mov	r1, sl
 800551e:	f7ff ff8d 	bl	800543c <CopyBig>
 8005522:	46dc      	mov	ip, fp
 8005524:	f1bb 0f00 	cmp.w	fp, #0
 8005528:	d030      	beq.n	800558c <Add_Moduli_Big+0xe4>
 800552a:	ea4f 098b 	mov.w	r9, fp, lsl #2
 800552e:	2700      	movs	r7, #0
 8005530:	2200      	movs	r2, #0
 8005532:	2300      	movs	r3, #0
 8005534:	59e8      	ldr	r0, [r5, r7]
 8005536:	59f4      	ldr	r4, [r6, r7]
 8005538:	2100      	movs	r1, #0
 800553a:	1900      	adds	r0, r0, r4
 800553c:	f141 0100 	adc.w	r1, r1, #0
 8005540:	1880      	adds	r0, r0, r2
 8005542:	f848 0007 	str.w	r0, [r8, r7]
 8005546:	f107 0704 	add.w	r7, r7, #4
 800554a:	eb41 0103 	adc.w	r1, r1, r3
 800554e:	454f      	cmp	r7, r9
 8005550:	460a      	mov	r2, r1
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	d1ed      	bne.n	8005534 <Add_Moduli_Big+0x8c>
 8005558:	ea52 0103 	orrs.w	r1, r2, r3
 800555c:	d016      	beq.n	800558c <Add_Moduli_Big+0xe4>
 800555e:	f858 3007 	ldr.w	r3, [r8, r7]
 8005562:	3301      	adds	r3, #1
 8005564:	f848 3007 	str.w	r3, [r8, r7]
 8005568:	4447      	add	r7, r8
 800556a:	b97b      	cbnz	r3, 800558c <Add_Moduli_Big+0xe4>
 800556c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005570:	455a      	cmp	r2, fp
 8005572:	d202      	bcs.n	800557a <Add_Moduli_Big+0xd2>
 8005574:	e00c      	b.n	8005590 <Add_Moduli_Big+0xe8>
 8005576:	4594      	cmp	ip, r2
 8005578:	d80a      	bhi.n	8005590 <Add_Moduli_Big+0xe8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3301      	adds	r3, #1
 800557e:	f10c 0c01 	add.w	ip, ip, #1
 8005582:	f847 3f04 	str.w	r3, [r7, #4]!
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f5      	beq.n	8005576 <Add_Moduli_Big+0xce>
 800558a:	e001      	b.n	8005590 <Add_Moduli_Big+0xe8>
 800558c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005590:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8005594:	b113      	cbz	r3, 800559c <Add_Moduli_Big+0xf4>
 8005596:	3201      	adds	r2, #1
 8005598:	f8aa 2004 	strh.w	r2, [sl, #4]
 800559c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055a0 <IsZeroBig>:
 80055a0:	8883      	ldrh	r3, [r0, #4]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <IsZeroBig+0xa>
 80055a6:	2000      	movs	r0, #0
 80055a8:	4770      	bx	lr
 80055aa:	6803      	ldr	r3, [r0, #0]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	f1d0 0001 	rsbs	r0, r0, #1
 80055b2:	bf38      	it	cc
 80055b4:	2000      	movcc	r0, #0
 80055b6:	4770      	bx	lr

080055b8 <SetZeroBig>:
 80055b8:	2300      	movs	r3, #0
 80055ba:	b430      	push	{r4, r5}
 80055bc:	6804      	ldr	r4, [r0, #0]
 80055be:	71c3      	strb	r3, [r0, #7]
 80055c0:	461a      	mov	r2, r3
 80055c2:	461d      	mov	r5, r3
 80055c4:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 80055c8:	7981      	ldrb	r1, [r0, #6]
 80055ca:	3301      	adds	r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3101      	adds	r1, #1
 80055d0:	428b      	cmp	r3, r1
 80055d2:	461a      	mov	r2, r3
 80055d4:	d3f6      	bcc.n	80055c4 <SetZeroBig+0xc>
 80055d6:	2301      	movs	r3, #1
 80055d8:	8083      	strh	r3, [r0, #4]
 80055da:	bc30      	pop	{r4, r5}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop

080055e0 <CompareBig>:
 80055e0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80055e4:	79c2      	ldrb	r2, [r0, #7]
 80055e6:	79cb      	ldrb	r3, [r1, #7]
 80055e8:	4293      	cmp	r3, r2
 80055ea:	b254      	sxtb	r4, r2
 80055ec:	d005      	beq.n	80055fa <CompareBig+0x1a>
 80055ee:	2c01      	cmp	r4, #1
 80055f0:	d036      	beq.n	8005660 <CompareBig+0x80>
 80055f2:	2003      	movs	r0, #3
 80055f4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80055f8:	4770      	bx	lr
 80055fa:	8884      	ldrh	r4, [r0, #4]
 80055fc:	888f      	ldrh	r7, [r1, #4]
 80055fe:	42bc      	cmp	r4, r7
 8005600:	d820      	bhi.n	8005644 <CompareBig+0x64>
 8005602:	d327      	bcc.n	8005654 <CompareBig+0x74>
 8005604:	f8d0 8000 	ldr.w	r8, [r0]
 8005608:	f8d1 c000 	ldr.w	ip, [r1]
 800560c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8005610:	eb0c 0187 	add.w	r1, ip, r7, lsl #2
 8005614:	2301      	movs	r3, #1
 8005616:	e004      	b.n	8005622 <CompareBig+0x42>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d808      	bhi.n	800562e <CompareBig+0x4e>
 800561c:	3301      	adds	r3, #1
 800561e:	42a3      	cmp	r3, r4
 8005620:	d805      	bhi.n	800562e <CompareBig+0x4e>
 8005622:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005626:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 800562a:	42ae      	cmp	r6, r5
 800562c:	d0f4      	beq.n	8005618 <CompareBig+0x38>
 800562e:	1e59      	subs	r1, r3, #1
 8005630:	42a1      	cmp	r1, r4
 8005632:	d01d      	beq.n	8005670 <CompareBig+0x90>
 8005634:	1ae4      	subs	r4, r4, r3
 8005636:	1afb      	subs	r3, r7, r3
 8005638:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 800563c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005640:	4299      	cmp	r1, r3
 8005642:	d907      	bls.n	8005654 <CompareBig+0x74>
 8005644:	2a00      	cmp	r2, #0
 8005646:	bf0c      	ite	eq
 8005648:	2002      	moveq	r0, #2
 800564a:	f06f 0001 	mvnne.w	r0, #1
 800564e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005652:	4770      	bx	lr
 8005654:	2a00      	cmp	r2, #0
 8005656:	bf0c      	ite	eq
 8005658:	f04f 30ff 	moveq.w	r0, #4294967295
 800565c:	2001      	movne	r0, #1
 800565e:	e7c9      	b.n	80055f4 <CompareBig+0x14>
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf0c      	ite	eq
 8005664:	f06f 0002 	mvneq.w	r0, #2
 8005668:	2003      	movne	r0, #3
 800566a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800566e:	4770      	bx	lr
 8005670:	2000      	movs	r0, #0
 8005672:	e7bf      	b.n	80055f4 <CompareBig+0x14>

08005674 <CountBits>:
 8005674:	b510      	push	{r4, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	f7ff ff92 	bl	80055a0 <IsZeroBig>
 800567c:	b9d8      	cbnz	r0, 80056b6 <CountBits+0x42>
 800567e:	88a0      	ldrh	r0, [r4, #4]
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005686:	3b01      	subs	r3, #1
 8005688:	0140      	lsls	r0, r0, #5
 800568a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800568e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005696:	d00d      	beq.n	80056b4 <CountBits+0x40>
 8005698:	f1a0 0420 	sub.w	r4, r0, #32
 800569c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056a0:	e001      	b.n	80056a6 <CountBits+0x32>
 80056a2:	42a0      	cmp	r0, r4
 80056a4:	d009      	beq.n	80056ba <CountBits+0x46>
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	ea01 0203 	and.w	r2, r1, r3
 80056ac:	4293      	cmp	r3, r2
 80056ae:	f100 30ff 	add.w	r0, r0, #4294967295
 80056b2:	d1f6      	bne.n	80056a2 <CountBits+0x2e>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	2001      	movs	r0, #1
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	bd10      	pop	{r4, pc}

080056bc <CountBytes>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	f7ff ff6e 	bl	80055a0 <IsZeroBig>
 80056c4:	2801      	cmp	r0, #1
 80056c6:	d01a      	beq.n	80056fe <CountBytes+0x42>
 80056c8:	88a0      	ldrh	r0, [r4, #4]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	0080      	lsls	r0, r0, #2
 80056ce:	4403      	add	r3, r0
 80056d0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80056d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80056d8:	d111      	bne.n	80056fe <CountBytes+0x42>
 80056da:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80056de:	f100 32ff 	add.w	r2, r0, #4294967295
 80056e2:	d10b      	bne.n	80056fc <CountBytes+0x40>
 80056e4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80056e8:	f1a0 0202 	sub.w	r2, r0, #2
 80056ec:	d106      	bne.n	80056fc <CountBytes+0x40>
 80056ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80056f2:	f1a0 0203 	sub.w	r2, r0, #3
 80056f6:	d101      	bne.n	80056fc <CountBytes+0x40>
 80056f8:	3804      	subs	r0, #4
 80056fa:	bd10      	pop	{r4, pc}
 80056fc:	4610      	mov	r0, r2
 80056fe:	bd10      	pop	{r4, pc}

08005700 <W8_to_Big>:
 8005700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	2a00      	cmp	r2, #0
 8005706:	d072      	beq.n	80057ee <W8_to_Big+0xee>
 8005708:	2800      	cmp	r0, #0
 800570a:	d06f      	beq.n	80057ec <W8_to_Big+0xec>
 800570c:	1ccc      	adds	r4, r1, #3
 800570e:	7993      	ldrb	r3, [r2, #6]
 8005710:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8005714:	4563      	cmp	r3, ip
 8005716:	d203      	bcs.n	8005720 <W8_to_Big+0x20>
 8005718:	f241 40b5 	movw	r0, #5301	; 0x14b5
 800571c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005720:	2900      	cmp	r1, #0
 8005722:	d068      	beq.n	80057f6 <W8_to_Big+0xf6>
 8005724:	4688      	mov	r8, r1
 8005726:	bfb8      	it	lt
 8005728:	46a0      	movlt	r8, r4
 800572a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800572e:	f1b8 0f00 	cmp.w	r8, #0
 8005732:	6817      	ldr	r7, [r2, #0]
 8005734:	bfd8      	it	le
 8005736:	2400      	movle	r4, #0
 8005738:	dd1a      	ble.n	8005770 <W8_to_Big+0x70>
 800573a:	1843      	adds	r3, r0, r1
 800573c:	463c      	mov	r4, r7
 800573e:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
 8005742:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 8005746:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 800574a:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 800574e:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8005752:	042d      	lsls	r5, r5, #16
 8005754:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8005758:	ea45 0509 	orr.w	r5, r5, r9
 800575c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8005760:	f844 5b04 	str.w	r5, [r4], #4
 8005764:	4554      	cmp	r4, sl
 8005766:	f1a3 0304 	sub.w	r3, r3, #4
 800576a:	d1ea      	bne.n	8005742 <W8_to_Big+0x42>
 800576c:	7993      	ldrb	r3, [r2, #6]
 800576e:	4644      	mov	r4, r8
 8005770:	429c      	cmp	r4, r3
 8005772:	da0b      	bge.n	800578c <W8_to_Big+0x8c>
 8005774:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 8005778:	3d01      	subs	r5, #1
 800577a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800577e:	2300      	movs	r3, #0
 8005780:	f845 3f04 	str.w	r3, [r5, #4]!
 8005784:	7996      	ldrb	r6, [r2, #6]
 8005786:	3401      	adds	r4, #1
 8005788:	42b4      	cmp	r4, r6
 800578a:	dbf9      	blt.n	8005780 <W8_to_Big+0x80>
 800578c:	f011 0103 	ands.w	r1, r1, #3
 8005790:	d010      	beq.n	80057b4 <W8_to_Big+0xb4>
 8005792:	7803      	ldrb	r3, [r0, #0]
 8005794:	f847 3028 	str.w	r3, [r7, r8, lsl #2]
 8005798:	2901      	cmp	r1, #1
 800579a:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 800579e:	dd09      	ble.n	80057b4 <W8_to_Big+0xb4>
 80057a0:	1e44      	subs	r4, r0, #1
 80057a2:	4421      	add	r1, r4
 80057a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80057a8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80057ac:	4288      	cmp	r0, r1
 80057ae:	f8c8 3000 	str.w	r3, [r8]
 80057b2:	d1f7      	bne.n	80057a4 <W8_to_Big+0xa4>
 80057b4:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 80057b8:	3901      	subs	r1, #1
 80057ba:	fa1f f38c 	uxth.w	r3, ip
 80057be:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80057c2:	8093      	strh	r3, [r2, #4]
 80057c4:	b971      	cbnz	r1, 80057e4 <W8_to_Big+0xe4>
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <W8_to_Big+0xd0>
 80057ca:	e00b      	b.n	80057e4 <W8_to_Big+0xe4>
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d008      	beq.n	80057e2 <W8_to_Big+0xe2>
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80057d8:	3901      	subs	r1, #1
 80057da:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80057de:	2900      	cmp	r1, #0
 80057e0:	d0f4      	beq.n	80057cc <W8_to_Big+0xcc>
 80057e2:	8093      	strh	r3, [r2, #4]
 80057e4:	2000      	movs	r0, #0
 80057e6:	71d0      	strb	r0, [r2, #7]
 80057e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	b119      	cbz	r1, 80057f6 <W8_to_Big+0xf6>
 80057ee:	f241 40b8 	movw	r0, #5304	; 0x14b8
 80057f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7ff fede 	bl	80055b8 <SetZeroBig>
 80057fc:	2000      	movs	r0, #0
 80057fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	bf00      	nop

08005804 <Big_to_W8>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	4691      	mov	r9, r2
 800580a:	4688      	mov	r8, r1
 800580c:	4605      	mov	r5, r0
 800580e:	f7ff ff55 	bl	80056bc <CountBytes>
 8005812:	2800      	cmp	r0, #0
 8005814:	4602      	mov	r2, r0
 8005816:	bfb8      	it	lt
 8005818:	1cc2      	addlt	r2, r0, #3
 800581a:	1092      	asrs	r2, r2, #2
 800581c:	2a00      	cmp	r2, #0
 800581e:	dd2f      	ble.n	8005880 <Big_to_W8+0x7c>
 8005820:	eb08 0400 	add.w	r4, r8, r0
 8005824:	0097      	lsls	r7, r2, #2
 8005826:	2300      	movs	r3, #0
 8005828:	682e      	ldr	r6, [r5, #0]
 800582a:	58f1      	ldr	r1, [r6, r3]
 800582c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005830:	682e      	ldr	r6, [r5, #0]
 8005832:	58f1      	ldr	r1, [r6, r3]
 8005834:	0a09      	lsrs	r1, r1, #8
 8005836:	f804 1c02 	strb.w	r1, [r4, #-2]
 800583a:	682e      	ldr	r6, [r5, #0]
 800583c:	58f1      	ldr	r1, [r6, r3]
 800583e:	0c09      	lsrs	r1, r1, #16
 8005840:	f804 1c03 	strb.w	r1, [r4, #-3]
 8005844:	682e      	ldr	r6, [r5, #0]
 8005846:	58f6      	ldr	r6, [r6, r3]
 8005848:	3304      	adds	r3, #4
 800584a:	0e36      	lsrs	r6, r6, #24
 800584c:	42bb      	cmp	r3, r7
 800584e:	f804 6d04 	strb.w	r6, [r4, #-4]!
 8005852:	d1e9      	bne.n	8005828 <Big_to_W8+0x24>
 8005854:	f010 0303 	ands.w	r3, r0, #3
 8005858:	d009      	beq.n	800586e <Big_to_W8+0x6a>
 800585a:	6829      	ldr	r1, [r5, #0]
 800585c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005860:	4498      	add	r8, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005868:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800586c:	d1f9      	bne.n	8005862 <Big_to_W8+0x5e>
 800586e:	f1b9 0f00 	cmp.w	r9, #0
 8005872:	d003      	beq.n	800587c <Big_to_W8+0x78>
 8005874:	f8c9 0000 	str.w	r0, [r9]
 8005878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005880:	2200      	movs	r2, #0
 8005882:	e7e7      	b.n	8005854 <Big_to_W8+0x50>

08005884 <FastMulInnerBase>:
 8005884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005888:	8882      	ldrh	r2, [r0, #4]
 800588a:	7983      	ldrb	r3, [r0, #6]
 800588c:	440a      	add	r2, r1
 800588e:	429a      	cmp	r2, r3
 8005890:	4604      	mov	r4, r0
 8005892:	460d      	mov	r5, r1
 8005894:	dd04      	ble.n	80058a0 <FastMulInnerBase+0x1c>
 8005896:	f241 46b5 	movw	r6, #5301	; 0x14b5
 800589a:	4630      	mov	r0, r6
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a0:	f7ff fe7e 	bl	80055a0 <IsZeroBig>
 80058a4:	4606      	mov	r6, r0
 80058a6:	b9e8      	cbnz	r0, 80058e4 <FastMulInnerBase+0x60>
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	d0f6      	beq.n	800589a <FastMulInnerBase+0x16>
 80058ac:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	f1b8 0f01 	cmp.w	r8, #1
 80058b6:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80058ba:	d007      	beq.n	80058cc <FastMulInnerBase+0x48>
 80058bc:	eb00 0388 	add.w	r3, r0, r8, lsl #2
 80058c0:	1d07      	adds	r7, r0, #4
 80058c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058c6:	5099      	str	r1, [r3, r2]
 80058c8:	42bb      	cmp	r3, r7
 80058ca:	d1fa      	bne.n	80058c2 <FastMulInnerBase+0x3e>
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 80058d4:	bf08      	it	eq
 80058d6:	2204      	moveq	r2, #4
 80058d8:	2100      	movs	r1, #0
 80058da:	4445      	add	r5, r8
 80058dc:	f000 ff30 	bl	8006740 <memset>
 80058e0:	80a5      	strh	r5, [r4, #4]
 80058e2:	e7da      	b.n	800589a <FastMulInnerBase+0x16>
 80058e4:	2600      	movs	r6, #0
 80058e6:	e7d8      	b.n	800589a <FastMulInnerBase+0x16>

080058e8 <LeftShift>:
 80058e8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80058ec:	4681      	mov	r9, r0
 80058ee:	b3b1      	cbz	r1, 800595e <LeftShift+0x76>
 80058f0:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80058f4:	f8d0 c000 	ldr.w	ip, [r0]
 80058f8:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 80058fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005900:	f1c1 0720 	rsb	r7, r1, #32
 8005904:	f85c 502a 	ldr.w	r5, [ip, sl, lsl #2]
 8005908:	f1b8 0301 	subs.w	r3, r8, #1
 800590c:	eb0c 0a8a 	add.w	sl, ip, sl, lsl #2
 8005910:	fa25 f007 	lsr.w	r0, r5, r7
 8005914:	bf18      	it	ne
 8005916:	4652      	movne	r2, sl
 8005918:	d101      	bne.n	800591e <LeftShift+0x36>
 800591a:	e009      	b.n	8005930 <LeftShift+0x48>
 800591c:	4625      	mov	r5, r4
 800591e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8005922:	408d      	lsls	r5, r1
 8005924:	fa24 f607 	lsr.w	r6, r4, r7
 8005928:	4335      	orrs	r5, r6
 800592a:	3b01      	subs	r3, #1
 800592c:	6055      	str	r5, [r2, #4]
 800592e:	d1f5      	bne.n	800591c <LeftShift+0x34>
 8005930:	f8dc 3000 	ldr.w	r3, [ip]
 8005934:	fa03 f101 	lsl.w	r1, r3, r1
 8005938:	f8cc 1000 	str.w	r1, [ip]
 800593c:	b160      	cbz	r0, 8005958 <LeftShift+0x70>
 800593e:	f899 3006 	ldrb.w	r3, [r9, #6]
 8005942:	f108 0801 	add.w	r8, r8, #1
 8005946:	4598      	cmp	r8, r3
 8005948:	bf97      	itett	ls
 800594a:	f8ca 0004 	strls.w	r0, [sl, #4]
 800594e:	f241 40b5 	movwhi	r0, #5301	; 0x14b5
 8005952:	2000      	movls	r0, #0
 8005954:	f8a9 8004 	strhls.w	r8, [r9, #4]
 8005958:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800595c:	4770      	bx	lr
 800595e:	4608      	mov	r0, r1
 8005960:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop

08005968 <MulBigbyUnInt>:
 8005968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	4684      	mov	ip, r0
 800596e:	460f      	mov	r7, r1
 8005970:	b339      	cbz	r1, 80059c2 <MulBigbyUnInt+0x5a>
 8005972:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8005976:	f8d0 9000 	ldr.w	r9, [r0]
 800597a:	f1b8 0f00 	cmp.w	r8, #0
 800597e:	d01d      	beq.n	80059bc <MulBigbyUnInt+0x54>
 8005980:	f1a9 0604 	sub.w	r6, r9, #4
 8005984:	eb06 0188 	add.w	r1, r6, r8, lsl #2
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	6874      	ldr	r4, [r6, #4]
 800598e:	4692      	mov	sl, r2
 8005990:	469b      	mov	fp, r3
 8005992:	fbe7 ab04 	umlal	sl, fp, r7, r4
 8005996:	f846 af04 	str.w	sl, [r6, #4]!
 800599a:	428e      	cmp	r6, r1
 800599c:	465d      	mov	r5, fp
 800599e:	465a      	mov	r2, fp
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	d1f2      	bne.n	800598c <MulBigbyUnInt+0x24>
 80059a6:	b14d      	cbz	r5, 80059bc <MulBigbyUnInt+0x54>
 80059a8:	f89c 0006 	ldrb.w	r0, [ip, #6]
 80059ac:	f108 0101 	add.w	r1, r8, #1
 80059b0:	4281      	cmp	r1, r0
 80059b2:	d90b      	bls.n	80059cc <MulBigbyUnInt+0x64>
 80059b4:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80059b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059bc:	2000      	movs	r0, #0
 80059be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	f7ff fdf9 	bl	80055b8 <SetZeroBig>
 80059c6:	4638      	mov	r0, r7
 80059c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	f8ac 1004 	strh.w	r1, [ip, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f849 b028 	str.w	fp, [r9, r8, lsl #2]
 80059d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop

080059dc <Sub_Moduli_Big>:
 80059dc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80059e0:	8883      	ldrh	r3, [r0, #4]
 80059e2:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80059e6:	4692      	mov	sl, r2
 80059e8:	7992      	ldrb	r2, [r2, #6]
 80059ea:	454b      	cmp	r3, r9
 80059ec:	bf2c      	ite	cs
 80059ee:	4698      	movcs	r8, r3
 80059f0:	46c8      	movcc	r8, r9
 80059f2:	3201      	adds	r2, #1
 80059f4:	4590      	cmp	r8, r2
 80059f6:	d904      	bls.n	8005a02 <Sub_Moduli_Big+0x26>
 80059f8:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80059fc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005a00:	4770      	bx	lr
 8005a02:	7982      	ldrb	r2, [r0, #6]
 8005a04:	6807      	ldr	r7, [r0, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	bf28      	it	cs
 8005a0a:	2400      	movcs	r4, #0
 8005a0c:	d306      	bcc.n	8005a1c <Sub_Moduli_Big+0x40>
 8005a0e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 8005a12:	3301      	adds	r3, #1
 8005a14:	7982      	ldrb	r2, [r0, #6]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d2f8      	bcs.n	8005a0e <Sub_Moduli_Big+0x32>
 8005a1c:	798b      	ldrb	r3, [r1, #6]
 8005a1e:	f8d1 c000 	ldr.w	ip, [r1]
 8005a22:	454b      	cmp	r3, r9
 8005a24:	d308      	bcc.n	8005a38 <Sub_Moduli_Big+0x5c>
 8005a26:	464b      	mov	r3, r9
 8005a28:	2000      	movs	r0, #0
 8005a2a:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	798a      	ldrb	r2, [r1, #6]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d2f8      	bcs.n	8005a2a <Sub_Moduli_Big+0x4e>
 8005a38:	2500      	movs	r5, #0
 8005a3a:	f8da 6000 	ldr.w	r6, [sl]
 8005a3e:	f109 0901 	add.w	r9, r9, #1
 8005a42:	462c      	mov	r4, r5
 8005a44:	2200      	movs	r2, #0
 8005a46:	2300      	movs	r3, #0
 8005a48:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8005a4c:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 8005a50:	3401      	adds	r4, #1
 8005a52:	1a40      	subs	r0, r0, r1
 8005a54:	eb60 0100 	sbc.w	r1, r0, r0
 8005a58:	1880      	adds	r0, r0, r2
 8005a5a:	b2a4      	uxth	r4, r4
 8005a5c:	eb41 0103 	adc.w	r1, r1, r3
 8005a60:	454c      	cmp	r4, r9
 8005a62:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 8005a66:	460a      	mov	r2, r1
 8005a68:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8005a6c:	4625      	mov	r5, r4
 8005a6e:	d3eb      	bcc.n	8005a48 <Sub_Moduli_Big+0x6c>
 8005a70:	45a0      	cmp	r8, r4
 8005a72:	d90f      	bls.n	8005a94 <Sub_Moduli_Big+0xb8>
 8005a74:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005a78:	f104 0c01 	add.w	ip, r4, #1
 8005a7c:	1950      	adds	r0, r2, r5
 8005a7e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8005a82:	fa1f f48c 	uxth.w	r4, ip
 8005a86:	f143 0100 	adc.w	r1, r3, #0
 8005a8a:	45a0      	cmp	r8, r4
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8005a92:	d8ef      	bhi.n	8005a74 <Sub_Moduli_Big+0x98>
 8005a94:	b132      	cbz	r2, 8005aa4 <Sub_Moduli_Big+0xc8>
 8005a96:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	f06f 0201 	mvn.w	r2, #1
 8005aa0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 8005aa4:	1e63      	subs	r3, r4, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8005aac:	b942      	cbnz	r2, 8005ac0 <Sub_Moduli_Big+0xe4>
 8005aae:	b16b      	cbz	r3, 8005acc <Sub_Moduli_Big+0xf0>
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8005ab8:	2a00      	cmp	r2, #0
 8005aba:	d0f8      	beq.n	8005aae <Sub_Moduli_Big+0xd2>
 8005abc:	1c5c      	adds	r4, r3, #1
 8005abe:	b2a4      	uxth	r4, r4
 8005ac0:	f8aa 4004 	strh.w	r4, [sl, #4]
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005aca:	4770      	bx	lr
 8005acc:	2401      	movs	r4, #1
 8005ace:	f8aa 4004 	strh.w	r4, [sl, #4]
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	e7f7      	b.n	8005ac6 <Sub_Moduli_Big+0xea>
 8005ad6:	bf00      	nop

08005ad8 <SubBig>:
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	460d      	mov	r5, r1
 8005ae0:	ac02      	add	r4, sp, #8
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	f890 c006 	ldrb.w	ip, [r0, #6]
 8005ae8:	f844 1d04 	str.w	r1, [r4, #-4]!
 8005aec:	f895 e006 	ldrb.w	lr, [r5, #6]
 8005af0:	4606      	mov	r6, r0
 8005af2:	4690      	mov	r8, r2
 8005af4:	45f4      	cmp	ip, lr
 8005af6:	bf2c      	ite	cs
 8005af8:	4661      	movcs	r1, ip
 8005afa:	4671      	movcc	r1, lr
 8005afc:	4620      	mov	r0, r4
 8005afe:	461a      	mov	r2, r3
 8005b00:	461f      	mov	r7, r3
 8005b02:	f7ff fc53 	bl	80053ac <StAllocBig>
 8005b06:	b120      	cbz	r0, 8005b12 <SubBig+0x3a>
 8005b08:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8005b0c:	b002      	add	sp, #8
 8005b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b12:	9b01      	ldr	r3, [sp, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	809a      	strh	r2, [r3, #4]
 8005b18:	4630      	mov	r0, r6
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f7ff fd60 	bl	80055e0 <CompareBig>
 8005b20:	3003      	adds	r0, #3
 8005b22:	2806      	cmp	r0, #6
 8005b24:	d80d      	bhi.n	8005b42 <SubBig+0x6a>
 8005b26:	e8df f000 	tbb	[pc, r0]
 8005b2a:	3639      	.short	0x3639
 8005b2c:	262f3204 	.word	0x262f3204
 8005b30:	1d          	.byte	0x1d
 8005b31:	00          	.byte	0x00
 8005b32:	4628      	mov	r0, r5
 8005b34:	4631      	mov	r1, r6
 8005b36:	9a01      	ldr	r2, [sp, #4]
 8005b38:	f7ff ff50 	bl	80059dc <Sub_Moduli_Big>
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	71da      	strb	r2, [r3, #7]
 8005b42:	4640      	mov	r0, r8
 8005b44:	2100      	movs	r1, #0
 8005b46:	f7ff fc5d 	bl	8005404 <InitBig>
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	9801      	ldr	r0, [sp, #4]
 8005b4e:	f7ff fc75 	bl	800543c <CopyBig>
 8005b52:	4639      	mov	r1, r7
 8005b54:	4605      	mov	r5, r0
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff fc46 	bl	80053e8 <StFreeBig>
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	b002      	add	sp, #8
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b64:	9a01      	ldr	r2, [sp, #4]
 8005b66:	4630      	mov	r0, r6
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7ff fc9d 	bl	80054a8 <Add_Moduli_Big>
 8005b6e:	9b01      	ldr	r3, [sp, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	71da      	strb	r2, [r3, #7]
 8005b74:	e7e5      	b.n	8005b42 <SubBig+0x6a>
 8005b76:	4630      	mov	r0, r6
 8005b78:	4629      	mov	r1, r5
 8005b7a:	9a01      	ldr	r2, [sp, #4]
 8005b7c:	f7ff ff2e 	bl	80059dc <Sub_Moduli_Big>
 8005b80:	9b01      	ldr	r3, [sp, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	71da      	strb	r2, [r3, #7]
 8005b86:	e7dc      	b.n	8005b42 <SubBig+0x6a>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	e7f5      	b.n	8005b7a <SubBig+0xa2>
 8005b8e:	9801      	ldr	r0, [sp, #4]
 8005b90:	f7ff fd12 	bl	80055b8 <SetZeroBig>
 8005b94:	e7d5      	b.n	8005b42 <SubBig+0x6a>
 8005b96:	4630      	mov	r0, r6
 8005b98:	4629      	mov	r1, r5
 8005b9a:	e7cc      	b.n	8005b36 <SubBig+0x5e>
 8005b9c:	9a01      	ldr	r2, [sp, #4]
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7ff fc81 	bl	80054a8 <Add_Moduli_Big>
 8005ba6:	9b01      	ldr	r3, [sp, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	71da      	strb	r2, [r3, #7]
 8005bac:	e7c9      	b.n	8005b42 <SubBig+0x6a>
 8005bae:	bf00      	nop

08005bb0 <MontyInit>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	7981      	ldrb	r1, [r0, #6]
 8005bb8:	b083      	sub	sp, #12
 8005bba:	f10b 0a04 	add.w	sl, fp, #4
 8005bbe:	4680      	mov	r8, r0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	3102      	adds	r1, #2
 8005bc4:	4650      	mov	r0, sl
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	4691      	mov	r9, r2
 8005bca:	f7ff fbef 	bl	80053ac <StAllocBig>
 8005bce:	b128      	cbz	r0, 8005bdc <MontyInit+0x2c>
 8005bd0:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	b003      	add	sp, #12
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bdc:	4601      	mov	r1, r0
 8005bde:	f8cb 8000 	str.w	r8, [fp]
 8005be2:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005be6:	f7ff fc0d 	bl	8005404 <InitBig>
 8005bea:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8005bee:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005bf2:	f8d8 2000 	ldr.w	r2, [r8]
 8005bf6:	6819      	ldr	r1, [r3, #0]
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	8098      	strh	r0, [r3, #4]
 8005bfc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005c00:	2401      	movs	r4, #1
 8005c02:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	261f      	movs	r6, #31
 8005c0a:	2502      	movs	r5, #2
 8005c0c:	2703      	movs	r7, #3
 8005c0e:	fb02 f304 	mul.w	r3, r2, r4
 8005c12:	403b      	ands	r3, r7
 8005c14:	eb05 0e04 	add.w	lr, r5, r4
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	bf28      	it	cs
 8005c1c:	4674      	movcs	r4, lr
 8005c1e:	007f      	lsls	r7, r7, #1
 8005c20:	3e01      	subs	r6, #1
 8005c22:	f087 0701 	eor.w	r7, r7, #1
 8005c26:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8005c2a:	d1f0      	bne.n	8005c0e <MontyInit+0x5e>
 8005c2c:	4264      	negs	r4, r4
 8005c2e:	f8cb 4008 	str.w	r4, [fp, #8]
 8005c32:	f898 1006 	ldrb.w	r1, [r8, #6]
 8005c36:	a801      	add	r0, sp, #4
 8005c38:	3101      	adds	r1, #1
 8005c3a:	464a      	mov	r2, r9
 8005c3c:	f7ff fbb6 	bl	80053ac <StAllocBig>
 8005c40:	b148      	cbz	r0, 8005c56 <MontyInit+0xa6>
 8005c42:	4650      	mov	r0, sl
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7ff fbcf 	bl	80053e8 <StFreeBig>
 8005c4a:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8005c4e:	4638      	mov	r0, r7
 8005c50:	b003      	add	sp, #12
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	9901      	ldr	r1, [sp, #4]
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f7ff fbef 	bl	800543c <CopyBig>
 8005c5e:	9801      	ldr	r0, [sp, #4]
 8005c60:	f7ff fd08 	bl	8005674 <CountBits>
 8005c64:	4240      	negs	r0, r0
 8005c66:	f000 051f 	and.w	r5, r0, #31
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	9801      	ldr	r0, [sp, #4]
 8005c6e:	f7ff fe3b 	bl	80058e8 <LeftShift>
 8005c72:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005c76:	9901      	ldr	r1, [sp, #4]
 8005c78:	4602      	mov	r2, r0
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	f7ff ff2c 	bl	8005ad8 <SubBig>
 8005c80:	4607      	mov	r7, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d143      	bne.n	8005d0e <MontyInit+0x15e>
 8005c86:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005c8a:	b35b      	cbz	r3, 8005ce4 <MontyInit+0x134>
 8005c8c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c94:	3b01      	subs	r3, #1
 8005c96:	6802      	ldr	r2, [r0, #0]
 8005c98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	f7ff fdf1 	bl	8005884 <FastMulInnerBase>
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	d03e      	beq.n	8005d24 <MontyInit+0x174>
 8005ca6:	9901      	ldr	r1, [sp, #4]
 8005ca8:	4640      	mov	r0, r8
 8005caa:	f7ff fbc7 	bl	800543c <CopyBig>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	9801      	ldr	r0, [sp, #4]
 8005cb2:	f7ff fe59 	bl	8005968 <MulBigbyUnInt>
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	9801      	ldr	r0, [sp, #4]
 8005cba:	f7ff fe15 	bl	80058e8 <LeftShift>
 8005cbe:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005cc2:	9901      	ldr	r1, [sp, #4]
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	f7ff ff06 	bl	8005ad8 <SubBig>
 8005ccc:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005cd0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005cda:	2c00      	cmp	r4, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <MontyInit+0xf6>
 8005cde:	3601      	adds	r6, #1
 8005ce0:	429e      	cmp	r6, r3
 8005ce2:	d3d3      	bcc.n	8005c8c <MontyInit+0xdc>
 8005ce4:	a801      	add	r0, sp, #4
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	f7ff fb7e 	bl	80053e8 <StFreeBig>
 8005cec:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	f7ff fc75 	bl	80055e0 <CompareBig>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	dd06      	ble.n	8005d08 <MontyInit+0x158>
 8005cfa:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005cfe:	4641      	mov	r1, r8
 8005d00:	4602      	mov	r2, r0
 8005d02:	464b      	mov	r3, r9
 8005d04:	f7ff fee8 	bl	8005ad8 <SubBig>
 8005d08:	f8cb 900c 	str.w	r9, [fp, #12]
 8005d0c:	e762      	b.n	8005bd4 <MontyInit+0x24>
 8005d0e:	4650      	mov	r0, sl
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7ff fb69 	bl	80053e8 <StFreeBig>
 8005d16:	a801      	add	r0, sp, #4
 8005d18:	4649      	mov	r1, r9
 8005d1a:	f7ff fb65 	bl	80053e8 <StFreeBig>
 8005d1e:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8005d22:	e757      	b.n	8005bd4 <MontyInit+0x24>
 8005d24:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005d28:	e7d9      	b.n	8005cde <MontyInit+0x12e>
 8005d2a:	bf00      	nop

08005d2c <MontyKillR2>:
 8005d2c:	b508      	push	{r3, lr}
 8005d2e:	4603      	mov	r3, r0
 8005d30:	3004      	adds	r0, #4
 8005d32:	68d9      	ldr	r1, [r3, #12]
 8005d34:	f7ff fb58 	bl	80053e8 <StFreeBig>
 8005d38:	bd08      	pop	{r3, pc}
 8005d3a:	bf00      	nop

08005d3c <MontyKillAll>:
 8005d3c:	6841      	ldr	r1, [r0, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	b508      	push	{r3, lr}
 8005d42:	4603      	mov	r3, r0
 8005d44:	6002      	str	r2, [r0, #0]
 8005d46:	6082      	str	r2, [r0, #8]
 8005d48:	b119      	cbz	r1, 8005d52 <MontyKillAll+0x16>
 8005d4a:	3004      	adds	r0, #4
 8005d4c:	68d9      	ldr	r1, [r3, #12]
 8005d4e:	f7ff fb4b 	bl	80053e8 <StFreeBig>
 8005d52:	bd08      	pop	{r3, pc}

08005d54 <MontyMul>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	b09f      	sub	sp, #124	; 0x7c
 8005d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005d5e:	921a      	str	r2, [sp, #104]	; 0x68
 8005d60:	682c      	ldr	r4, [r5, #0]
 8005d62:	ab1e      	add	r3, sp, #120	; 0x78
 8005d64:	9315      	str	r3, [sp, #84]	; 0x54
 8005d66:	68ab      	ldr	r3, [r5, #8]
 8005d68:	88a5      	ldrh	r5, [r4, #4]
 8005d6a:	9318      	str	r3, [sp, #96]	; 0x60
 8005d6c:	950a      	str	r5, [sp, #40]	; 0x28
 8005d6e:	79a3      	ldrb	r3, [r4, #6]
 8005d70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005d72:	6824      	ldr	r4, [r4, #0]
 8005d74:	9414      	str	r4, [sp, #80]	; 0x50
 8005d76:	2400      	movs	r4, #0
 8005d78:	f845 4d04 	str.w	r4, [r5, #-4]!
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d82:	9515      	str	r5, [sp, #84]	; 0x54
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005d8e:	f7ff fb0d 	bl	80053ac <StAllocBig>
 8005d92:	4606      	mov	r6, r0
 8005d94:	b120      	cbz	r0, 8005da0 <MontyMul+0x4c>
 8005d96:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8005d9a:	b01f      	add	sp, #124	; 0x7c
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005da2:	4631      	mov	r1, r6
 8005da4:	f7ff fb2e 	bl	8005404 <InitBig>
 8005da8:	88a0      	ldrh	r0, [r4, #4]
 8005daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005dae:	941b      	str	r4, [sp, #108]	; 0x6c
 8005db0:	4283      	cmp	r3, r0
 8005db2:	6827      	ldr	r7, [r4, #0]
 8005db4:	d907      	bls.n	8005dc6 <MontyMul+0x72>
 8005db6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005db8:	1a1a      	subs	r2, r3, r0
 8005dba:	4631      	mov	r1, r6
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005dc2:	f000 fcbd 	bl	8006740 <memset>
 8005dc6:	88ab      	ldrh	r3, [r5, #4]
 8005dc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005dca:	429c      	cmp	r4, r3
 8005dcc:	f240 80c5 	bls.w	8005f5a <MontyMul+0x206>
 8005dd0:	6828      	ldr	r0, [r5, #0]
 8005dd2:	1ae2      	subs	r2, r4, r3
 8005dd4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005dd8:	0092      	lsls	r2, r2, #2
 8005dda:	2100      	movs	r1, #0
 8005ddc:	f000 fcb0 	bl	8006740 <memset>
 8005de0:	6829      	ldr	r1, [r5, #0]
 8005de2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005de4:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8005de8:	00ab      	lsls	r3, r5, #2
 8005dea:	3801      	subs	r0, #1
 8005dec:	1f1a      	subs	r2, r3, #4
 8005dee:	0080      	lsls	r0, r0, #2
 8005df0:	3904      	subs	r1, #4
 8005df2:	18ba      	adds	r2, r7, r2
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	9007      	str	r0, [sp, #28]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	9116      	str	r1, [sp, #88]	; 0x58
 8005dfc:	9219      	str	r2, [sp, #100]	; 0x64
 8005dfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e00:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e02:	46bc      	mov	ip, r7
 8005e04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005e08:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8005e0c:	9106      	str	r1, [sp, #24]
 8005e0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005e10:	6821      	ldr	r1, [r4, #0]
 8005e12:	9806      	ldr	r0, [sp, #24]
 8005e14:	f8dc 2000 	ldr.w	r2, [ip]
 8005e18:	682c      	ldr	r4, [r5, #0]
 8005e1a:	9316      	str	r3, [sp, #88]	; 0x58
 8005e1c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8005e1e:	2300      	movs	r3, #0
 8005e20:	fbe1 2300 	umlal	r2, r3, r1, r0
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	2100      	movs	r1, #0
 8005e2a:	fb02 fe05 	mul.w	lr, r2, r5
 8005e2e:	4010      	ands	r0, r2
 8005e30:	4019      	ands	r1, r3
 8005e32:	fbe4 010e 	umlal	r0, r1, r4, lr
 8005e36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e38:	2c01      	cmp	r4, #1
 8005e3a:	d02c      	beq.n	8005e96 <MontyMul+0x142>
 8005e3c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005e3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005e40:	4666      	mov	r6, ip
 8005e42:	2400      	movs	r4, #0
 8005e44:	469b      	mov	fp, r3
 8005e46:	f04f 0900 	mov.w	r9, #0
 8005e4a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8005e4e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005e52:	9104      	str	r1, [sp, #16]
 8005e54:	f8cd 9014 	str.w	r9, [sp, #20]
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e5e:	eb1b 0a02 	adds.w	sl, fp, r2
 8005e62:	9a03      	ldr	r2, [sp, #12]
 8005e64:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8005e68:	fbee 0102 	umlal	r0, r1, lr, r2
 8005e6c:	e9cd 0100 	strd	r0, r1, [sp]
 8005e70:	9806      	ldr	r0, [sp, #24]
 8005e72:	9a07      	ldr	r2, [sp, #28]
 8005e74:	f149 0b00 	adc.w	fp, r9, #0
 8005e78:	fbe0 ab03 	umlal	sl, fp, r0, r3
 8005e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e80:	eb10 000a 	adds.w	r0, r0, sl
 8005e84:	f84c 0004 	str.w	r0, [ip, r4]
 8005e88:	f104 0404 	add.w	r4, r4, #4
 8005e8c:	f141 0100 	adc.w	r1, r1, #0
 8005e90:	4294      	cmp	r4, r2
 8005e92:	d1d8      	bne.n	8005e46 <MontyMul+0xf2>
 8005e94:	465b      	mov	r3, fp
 8005e96:	2500      	movs	r5, #0
 8005e98:	9308      	str	r3, [sp, #32]
 8005e9a:	9509      	str	r5, [sp, #36]	; 0x24
 8005e9c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005e9e:	910c      	str	r1, [sp, #48]	; 0x30
 8005ea0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	950d      	str	r5, [sp, #52]	; 0x34
 8005ea8:	18c0      	adds	r0, r0, r3
 8005eaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005eae:	f141 0100 	adc.w	r1, r1, #0
 8005eb2:	9110      	str	r1, [sp, #64]	; 0x40
 8005eb4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005eb6:	950f      	str	r5, [sp, #60]	; 0x3c
 8005eb8:	1812      	adds	r2, r2, r0
 8005eba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005ebc:	600a      	str	r2, [r1, #0]
 8005ebe:	f143 0300 	adc.w	r3, r3, #0
 8005ec2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ec6:	9511      	str	r5, [sp, #68]	; 0x44
 8005ec8:	4403      	add	r3, r0
 8005eca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	42ab      	cmp	r3, r5
 8005ed4:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ed6:	d895      	bhi.n	8005e04 <MontyMul+0xb0>
 8005ed8:	4667      	mov	r7, ip
 8005eda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005edc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005ede:	1c6b      	adds	r3, r5, #1
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	80a3      	strh	r3, [r4, #4]
 8005ee6:	d915      	bls.n	8005f14 <MontyMul+0x1c0>
 8005ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005eec:	3b01      	subs	r3, #1
 8005eee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005ef2:	b97b      	cbnz	r3, 8005f14 <MontyMul+0x1c0>
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef6:	e005      	b.n	8005f04 <MontyMul+0x1b0>
 8005ef8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005efc:	1e59      	subs	r1, r3, #1
 8005efe:	b289      	uxth	r1, r1
 8005f00:	bb12      	cbnz	r2, 8005f48 <MontyMul+0x1f4>
 8005f02:	460b      	mov	r3, r1
 8005f04:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f0e:	d1f3      	bne.n	8005ef8 <MontyMul+0x1a4>
 8005f10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005f12:	80ab      	strh	r3, [r5, #4]
 8005f14:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005f16:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005f18:	6821      	ldr	r1, [r4, #0]
 8005f1a:	f7ff fb61 	bl	80055e0 <CompareBig>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	db15      	blt.n	8005f4e <MontyMul+0x1fa>
 8005f22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005f24:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005f26:	6829      	ldr	r1, [r5, #0]
 8005f28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f2a:	f7ff fd57 	bl	80059dc <Sub_Moduli_Big>
 8005f2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005f30:	2300      	movs	r3, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	71eb      	strb	r3, [r5, #7]
 8005f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f38:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005f3a:	68d9      	ldr	r1, [r3, #12]
 8005f3c:	f7ff fa54 	bl	80053e8 <StFreeBig>
 8005f40:	4620      	mov	r0, r4
 8005f42:	b01f      	add	sp, #124	; 0x7c
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005f4a:	80a3      	strh	r3, [r4, #4]
 8005f4c:	e7e2      	b.n	8005f14 <MontyMul+0x1c0>
 8005f4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005f52:	f7ff fa73 	bl	800543c <CopyBig>
 8005f56:	4604      	mov	r4, r0
 8005f58:	e7ed      	b.n	8005f36 <MontyMul+0x1e2>
 8005f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0bc      	beq.n	8005eda <MontyMul+0x186>
 8005f60:	e73e      	b.n	8005de0 <MontyMul+0x8c>
 8005f62:	bf00      	nop

08005f64 <MontyExit>:
 8005f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f66:	b083      	sub	sp, #12
 8005f68:	ac02      	add	r4, sp, #8
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	f844 3d04 	str.w	r3, [r4, #-4]!
 8005f72:	4615      	mov	r5, r2
 8005f74:	460f      	mov	r7, r1
 8005f76:	4620      	mov	r0, r4
 8005f78:	79b1      	ldrb	r1, [r6, #6]
 8005f7a:	68d2      	ldr	r2, [r2, #12]
 8005f7c:	f7ff fa16 	bl	80053ac <StAllocBig>
 8005f80:	b118      	cbz	r0, 8005f8a <MontyExit+0x26>
 8005f82:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8005f86:	b003      	add	sp, #12
 8005f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8a:	9801      	ldr	r0, [sp, #4]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	f7ff fa39 	bl	8005404 <InitBig>
 8005f92:	463a      	mov	r2, r7
 8005f94:	9901      	ldr	r1, [sp, #4]
 8005f96:	462b      	mov	r3, r5
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7ff fedb 	bl	8005d54 <MontyMul>
 8005f9e:	68e9      	ldr	r1, [r5, #12]
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff fa20 	bl	80053e8 <StFreeBig>
 8005fa8:	4630      	mov	r0, r6
 8005faa:	b003      	add	sp, #12
 8005fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fae:	bf00      	nop

08005fb0 <ModularExpSlidWin>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	8889      	ldrh	r1, [r1, #4]
 8005fb8:	b091      	sub	sp, #68	; 0x44
 8005fba:	2901      	cmp	r1, #1
 8005fbc:	4681      	mov	r9, r0
 8005fbe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	469a      	mov	sl, r3
 8005fc4:	f240 80d0 	bls.w	8006168 <ModularExpSlidWin+0x1b8>
 8005fc8:	f06f 0108 	mvn.w	r1, #8
 8005fcc:	2308      	movs	r3, #8
 8005fce:	9106      	str	r1, [sp, #24]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	2104      	movs	r1, #4
 8005fd4:	469c      	mov	ip, r3
 8005fd6:	9205      	str	r2, [sp, #20]
 8005fd8:	f04f 0820 	mov.w	r8, #32
 8005fdc:	f04f 0b03 	mov.w	fp, #3
 8005fe0:	9104      	str	r1, [sp, #16]
 8005fe2:	79b2      	ldrb	r2, [r6, #6]
 8005fe4:	88e5      	ldrh	r5, [r4, #6]
 8005fe6:	00d1      	lsls	r1, r2, #3
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	311c      	adds	r1, #28
 8005fec:	3211      	adds	r2, #17
 8005fee:	fb02 1303 	mla	r3, r2, r3, r1
 8005ff2:	88a1      	ldrh	r1, [r4, #4]
 8005ff4:	442b      	add	r3, r5
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	da05      	bge.n	8006006 <ModularExpSlidWin+0x56>
 8005ffa:	f240 35ed 	movw	r5, #1005	; 0x3ed
 8005ffe:	4628      	mov	r0, r5
 8006000:	b011      	add	sp, #68	; 0x44
 8006002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	eb08 0305 	add.w	r3, r8, r5
 800600e:	80e3      	strh	r3, [r4, #6]
 8006010:	1953      	adds	r3, r2, r5
 8006012:	9307      	str	r3, [sp, #28]
 8006014:	d0f1      	beq.n	8005ffa <ModularExpSlidWin+0x4a>
 8006016:	a90c      	add	r1, sp, #48	; 0x30
 8006018:	4630      	mov	r0, r6
 800601a:	4622      	mov	r2, r4
 800601c:	f8cd c004 	str.w	ip, [sp, #4]
 8006020:	f7ff fdc6 	bl	8005bb0 <MontyInit>
 8006024:	2800      	cmp	r0, #0
 8006026:	d1e8      	bne.n	8005ffa <ModularExpSlidWin+0x4a>
 8006028:	ab0c      	add	r3, sp, #48	; 0x30
 800602a:	4648      	mov	r0, r9
 800602c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800602e:	464a      	mov	r2, r9
 8006030:	f7ff fe90 	bl	8005d54 <MontyMul>
 8006034:	4603      	mov	r3, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	d1df      	bne.n	8005ffa <ModularExpSlidWin+0x4a>
 800603a:	a80c      	add	r0, sp, #48	; 0x30
 800603c:	9302      	str	r3, [sp, #8]
 800603e:	f7ff fe75 	bl	8005d2c <MontyKillR2>
 8006042:	9b02      	ldr	r3, [sp, #8]
 8006044:	9308      	str	r3, [sp, #32]
 8006046:	f8dd c004 	ldr.w	ip, [sp, #4]
 800604a:	9b07      	ldr	r3, [sp, #28]
 800604c:	970b      	str	r7, [sp, #44]	; 0x2c
 800604e:	9f08      	ldr	r7, [sp, #32]
 8006050:	9509      	str	r5, [sp, #36]	; 0x24
 8006052:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006056:	4665      	mov	r5, ip
 8006058:	4698      	mov	r8, r3
 800605a:	4640      	mov	r0, r8
 800605c:	79b1      	ldrb	r1, [r6, #6]
 800605e:	4622      	mov	r2, r4
 8006060:	3701      	adds	r7, #1
 8006062:	f108 0804 	add.w	r8, r8, #4
 8006066:	f7ff f9a1 	bl	80053ac <StAllocBig>
 800606a:	2800      	cmp	r0, #0
 800606c:	d1c5      	bne.n	8005ffa <ModularExpSlidWin+0x4a>
 800606e:	42af      	cmp	r7, r5
 8006070:	dbf3      	blt.n	800605a <ModularExpSlidWin+0xaa>
 8006072:	4602      	mov	r2, r0
 8006074:	46ac      	mov	ip, r5
 8006076:	4611      	mov	r1, r2
 8006078:	4650      	mov	r0, sl
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	f8cd c004 	str.w	ip, [sp, #4]
 8006080:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006082:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006086:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006088:	f7ff f9bc 	bl	8005404 <InitBig>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	4648      	mov	r0, r9
 8006090:	5959      	ldr	r1, [r3, r5]
 8006092:	f7ff f9d3 	bl	800543c <CopyBig>
 8006096:	9a02      	ldr	r2, [sp, #8]
 8006098:	f8dd c004 	ldr.w	ip, [sp, #4]
 800609c:	f1bb 0f00 	cmp.w	fp, #0
 80060a0:	d013      	beq.n	80060ca <ModularExpSlidWin+0x11a>
 80060a2:	4623      	mov	r3, r4
 80060a4:	9e07      	ldr	r6, [sp, #28]
 80060a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80060aa:	4614      	mov	r4, r2
 80060ac:	461d      	mov	r5, r3
 80060ae:	6830      	ldr	r0, [r6, #0]
 80060b0:	ab0c      	add	r3, sp, #48	; 0x30
 80060b2:	4601      	mov	r1, r0
 80060b4:	4602      	mov	r2, r0
 80060b6:	3401      	adds	r4, #1
 80060b8:	f7ff fe4c 	bl	8005d54 <MontyMul>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d19c      	bne.n	8005ffa <ModularExpSlidWin+0x4a>
 80060c0:	455c      	cmp	r4, fp
 80060c2:	d1f4      	bne.n	80060ae <ModularExpSlidWin+0xfe>
 80060c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80060c8:	462c      	mov	r4, r5
 80060ca:	f1bc 0f01 	cmp.w	ip, #1
 80060ce:	d010      	beq.n	80060f2 <ModularExpSlidWin+0x142>
 80060d0:	9907      	ldr	r1, [sp, #28]
 80060d2:	2601      	movs	r6, #1
 80060d4:	1f0d      	subs	r5, r1, #4
 80060d6:	46e3      	mov	fp, ip
 80060d8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80060dc:	4649      	mov	r1, r9
 80060de:	686a      	ldr	r2, [r5, #4]
 80060e0:	ab0c      	add	r3, sp, #48	; 0x30
 80060e2:	3601      	adds	r6, #1
 80060e4:	f7ff fe36 	bl	8005d54 <MontyMul>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d186      	bne.n	8005ffa <ModularExpSlidWin+0x4a>
 80060ec:	455e      	cmp	r6, fp
 80060ee:	d1f3      	bne.n	80060d8 <ModularExpSlidWin+0x128>
 80060f0:	46dc      	mov	ip, fp
 80060f2:	88bb      	ldrh	r3, [r7, #4]
 80060f4:	f8cd c004 	str.w	ip, [sp, #4]
 80060f8:	2600      	movs	r6, #0
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4648      	mov	r0, r9
 80060fe:	4651      	mov	r1, sl
 8006100:	9603      	str	r6, [sp, #12]
 8006102:	9308      	str	r3, [sp, #32]
 8006104:	f7ff f99a 	bl	800543c <CopyBig>
 8006108:	f8dd c004 	ldr.w	ip, [sp, #4]
 800610c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006110:	4635      	mov	r5, r6
 8006112:	46b4      	mov	ip, r6
 8006114:	940a      	str	r4, [sp, #40]	; 0x28
 8006116:	4634      	mov	r4, r6
 8006118:	9e04      	ldr	r6, [sp, #16]
 800611a:	f04f 0b01 	mov.w	fp, #1
 800611e:	f1bb 0b01 	subs.w	fp, fp, #1
 8006122:	d109      	bne.n	8006138 <ModularExpSlidWin+0x188>
 8006124:	9a08      	ldr	r2, [sp, #32]
 8006126:	1c53      	adds	r3, r2, #1
 8006128:	d05f      	beq.n	80061ea <ModularExpSlidWin+0x23a>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8006130:	3a01      	subs	r2, #1
 8006132:	f04f 0b20 	mov.w	fp, #32
 8006136:	9208      	str	r2, [sp, #32]
 8006138:	0fe3      	lsrs	r3, r4, #31
 800613a:	0064      	lsls	r4, r4, #1
 800613c:	f1bc 0f00 	cmp.w	ip, #0
 8006140:	d01f      	beq.n	8006182 <ModularExpSlidWin+0x1d2>
 8006142:	f1bc 0f01 	cmp.w	ip, #1
 8006146:	d101      	bne.n	800614c <ModularExpSlidWin+0x19c>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d040      	beq.n	80061ce <ModularExpSlidWin+0x21e>
 800614c:	3501      	adds	r5, #1
 800614e:	9903      	ldr	r1, [sp, #12]
 8006150:	1b72      	subs	r2, r6, r5
 8006152:	4093      	lsls	r3, r2
 8006154:	4319      	orrs	r1, r3
 8006156:	42b5      	cmp	r5, r6
 8006158:	9103      	str	r1, [sp, #12]
 800615a:	d019      	beq.n	8006190 <ModularExpSlidWin+0x1e0>
 800615c:	f1bb 0b01 	subs.w	fp, fp, #1
 8006160:	f04f 0c02 	mov.w	ip, #2
 8006164:	d1e8      	bne.n	8006138 <ModularExpSlidWin+0x188>
 8006166:	e7dd      	b.n	8006124 <ModularExpSlidWin+0x174>
 8006168:	2301      	movs	r3, #1
 800616a:	f06f 0101 	mvn.w	r1, #1
 800616e:	2202      	movs	r2, #2
 8006170:	469c      	mov	ip, r3
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	9106      	str	r1, [sp, #24]
 8006176:	9205      	str	r2, [sp, #20]
 8006178:	f04f 0804 	mov.w	r8, #4
 800617c:	f04f 0b00 	mov.w	fp, #0
 8006180:	e72f      	b.n	8005fe2 <ModularExpSlidWin+0x32>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0cb      	beq.n	800611e <ModularExpSlidWin+0x16e>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0e0      	beq.n	800614c <ModularExpSlidWin+0x19c>
 800618a:	f04f 0c01 	mov.w	ip, #1
 800618e:	e7c6      	b.n	800611e <ModularExpSlidWin+0x16e>
 8006190:	2500      	movs	r5, #0
 8006192:	4650      	mov	r0, sl
 8006194:	4651      	mov	r1, sl
 8006196:	4652      	mov	r2, sl
 8006198:	ab0c      	add	r3, sp, #48	; 0x30
 800619a:	3501      	adds	r5, #1
 800619c:	f7ff fdda 	bl	8005d54 <MontyMul>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	f47f af2a 	bne.w	8005ffa <ModularExpSlidWin+0x4a>
 80061a6:	42ae      	cmp	r6, r5
 80061a8:	dcf3      	bgt.n	8006192 <ModularExpSlidWin+0x1e2>
 80061aa:	9a03      	ldr	r2, [sp, #12]
 80061ac:	9906      	ldr	r1, [sp, #24]
 80061ae:	ea02 0301 	and.w	r3, r2, r1
 80061b2:	9a07      	ldr	r2, [sp, #28]
 80061b4:	4650      	mov	r0, sl
 80061b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061ba:	4652      	mov	r2, sl
 80061bc:	ab0c      	add	r3, sp, #48	; 0x30
 80061be:	f7ff fdc9 	bl	8005d54 <MontyMul>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f47f af19 	bne.w	8005ffa <ModularExpSlidWin+0x4a>
 80061c8:	9003      	str	r0, [sp, #12]
 80061ca:	4605      	mov	r5, r0
 80061cc:	e7dd      	b.n	800618a <ModularExpSlidWin+0x1da>
 80061ce:	4650      	mov	r0, sl
 80061d0:	4651      	mov	r1, sl
 80061d2:	4652      	mov	r2, sl
 80061d4:	ab0c      	add	r3, sp, #48	; 0x30
 80061d6:	f8cd c004 	str.w	ip, [sp, #4]
 80061da:	f7ff fdbb 	bl	8005d54 <MontyMul>
 80061de:	f8dd c004 	ldr.w	ip, [sp, #4]
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f47f af09 	bne.w	8005ffa <ModularExpSlidWin+0x4a>
 80061e8:	e799      	b.n	800611e <ModularExpSlidWin+0x16e>
 80061ea:	4663      	mov	r3, ip
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80061f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061f4:	d11f      	bne.n	8006236 <ModularExpSlidWin+0x286>
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	dd1d      	ble.n	8006236 <ModularExpSlidWin+0x286>
 80061fa:	9e03      	ldr	r6, [sp, #12]
 80061fc:	4667      	mov	r7, ip
 80061fe:	e001      	b.n	8006204 <ModularExpSlidWin+0x254>
 8006200:	45ab      	cmp	fp, r5
 8006202:	d017      	beq.n	8006234 <ModularExpSlidWin+0x284>
 8006204:	4650      	mov	r0, sl
 8006206:	4651      	mov	r1, sl
 8006208:	4652      	mov	r2, sl
 800620a:	ab0c      	add	r3, sp, #48	; 0x30
 800620c:	0076      	lsls	r6, r6, #1
 800620e:	f10b 0b01 	add.w	fp, fp, #1
 8006212:	f7ff fd9f 	bl	8005d54 <MontyMul>
 8006216:	2800      	cmp	r0, #0
 8006218:	f47f aeef 	bne.w	8005ffa <ModularExpSlidWin+0x4a>
 800621c:	9b05      	ldr	r3, [sp, #20]
 800621e:	4233      	tst	r3, r6
 8006220:	d0ee      	beq.n	8006200 <ModularExpSlidWin+0x250>
 8006222:	4650      	mov	r0, sl
 8006224:	4649      	mov	r1, r9
 8006226:	4652      	mov	r2, sl
 8006228:	ab0c      	add	r3, sp, #48	; 0x30
 800622a:	f7ff fd93 	bl	8005d54 <MontyMul>
 800622e:	2800      	cmp	r0, #0
 8006230:	d0e6      	beq.n	8006200 <ModularExpSlidWin+0x250>
 8006232:	e6e2      	b.n	8005ffa <ModularExpSlidWin+0x4a>
 8006234:	46bc      	mov	ip, r7
 8006236:	4650      	mov	r0, sl
 8006238:	4651      	mov	r1, sl
 800623a:	aa0c      	add	r2, sp, #48	; 0x30
 800623c:	f8cd c004 	str.w	ip, [sp, #4]
 8006240:	f7ff fe90 	bl	8005f64 <MontyExit>
 8006244:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006248:	4605      	mov	r5, r0
 800624a:	2800      	cmp	r0, #0
 800624c:	f47f aed5 	bne.w	8005ffa <ModularExpSlidWin+0x4a>
 8006250:	a80c      	add	r0, sp, #48	; 0x30
 8006252:	f8cd c004 	str.w	ip, [sp, #4]
 8006256:	f7ff fd71 	bl	8005d3c <MontyKillAll>
 800625a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800625e:	462e      	mov	r6, r5
 8006260:	4667      	mov	r7, ip
 8006262:	9907      	ldr	r1, [sp, #28]
 8006264:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8006268:	4621      	mov	r1, r4
 800626a:	3601      	adds	r6, #1
 800626c:	f7ff f8bc 	bl	80053e8 <StFreeBig>
 8006270:	42be      	cmp	r6, r7
 8006272:	dbf6      	blt.n	8006262 <ModularExpSlidWin+0x2b2>
 8006274:	88e3      	ldrh	r3, [r4, #6]
 8006276:	ebc8 0803 	rsb	r8, r8, r3
 800627a:	f8a4 8006 	strh.w	r8, [r4, #6]
 800627e:	e6be      	b.n	8005ffe <ModularExpSlidWin+0x4e>

08006280 <RSAVP1>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	b089      	sub	sp, #36	; 0x24
 8006286:	2400      	movs	r4, #0
 8006288:	469a      	mov	sl, r3
 800628a:	460d      	mov	r5, r1
 800628c:	4690      	mov	r8, r2
 800628e:	6886      	ldr	r6, [r0, #8]
 8006290:	68c3      	ldr	r3, [r0, #12]
 8006292:	9404      	str	r4, [sp, #16]
 8006294:	e890 0880 	ldmia.w	r0, {r7, fp}
 8006298:	9405      	str	r4, [sp, #20]
 800629a:	9406      	str	r4, [sp, #24]
 800629c:	9407      	str	r4, [sp, #28]
 800629e:	b141      	cbz	r1, 80062b2 <RSAVP1+0x32>
 80062a0:	b13e      	cbz	r6, 80062b2 <RSAVP1+0x32>
 80062a2:	b137      	cbz	r7, 80062b2 <RSAVP1+0x32>
 80062a4:	b12a      	cbz	r2, 80062b2 <RSAVP1+0x32>
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	dd03      	ble.n	80062b2 <RSAVP1+0x32>
 80062aa:	45a3      	cmp	fp, r4
 80062ac:	dd01      	ble.n	80062b2 <RSAVP1+0x32>
 80062ae:	455b      	cmp	r3, fp
 80062b0:	dd05      	ble.n	80062be <RSAVP1+0x3e>
 80062b2:	f241 34ef 	movw	r4, #5103	; 0x13ef
 80062b6:	4620      	mov	r0, r4
 80062b8:	b009      	add	sp, #36	; 0x24
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	f10b 0203 	add.w	r2, fp, #3
 80062c2:	ea4f 0992 	mov.w	r9, r2, lsr #2
 80062c6:	4649      	mov	r1, r9
 80062c8:	a804      	add	r0, sp, #16
 80062ca:	4652      	mov	r2, sl
 80062cc:	9303      	str	r3, [sp, #12]
 80062ce:	f7ff f86d 	bl	80053ac <StAllocBig>
 80062d2:	4604      	mov	r4, r0
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d1ee      	bne.n	80062b6 <RSAVP1+0x36>
 80062d8:	4649      	mov	r1, r9
 80062da:	a806      	add	r0, sp, #24
 80062dc:	4652      	mov	r2, sl
 80062de:	f7ff f865 	bl	80053ac <StAllocBig>
 80062e2:	4604      	mov	r4, r0
 80062e4:	b120      	cbz	r0, 80062f0 <RSAVP1+0x70>
 80062e6:	a804      	add	r0, sp, #16
 80062e8:	4651      	mov	r1, sl
 80062ea:	f7ff f87d 	bl	80053e8 <StFreeBig>
 80062ee:	e7e2      	b.n	80062b6 <RSAVP1+0x36>
 80062f0:	4659      	mov	r1, fp
 80062f2:	9a06      	ldr	r2, [sp, #24]
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff fa03 	bl	8005700 <W8_to_Big>
 80062fa:	4659      	mov	r1, fp
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff f9fe 	bl	8005700 <W8_to_Big>
 8006304:	9804      	ldr	r0, [sp, #16]
 8006306:	9906      	ldr	r1, [sp, #24]
 8006308:	f7ff f96a 	bl	80055e0 <CompareBig>
 800630c:	2800      	cmp	r0, #0
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	db06      	blt.n	8006320 <RSAVP1+0xa0>
 8006312:	f241 34f2 	movw	r4, #5106	; 0x13f2
 8006316:	a806      	add	r0, sp, #24
 8006318:	4651      	mov	r1, sl
 800631a:	f7ff f865 	bl	80053e8 <StFreeBig>
 800631e:	e7e2      	b.n	80062e6 <RSAVP1+0x66>
 8006320:	1cd9      	adds	r1, r3, #3
 8006322:	a807      	add	r0, sp, #28
 8006324:	0889      	lsrs	r1, r1, #2
 8006326:	4652      	mov	r2, sl
 8006328:	f7ff f840 	bl	80053ac <StAllocBig>
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	4604      	mov	r4, r0
 8006330:	2800      	cmp	r0, #0
 8006332:	d1f0      	bne.n	8006316 <RSAVP1+0x96>
 8006334:	4619      	mov	r1, r3
 8006336:	9a07      	ldr	r2, [sp, #28]
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff f9e1 	bl	8005700 <W8_to_Big>
 800633e:	9b06      	ldr	r3, [sp, #24]
 8006340:	a805      	add	r0, sp, #20
 8006342:	7999      	ldrb	r1, [r3, #6]
 8006344:	4652      	mov	r2, sl
 8006346:	f7ff f831 	bl	80053ac <StAllocBig>
 800634a:	4604      	mov	r4, r0
 800634c:	b120      	cbz	r0, 8006358 <RSAVP1+0xd8>
 800634e:	a807      	add	r0, sp, #28
 8006350:	4651      	mov	r1, sl
 8006352:	f7ff f849 	bl	80053e8 <StFreeBig>
 8006356:	e7de      	b.n	8006316 <RSAVP1+0x96>
 8006358:	f8cd a000 	str.w	sl, [sp]
 800635c:	9804      	ldr	r0, [sp, #16]
 800635e:	9907      	ldr	r1, [sp, #28]
 8006360:	9a06      	ldr	r2, [sp, #24]
 8006362:	9b05      	ldr	r3, [sp, #20]
 8006364:	f7ff fe24 	bl	8005fb0 <ModularExpSlidWin>
 8006368:	4604      	mov	r4, r0
 800636a:	b9b8      	cbnz	r0, 800639c <RSAVP1+0x11c>
 800636c:	4605      	mov	r5, r0
 800636e:	4606      	mov	r6, r0
 8006370:	e002      	b.n	8006378 <RSAVP1+0xf8>
 8006372:	f808 6005 	strb.w	r6, [r8, r5]
 8006376:	3501      	adds	r5, #1
 8006378:	9805      	ldr	r0, [sp, #20]
 800637a:	f7ff f99f 	bl	80056bc <CountBytes>
 800637e:	ebc0 000b 	rsb	r0, r0, fp
 8006382:	4285      	cmp	r5, r0
 8006384:	dbf5      	blt.n	8006372 <RSAVP1+0xf2>
 8006386:	9d05      	ldr	r5, [sp, #20]
 8006388:	4628      	mov	r0, r5
 800638a:	f7ff f997 	bl	80056bc <CountBytes>
 800638e:	ebc0 010b 	rsb	r1, r0, fp
 8006392:	4441      	add	r1, r8
 8006394:	4628      	mov	r0, r5
 8006396:	2200      	movs	r2, #0
 8006398:	f7ff fa34 	bl	8005804 <Big_to_W8>
 800639c:	a805      	add	r0, sp, #20
 800639e:	4651      	mov	r1, sl
 80063a0:	f7ff f822 	bl	80053e8 <StFreeBig>
 80063a4:	e7d3      	b.n	800634e <RSAVP1+0xce>
 80063a6:	bf00      	nop

080063a8 <RSA_PKCS1v15_Encrypt>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b08b      	sub	sp, #44	; 0x2c
 80063ae:	4606      	mov	r6, r0
 80063b0:	2000      	movs	r0, #0
 80063b2:	460c      	mov	r4, r1
 80063b4:	4617      	mov	r7, r2
 80063b6:	4698      	mov	r8, r3
 80063b8:	9009      	str	r0, [sp, #36]	; 0x24
 80063ba:	b18e      	cbz	r6, 80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063bc:	b181      	cbz	r1, 80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063be:	b17a      	cbz	r2, 80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063c0:	b173      	cbz	r3, 80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063c2:	680b      	ldr	r3, [r1, #0]
 80063c4:	b163      	cbz	r3, 80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063c6:	688b      	ldr	r3, [r1, #8]
 80063c8:	b153      	cbz	r3, 80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063ca:	684b      	ldr	r3, [r1, #4]
 80063cc:	4283      	cmp	r3, r0
 80063ce:	dd07      	ble.n	80063e0 <RSA_PKCS1v15_Encrypt+0x38>
 80063d0:	6872      	ldr	r2, [r6, #4]
 80063d2:	f1a2 010a 	sub.w	r1, r2, #10
 80063d6:	428b      	cmp	r3, r1
 80063d8:	db07      	blt.n	80063ea <RSA_PKCS1v15_Encrypt+0x42>
 80063da:	f241 30f2 	movw	r0, #5106	; 0x13f2
 80063de:	e001      	b.n	80063e4 <RSA_PKCS1v15_Encrypt+0x3c>
 80063e0:	f241 30f0 	movw	r0, #5104	; 0x13f0
 80063e4:	b00b      	add	sp, #44	; 0x2c
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80063ee:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 80063f2:	1855      	adds	r5, r2, r1
 80063f4:	45ac      	cmp	ip, r5
 80063f6:	da02      	bge.n	80063fe <RSA_PKCS1v15_Encrypt+0x56>
 80063f8:	f241 30ee 	movw	r0, #5102	; 0x13ee
 80063fc:	e7f2      	b.n	80063e4 <RSA_PKCS1v15_Encrypt+0x3c>
 80063fe:	f8d8 c000 	ldr.w	ip, [r8]
 8006402:	f8a8 5006 	strh.w	r5, [r8, #6]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	eb0c 0b01 	add.w	fp, ip, r1
 800640c:	f1a2 0a03 	sub.w	sl, r2, #3
 8006410:	2302      	movs	r3, #2
 8006412:	4582      	cmp	sl, r0
 8006414:	f80c 0001 	strb.w	r0, [ip, r1]
 8006418:	9206      	str	r2, [sp, #24]
 800641a:	f88b 3001 	strb.w	r3, [fp, #1]
 800641e:	dd58      	ble.n	80064d2 <RSA_PKCS1v15_Encrypt+0x12a>
 8006420:	2500      	movs	r5, #0
 8006422:	9604      	str	r6, [sp, #16]
 8006424:	9407      	str	r4, [sp, #28]
 8006426:	f8cd 8014 	str.w	r8, [sp, #20]
 800642a:	1cab      	adds	r3, r5, #2
 800642c:	eb1b 0303 	adds.w	r3, fp, r3
 8006430:	ebc5 080a 	rsb	r8, r5, sl
 8006434:	9303      	str	r3, [sp, #12]
 8006436:	d073      	beq.n	8006520 <RSA_PKCS1v15_Encrypt+0x178>
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	b95b      	cbnz	r3, 8006454 <RSA_PKCS1v15_Encrypt+0xac>
 800643c:	9e04      	ldr	r6, [sp, #16]
 800643e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006442:	f241 30ee 	movw	r0, #5102	; 0x13ee
 8006446:	6873      	ldr	r3, [r6, #4]
 8006448:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f8a8 3006 	strh.w	r3, [r8, #6]
 8006452:	e7c7      	b.n	80063e4 <RSA_PKCS1v15_Encrypt+0x3c>
 8006454:	ea5f 4918 	movs.w	r9, r8, lsr #16
 8006458:	bf08      	it	eq
 800645a:	4649      	moveq	r1, r9
 800645c:	d014      	beq.n	8006488 <RSA_PKCS1v15_Encrypt+0xe0>
 800645e:	9c03      	ldr	r4, [sp, #12]
 8006460:	2600      	movs	r6, #0
 8006462:	2200      	movs	r2, #0
 8006464:	4621      	mov	r1, r4
 8006466:	4613      	mov	r3, r2
 8006468:	4638      	mov	r0, r7
 800646a:	f7fe fcdd 	bl	8004e28 <crl_DRBG_AES128_Generate.part.25.constprop.36>
 800646e:	3601      	adds	r6, #1
 8006470:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8006474:	2800      	cmp	r0, #0
 8006476:	d1e1      	bne.n	800643c <RSA_PKCS1v15_Encrypt+0x94>
 8006478:	454e      	cmp	r6, r9
 800647a:	d1f2      	bne.n	8006462 <RSA_PKCS1v15_Encrypt+0xba>
 800647c:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8006480:	ebc9 0901 	rsb	r9, r9, r1
 8006484:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8006488:	eb08 0309 	add.w	r3, r8, r9
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	dcd4      	bgt.n	800643c <RSA_PKCS1v15_Encrypt+0x94>
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	4419      	add	r1, r3
 800649a:	4638      	mov	r0, r7
 800649c:	4613      	mov	r3, r2
 800649e:	f7fe fde7 	bl	8005070 <crl_DRBG_AES128_Generate.part.25>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d1ca      	bne.n	800643c <RSA_PKCS1v15_Encrypt+0x94>
 80064a6:	462b      	mov	r3, r5
 80064a8:	eb0b 0203 	add.w	r2, fp, r3
 80064ac:	7892      	ldrb	r2, [r2, #2]
 80064ae:	b13a      	cbz	r2, 80064c0 <RSA_PKCS1v15_Encrypt+0x118>
 80064b0:	429d      	cmp	r5, r3
 80064b2:	bf18      	it	ne
 80064b4:	eb0b 0105 	addne.w	r1, fp, r5
 80064b8:	f105 0501 	add.w	r5, r5, #1
 80064bc:	bf18      	it	ne
 80064be:	708a      	strbne	r2, [r1, #2]
 80064c0:	3301      	adds	r3, #1
 80064c2:	459a      	cmp	sl, r3
 80064c4:	dcf0      	bgt.n	80064a8 <RSA_PKCS1v15_Encrypt+0x100>
 80064c6:	45aa      	cmp	sl, r5
 80064c8:	dcaf      	bgt.n	800642a <RSA_PKCS1v15_Encrypt+0x82>
 80064ca:	9e04      	ldr	r6, [sp, #16]
 80064cc:	9c07      	ldr	r4, [sp, #28]
 80064ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80064d2:	9906      	ldr	r1, [sp, #24]
 80064d4:	4a24      	ldr	r2, [pc, #144]	; (8006568 <RSA_PKCS1v15_Encrypt+0x1c0>)
 80064d6:	4825      	ldr	r0, [pc, #148]	; (800656c <RSA_PKCS1v15_Encrypt+0x1c4>)
 80064d8:	4459      	add	r1, fp
 80064da:	2300      	movs	r3, #0
 80064dc:	2501      	movs	r5, #1
 80064de:	f801 3c01 	strb.w	r3, [r1, #-1]
 80064e2:	6015      	str	r5, [r2, #0]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	9209      	str	r2, [sp, #36]	; 0x24
 80064e8:	6802      	ldr	r2, [r0, #0]
 80064ea:	9209      	str	r2, [sp, #36]	; 0x24
 80064ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ee:	3201      	adds	r2, #1
 80064f0:	d01a      	beq.n	8006528 <RSA_PKCS1v15_Encrypt+0x180>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	dd0a      	ble.n	800650e <RSA_PKCS1v15_Encrypt+0x166>
 80064f8:	6822      	ldr	r2, [r4, #0]
 80064fa:	5cd2      	ldrb	r2, [r2, r3]
 80064fc:	3204      	adds	r2, #4
 80064fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006502:	0052      	lsls	r2, r2, #1
 8006504:	54ca      	strb	r2, [r1, r3]
 8006506:	6862      	ldr	r2, [r4, #4]
 8006508:	3301      	adds	r3, #1
 800650a:	429a      	cmp	r2, r3
 800650c:	dcf4      	bgt.n	80064f8 <RSA_PKCS1v15_Encrypt+0x150>
 800650e:	4659      	mov	r1, fp
 8006510:	68a2      	ldr	r2, [r4, #8]
 8006512:	4630      	mov	r0, r6
 8006514:	4643      	mov	r3, r8
 8006516:	f7ff feb3 	bl	8006280 <RSAVP1>
 800651a:	2800      	cmp	r0, #0
 800651c:	d191      	bne.n	8006442 <RSA_PKCS1v15_Encrypt+0x9a>
 800651e:	e792      	b.n	8006446 <RSA_PKCS1v15_Encrypt+0x9e>
 8006520:	f1b8 0f00 	cmp.w	r8, #0
 8006524:	dc8a      	bgt.n	800643c <RSA_PKCS1v15_Encrypt+0x94>
 8006526:	e787      	b.n	8006438 <RSA_PKCS1v15_Encrypt+0x90>
 8006528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800652a:	6002      	str	r2, [r0, #0]
 800652c:	6802      	ldr	r2, [r0, #0]
 800652e:	9209      	str	r2, [sp, #36]	; 0x24
 8006530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006532:	b16a      	cbz	r2, 8006550 <RSA_PKCS1v15_Encrypt+0x1a8>
 8006534:	6862      	ldr	r2, [r4, #4]
 8006536:	2a00      	cmp	r2, #0
 8006538:	dde9      	ble.n	800650e <RSA_PKCS1v15_Encrypt+0x166>
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	5cd2      	ldrb	r2, [r2, r3]
 800653e:	3207      	adds	r2, #7
 8006540:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006544:	54ca      	strb	r2, [r1, r3]
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	3301      	adds	r3, #1
 800654a:	429a      	cmp	r2, r3
 800654c:	dcf5      	bgt.n	800653a <RSA_PKCS1v15_Encrypt+0x192>
 800654e:	e7de      	b.n	800650e <RSA_PKCS1v15_Encrypt+0x166>
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dddb      	ble.n	800650e <RSA_PKCS1v15_Encrypt+0x166>
 8006556:	4613      	mov	r3, r2
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	5cd2      	ldrb	r2, [r2, r3]
 800655c:	54ca      	strb	r2, [r1, r3]
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	3301      	adds	r3, #1
 8006562:	429a      	cmp	r2, r3
 8006564:	dcf8      	bgt.n	8006558 <RSA_PKCS1v15_Encrypt+0x1b0>
 8006566:	e7d2      	b.n	800650e <RSA_PKCS1v15_Encrypt+0x166>
 8006568:	40023008 	.word	0x40023008
 800656c:	40023000 	.word	0x40023000

08006570 <crl_DRBG_AES128_Instantiate>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	b0d3      	sub	sp, #332	; 0x14c
 8006576:	ad12      	add	r5, sp, #72	; 0x48
 8006578:	4616      	mov	r6, r2
 800657a:	4604      	mov	r4, r0
 800657c:	2250      	movs	r2, #80	; 0x50
 800657e:	460f      	mov	r7, r1
 8006580:	4628      	mov	r0, r5
 8006582:	2100      	movs	r1, #0
 8006584:	4698      	mov	r8, r3
 8006586:	f000 f8db 	bl	8006740 <memset>
 800658a:	22b0      	movs	r2, #176	; 0xb0
 800658c:	a826      	add	r0, sp, #152	; 0x98
 800658e:	4944      	ldr	r1, [pc, #272]	; (80066a0 <crl_DRBG_AES128_Instantiate+0x130>)
 8006590:	f000 f8c8 	bl	8006724 <memcpy>
 8006594:	f1a6 0210 	sub.w	r2, r6, #16
 8006598:	2a10      	cmp	r2, #16
 800659a:	d904      	bls.n	80065a6 <crl_DRBG_AES128_Instantiate+0x36>
 800659c:	f241 7076 	movw	r0, #6006	; 0x1776
 80065a0:	b053      	add	sp, #332	; 0x14c
 80065a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a6:	985e      	ldr	r0, [sp, #376]	; 0x178
 80065a8:	2820      	cmp	r0, #32
 80065aa:	dd04      	ble.n	80065b6 <crl_DRBG_AES128_Instantiate+0x46>
 80065ac:	f241 7077 	movw	r0, #6007	; 0x1777
 80065b0:	b053      	add	sp, #332	; 0x14c
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b6:	995c      	ldr	r1, [sp, #368]	; 0x170
 80065b8:	2910      	cmp	r1, #16
 80065ba:	dd02      	ble.n	80065c2 <crl_DRBG_AES128_Instantiate+0x52>
 80065bc:	f241 707a 	movw	r0, #6010	; 0x177a
 80065c0:	e7ee      	b.n	80065a0 <crl_DRBG_AES128_Instantiate+0x30>
 80065c2:	4639      	mov	r1, r7
 80065c4:	4628      	mov	r0, r5
 80065c6:	4632      	mov	r2, r6
 80065c8:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 80065ca:	f8dd 9178 	ldr.w	r9, [sp, #376]	; 0x178
 80065ce:	f000 f8a9 	bl	8006724 <memcpy>
 80065d2:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80065d4:	4437      	add	r7, r6
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	44b9      	add	r9, r7
 80065da:	dd04      	ble.n	80065e6 <crl_DRBG_AES128_Instantiate+0x76>
 80065dc:	19a8      	adds	r0, r5, r6
 80065de:	4641      	mov	r1, r8
 80065e0:	461a      	mov	r2, r3
 80065e2:	f000 f89f 	bl	8006724 <memcpy>
 80065e6:	985e      	ldr	r0, [sp, #376]	; 0x178
 80065e8:	2800      	cmp	r0, #0
 80065ea:	dd04      	ble.n	80065f6 <crl_DRBG_AES128_Instantiate+0x86>
 80065ec:	4602      	mov	r2, r0
 80065ee:	995d      	ldr	r1, [sp, #372]	; 0x174
 80065f0:	19e8      	adds	r0, r5, r7
 80065f2:	f000 f897 	bl	8006724 <memcpy>
 80065f6:	2100      	movs	r1, #0
 80065f8:	2210      	movs	r2, #16
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f8a0 	bl	8006740 <memset>
 8006600:	4649      	mov	r1, r9
 8006602:	aa02      	add	r2, sp, #8
 8006604:	4628      	mov	r0, r5
 8006606:	f7fe facb 	bl	8004ba0 <DRBG_AES128_Block_cipher_df.constprop.37>
 800660a:	2800      	cmp	r0, #0
 800660c:	d1c8      	bne.n	80065a0 <crl_DRBG_AES128_Instantiate+0x30>
 800660e:	ae0a      	add	r6, sp, #40	; 0x28
 8006610:	68e7      	ldr	r7, [r4, #12]
 8006612:	2310      	movs	r3, #16
 8006614:	3701      	adds	r7, #1
 8006616:	4631      	mov	r1, r6
 8006618:	4620      	mov	r0, r4
 800661a:	aa26      	add	r2, sp, #152	; 0x98
 800661c:	441e      	add	r6, r3
 800661e:	60e7      	str	r7, [r4, #12]
 8006620:	b957      	cbnz	r7, 8006638 <crl_DRBG_AES128_Instantiate+0xc8>
 8006622:	68a7      	ldr	r7, [r4, #8]
 8006624:	3701      	adds	r7, #1
 8006626:	60a7      	str	r7, [r4, #8]
 8006628:	b937      	cbnz	r7, 8006638 <crl_DRBG_AES128_Instantiate+0xc8>
 800662a:	6867      	ldr	r7, [r4, #4]
 800662c:	3701      	adds	r7, #1
 800662e:	6067      	str	r7, [r4, #4]
 8006630:	b917      	cbnz	r7, 8006638 <crl_DRBG_AES128_Instantiate+0xc8>
 8006632:	6827      	ldr	r7, [r4, #0]
 8006634:	3701      	adds	r7, #1
 8006636:	6027      	str	r7, [r4, #0]
 8006638:	f7fe f92a 	bl	8004890 <AES_general_SW_enc>
 800663c:	42ae      	cmp	r6, r5
 800663e:	d1e7      	bne.n	8006610 <crl_DRBG_AES128_Instantiate+0xa0>
 8006640:	a902      	add	r1, sp, #8
 8006642:	e891 010e 	ldmia.w	r1, {r1, r2, r3, r8}
 8006646:	9d07      	ldr	r5, [sp, #28]
 8006648:	9500      	str	r5, [sp, #0]
 800664a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800664c:	9f06      	ldr	r7, [sp, #24]
 800664e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006650:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	4069      	eors	r1, r5
 8006656:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006658:	6121      	str	r1, [r4, #16]
 800665a:	407e      	eors	r6, r7
 800665c:	e89d 0082 	ldmia.w	sp, {r1, r7}
 8006660:	406a      	eors	r2, r5
 8006662:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8006666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006668:	f8dd b020 	ldr.w	fp, [sp, #32]
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8006672:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8006676:	6162      	str	r2, [r4, #20]
 8006678:	406b      	eors	r3, r5
 800667a:	ea80 0009 	eor.w	r0, r0, r9
 800667e:	ea87 0501 	eor.w	r5, r7, r1
 8006682:	ea88 0c0c 	eor.w	ip, r8, ip
 8006686:	ea8b 070a 	eor.w	r7, fp, sl
 800668a:	2101      	movs	r1, #1
 800668c:	60e0      	str	r0, [r4, #12]
 800668e:	61a3      	str	r3, [r4, #24]
 8006690:	f8c4 c01c 	str.w	ip, [r4, #28]
 8006694:	6026      	str	r6, [r4, #0]
 8006696:	6065      	str	r5, [r4, #4]
 8006698:	60a7      	str	r7, [r4, #8]
 800669a:	6221      	str	r1, [r4, #32]
 800669c:	2000      	movs	r0, #0
 800669e:	e77f      	b.n	80065a0 <crl_DRBG_AES128_Instantiate+0x30>
 80066a0:	0800697c 	.word	0x0800697c

080066a4 <RNGinit>:
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	b085      	sub	sp, #20
 80066aa:	b191      	cbz	r1, 80066d2 <RNGinit+0x2e>
 80066ac:	b188      	cbz	r0, 80066d2 <RNGinit+0x2e>
 80066ae:	e890 008e 	ldmia.w	r0, {r1, r2, r3, r7}
 80066b2:	6906      	ldr	r6, [r0, #16]
 80066b4:	6945      	ldr	r5, [r0, #20]
 80066b6:	2000      	movs	r0, #0
 80066b8:	6260      	str	r0, [r4, #36]	; 0x24
 80066ba:	62a0      	str	r0, [r4, #40]	; 0x28
 80066bc:	9700      	str	r7, [sp, #0]
 80066be:	9601      	str	r6, [sp, #4]
 80066c0:	9502      	str	r5, [sp, #8]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7ff ff54 	bl	8006570 <crl_DRBG_AES128_Instantiate>
 80066c8:	b928      	cbnz	r0, 80066d6 <RNGinit+0x32>
 80066ca:	2301      	movs	r3, #1
 80066cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ce:	b005      	add	sp, #20
 80066d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d2:	f241 7074 	movw	r0, #6004	; 0x1774
 80066d6:	b005      	add	sp, #20
 80066d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066da:	bf00      	nop

080066dc <__libc_init_array>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4d0d      	ldr	r5, [pc, #52]	; (8006714 <__libc_init_array+0x38>)
 80066e0:	4c0d      	ldr	r4, [pc, #52]	; (8006718 <__libc_init_array+0x3c>)
 80066e2:	1b64      	subs	r4, r4, r5
 80066e4:	10a4      	asrs	r4, r4, #2
 80066e6:	2600      	movs	r6, #0
 80066e8:	42a6      	cmp	r6, r4
 80066ea:	d109      	bne.n	8006700 <__libc_init_array+0x24>
 80066ec:	4d0b      	ldr	r5, [pc, #44]	; (800671c <__libc_init_array+0x40>)
 80066ee:	4c0c      	ldr	r4, [pc, #48]	; (8006720 <__libc_init_array+0x44>)
 80066f0:	f000 f82e 	bl	8006750 <_init>
 80066f4:	1b64      	subs	r4, r4, r5
 80066f6:	10a4      	asrs	r4, r4, #2
 80066f8:	2600      	movs	r6, #0
 80066fa:	42a6      	cmp	r6, r4
 80066fc:	d105      	bne.n	800670a <__libc_init_array+0x2e>
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	f855 3b04 	ldr.w	r3, [r5], #4
 8006704:	4798      	blx	r3
 8006706:	3601      	adds	r6, #1
 8006708:	e7ee      	b.n	80066e8 <__libc_init_array+0xc>
 800670a:	f855 3b04 	ldr.w	r3, [r5], #4
 800670e:	4798      	blx	r3
 8006710:	3601      	adds	r6, #1
 8006712:	e7f2      	b.n	80066fa <__libc_init_array+0x1e>
 8006714:	080070c0 	.word	0x080070c0
 8006718:	080070c0 	.word	0x080070c0
 800671c:	080070c0 	.word	0x080070c0
 8006720:	080070c4 	.word	0x080070c4

08006724 <memcpy>:
 8006724:	440a      	add	r2, r1
 8006726:	4291      	cmp	r1, r2
 8006728:	f100 33ff 	add.w	r3, r0, #4294967295
 800672c:	d100      	bne.n	8006730 <memcpy+0xc>
 800672e:	4770      	bx	lr
 8006730:	b510      	push	{r4, lr}
 8006732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673a:	4291      	cmp	r1, r2
 800673c:	d1f9      	bne.n	8006732 <memcpy+0xe>
 800673e:	bd10      	pop	{r4, pc}

08006740 <memset>:
 8006740:	4402      	add	r2, r0
 8006742:	4603      	mov	r3, r0
 8006744:	4293      	cmp	r3, r2
 8006746:	d100      	bne.n	800674a <memset+0xa>
 8006748:	4770      	bx	lr
 800674a:	f803 1b01 	strb.w	r1, [r3], #1
 800674e:	e7f9      	b.n	8006744 <memset+0x4>

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
