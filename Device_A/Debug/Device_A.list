
Device_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d0  080086d0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d8  080086d8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080086e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa8  20000034  08008714  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001adc  08008714  00021adc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6d1  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002592  00000000  00000000  0002e72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00030cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001849a  00000000  00000000  00032868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001478d  00000000  00000000  0004ad02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c47  00000000  00000000  0005f48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000f00d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000f01a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000034 	.word	0x20000034
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b7c 	.word	0x08007b7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000038 	.word	0x20000038
 80001d4:	08007b7c 	.word	0x08007b7c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;

//Normal NEC protocol
static pulse_t calc_pulse(uint32_t time)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2bf9      	cmp	r3, #249	; 0xf9
 80004e8:	d801      	bhi.n	80004ee <calc_pulse+0x12>
		return PULSE_ERROR;
 80004ea:	2305      	movs	r3, #5
 80004ec:	e021      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 1200)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80004f4:	d201      	bcs.n	80004fa <calc_pulse+0x1e>
		return PULSE_SHORT;
 80004f6:	2304      	movs	r3, #4
 80004f8:	e01b      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 2000)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000500:	d201      	bcs.n	8000506 <calc_pulse+0x2a>
		return PULSE_LONG;
 8000502:	2303      	movs	r3, #3
 8000504:	e015      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 3000)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800050c:	4293      	cmp	r3, r2
 800050e:	d801      	bhi.n	8000514 <calc_pulse+0x38>
		return PULSE_2MS;
 8000510:	2302      	movs	r3, #2
 8000512:	e00e      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 6000)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f241 726f 	movw	r2, #5999	; 0x176f
 800051a:	4293      	cmp	r3, r2
 800051c:	d801      	bhi.n	8000522 <calc_pulse+0x46>
		return PULSE_4MS;
 800051e:	2301      	movs	r3, #1
 8000520:	e007      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 12000)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000528:	4293      	cmp	r3, r2
 800052a:	d801      	bhi.n	8000530 <calc_pulse+0x54>
		return PULSE_9MS;
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000530:	2305      	movs	r3, #5
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <ir_tim_interrupt>:
	else
		return PULSE_ERROR;
}

void ir_tim_interrupt(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b1f      	cmp	r3, #31
 8000548:	dc43      	bgt.n	80005d2 <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 800054a:	2100      	movs	r1, #0
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <ir_tim_interrupt+0xa8>)
 800054e:	f004 fa4b 	bl	80049e8 <HAL_TIM_ReadCapturedValue>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffc1 	bl	80004dc <calc_pulse>
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3b01      	subs	r3, #1
 8000562:	2b03      	cmp	r3, #3
 8000564:	d831      	bhi.n	80005ca <ir_tim_interrupt+0x8e>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <ir_tim_interrupt+0x30>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	08000593 	.word	0x08000593
 8000578:	0800057d 	.word	0x0800057d
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <ir_tim_interrupt+0xac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	085b      	lsrs	r3, r3, #1
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000584:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <ir_tim_interrupt+0xa4>)
 800058e:	6013      	str	r3, [r2, #0]
		break;
 8000590:	e022      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <ir_tim_interrupt+0xac>)
 800059e:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
		break;
 80005aa:	e015      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ir_tim_interrupt+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		break;
 80005b8:	e00e      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	601a      	str	r2, [r3, #0]
		break;
 80005c8:	e005      	b.n	80005d6 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		break;
 80005d0:	e002      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		return;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000054 	.word	0x20000054
 80005e4:	20000148 	.word	0x20000148
 80005e8:	20000050 	.word	0x20000050

080005ec <ir_receiver_init>:

void ir_receiver_init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ir_receiver_init+0x18>)
 80005f2:	f003 fb5b 	bl	8003cac <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <ir_receiver_init+0x18>)
 80005fa:	f003 fd6b 	bl	80040d4 <HAL_TIM_IC_Start_IT>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000148 	.word	0x20000148

08000608 <ir_read>:

int ir_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <ir_read+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b20      	cmp	r3, #32
 8000614:	d002      	beq.n	800061c <ir_read+0x14>
		return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e007      	b.n	800062c <ir_read+0x24>

	uint8_t value = received_value >> 16;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <ir_read+0x34>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <ir_read+0x30>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	return value;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000054 	.word	0x20000054
 800063c:	20000050 	.word	0x20000050

08000640 <ir_sender_init>:
#include "ir_sender.h"
#include "tim.h"

void ir_sender_init(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Nie potrzebne bo start jest przy wysyłaniu komendy
    HAL_TIM_Base_Start(&htim2);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <ir_sender_init+0x10>)
 8000646:	f003 fb31 	bl	8003cac <HAL_TIM_Base_Start>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000100 	.word	0x20000100

08000654 <delay_us>:


void delay_us (uint16_t delay){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <delay_us+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2)<delay);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <delay_us+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <delay_us+0x14>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000100 	.word	0x20000100

08000684 <NEC_SendCommand>:


// Funkcja do wysyłania całej komendy NEC
void NEC_SendCommand(uint8_t command) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    // Wyślij ramkę startową
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start nośnej
 800068e:	2100      	movs	r1, #0
 8000690:	4841      	ldr	r0, [pc, #260]	; (8000798 <NEC_SendCommand+0x114>)
 8000692:	f003 fbb3 	bl	8003dfc <HAL_TIM_PWM_Start>
    delay_us(NEC_START_PULSE);         // Impuls 9ms
 8000696:	f242 3028 	movw	r0, #9000	; 0x2328
 800069a:	f7ff ffdb 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Stop nośnej
 800069e:	2100      	movs	r1, #0
 80006a0:	483d      	ldr	r0, [pc, #244]	; (8000798 <NEC_SendCommand+0x114>)
 80006a2:	f003 fc5b 	bl	8003f5c <HAL_TIM_PWM_Stop>
    delay_us(NEC_START_PAUSE);         // Pauza 4.5ms
 80006a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80006aa:	f7ff ffd3 	bl	8000654 <delay_us>


    //Adres i negacja adresu
    for (int i = 0; i < 8; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e012      	b.n	80006da <NEC_SendCommand+0x56>
    	// Zawsze najpierw krótki impuls 560µs
    	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006b4:	2100      	movs	r1, #0
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <NEC_SendCommand+0x114>)
 80006b8:	f003 fba0 	bl	8003dfc <HAL_TIM_PWM_Start>
    	    delay_us(NEC_PULSE);
 80006bc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006c0:	f7ff ffc8 	bl	8000654 <delay_us>
    	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006c4:	2100      	movs	r1, #0
 80006c6:	4834      	ldr	r0, [pc, #208]	; (8000798 <NEC_SendCommand+0x114>)
 80006c8:	f003 fc48 	bl	8003f5c <HAL_TIM_PWM_Stop>
    	    delay_us(NEC_PAUSE_0);
 80006cc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006d0:	f7ff ffc0 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	dde9      	ble.n	80006b4 <NEC_SendCommand+0x30>
    }

    for (int i = 0; i < 8; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	e012      	b.n	800070c <NEC_SendCommand+0x88>
        	// Zawsze najpierw krótki impuls 560µs
        	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006e6:	2100      	movs	r1, #0
 80006e8:	482b      	ldr	r0, [pc, #172]	; (8000798 <NEC_SendCommand+0x114>)
 80006ea:	f003 fb87 	bl	8003dfc <HAL_TIM_PWM_Start>
        	    delay_us(NEC_PULSE);
 80006ee:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006f2:	f7ff ffaf 	bl	8000654 <delay_us>
        	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006f6:	2100      	movs	r1, #0
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <NEC_SendCommand+0x114>)
 80006fa:	f003 fc2f 	bl	8003f5c <HAL_TIM_PWM_Stop>
        	    delay_us(NEC_PAUSE_1);
 80006fe:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000702:	f7ff ffa7 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3301      	adds	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b07      	cmp	r3, #7
 8000710:	dde9      	ble.n	80006e6 <NEC_SendCommand+0x62>
        }

    // Wyślij bity komendy (zakładamy 8-bitową komendę)
    for (int i = 0; i < 8; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00d      	b.n	8000734 <NEC_SendCommand+0xb0>
        NEC_SendBit((command >> i) & 0x01);
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	fa42 f303 	asr.w	r3, r2, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f837 	bl	800079c <NEC_SendBit>
    for (int i = 0; i < 8; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b07      	cmp	r3, #7
 8000738:	ddee      	ble.n	8000718 <NEC_SendCommand+0x94>
    }

    // Wyślij bity zanegowanej komendy (zakładamy 8-bitową komendę)
        for (int i = 0; i < 8; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	e010      	b.n	8000762 <NEC_SendCommand+0xde>
            NEC_SendBit(~(command >> i) & 0x01);
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	fa42 f303 	asr.w	r3, r2, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf0c      	ite	eq
 8000750:	2301      	moveq	r3, #1
 8000752:	2300      	movne	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f820 	bl	800079c <NEC_SendBit>
        for (int i = 0; i < 8; i++) {
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddeb      	ble.n	8000740 <NEC_SendCommand+0xbc>
        }

        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 8000768:	2100      	movs	r1, #0
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <NEC_SendCommand+0x114>)
 800076c:	f003 fb46 	bl	8003dfc <HAL_TIM_PWM_Start>
                	    delay_us(NEC_PULSE);
 8000770:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000774:	f7ff ff6e 	bl	8000654 <delay_us>
                	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 8000778:	2100      	movs	r1, #0
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <NEC_SendCommand+0x114>)
 800077c:	f003 fbee 	bl	8003f5c <HAL_TIM_PWM_Stop>
                	    delay_us(NEC_PAUSE_1);
 8000780:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000784:	f7ff ff66 	bl	8000654 <delay_us>

    // Opcjonalnie dodaj pauzę końcową
    delay_us(560);  // Koniec transmisji
 8000788:	f44f 700c 	mov.w	r0, #560	; 0x230
 800078c:	f7ff ff62 	bl	8000654 <delay_us>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000b8 	.word	0x200000b8

0800079c <NEC_SendBit>:

// Funkcja do wysyłania pojedynczego bitu
void NEC_SendBit(uint8_t bit) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    // Zawsze najpierw krótki impuls 560µs
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80007a6:	2100      	movs	r1, #0
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <NEC_SendBit+0x44>)
 80007aa:	f003 fb27 	bl	8003dfc <HAL_TIM_PWM_Start>
    delay_us(NEC_PULSE);
 80007ae:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007b2:	f7ff ff4f 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <NEC_SendBit+0x44>)
 80007ba:	f003 fbcf 	bl	8003f5c <HAL_TIM_PWM_Stop>

    // Pauza zależna od wartości bitu (bit 0 - 560µs, bit 1 - 1680µs)
    if (bit == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <NEC_SendBit+0x32>
    	delay_us(NEC_PAUSE_0);
 80007c4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007c8:	f7ff ff44 	bl	8000654 <delay_us>
    } else {
    	delay_us(NEC_PAUSE_1);
    }
}
 80007cc:	e003      	b.n	80007d6 <NEC_SendBit+0x3a>
    	delay_us(NEC_PAUSE_1);
 80007ce:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 80007d2:	f7ff ff3f 	bl	8000654 <delay_us>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000b8 	.word	0x200000b8

080007e4 <HAL_TIM_IC_CaptureCallback>:
static void MX_SPI1_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d108      	bne.n	8000806 <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim3))
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f6:	f004 f95f 	bl	8004ab8 <HAL_TIM_GetActiveChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8000800:	f7ff fe9c 	bl	800053c <ir_tim_interrupt>
        break;
 8000804:	e002      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 800080a:	bf00      	nop
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000148 	.word	0x20000148

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f001 fc81 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f909 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fb15 	bl	8000e54 <MX_GPIO_Init>
  MX_TIM1_Init();
 800082a:	f000 f9b7 	bl	8000b9c <MX_TIM1_Init>
  MX_TIM2_Init();
 800082e:	f000 fa39 	bl	8000ca4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000832:	f000 fa83 	bl	8000d3c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000836:	f000 f97b 	bl	8000b30 <MX_SPI1_Init>
  MX_CRC_Init();
 800083a:	f000 f965 	bl	8000b08 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi1);
 800083e:	4872      	ldr	r0, [pc, #456]	; (8000a08 <main+0x1f0>)
 8000840:	f000 ffca 	bl	80017d8 <nRF24_Init>
  //RSA_Driver_getMessage();
    //RSA_Driver_init(0);

        //IR Config
        ir_sender_init();
 8000844:	f7ff fefc 	bl	8000640 <ir_sender_init>
        ir_receiver_init();
 8000848:	f7ff fed0 	bl	80005ec <ir_receiver_init>
    /* Enable CRC clock */
    __CRC_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b6e      	ldr	r3, [pc, #440]	; (8000a0c <main+0x1f4>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a6d      	ldr	r2, [pc, #436]	; (8000a0c <main+0x1f4>)
 8000856:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <main+0x1f4>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

    nRF24_SetRXAddress(0,(uint8_t *)"Nad");
 8000868:	4969      	ldr	r1, [pc, #420]	; (8000a10 <main+0x1f8>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fe61 	bl	8001532 <nRF24_SetRXAddress>
    nRF24_SetTXAddress((uint8_t *)"Nad");
 8000870:	4867      	ldr	r0, [pc, #412]	; (8000a10 <main+0x1f8>)
 8000872:	f000 fe97 	bl	80015a4 <nRF24_SetTXAddress>

    //LED indcator
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	4866      	ldr	r0, [pc, #408]	; (8000a14 <main+0x1fc>)
 800087c:	f001 ffa7 	bl	80027ce <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (transmission_step) {
 8000880:	4b65      	ldr	r3, [pc, #404]	; (8000a18 <main+0x200>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b07      	cmp	r3, #7
 8000886:	d8fb      	bhi.n	8000880 <main+0x68>
 8000888:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <main+0x78>)
 800088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088e:	bf00      	nop
 8000890:	080008b1 	.word	0x080008b1
 8000894:	080008df 	.word	0x080008df
 8000898:	08000959 	.word	0x08000959
 800089c:	08000965 	.word	0x08000965
 80008a0:	08000989 	.word	0x08000989
 80008a4:	080009a5 	.word	0x080009a5
 80008a8:	080009cb 	.word	0x080009cb
 80008ac:	080009ef 	.word	0x080009ef

	  case 0: {
	      if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET) {
 80008b0:	2101      	movs	r1, #1
 80008b2:	485a      	ldr	r0, [pc, #360]	; (8000a1c <main+0x204>)
 80008b4:	f001 ff74 	bl	80027a0 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f040 809b 	bne.w	80009f6 <main+0x1de>
	          HAL_Delay(50); // Debouncing
 80008c0:	2032      	movs	r0, #50	; 0x32
 80008c2:	f001 fc9d 	bl	8002200 <HAL_Delay>
	          if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET) {
 80008c6:	2101      	movs	r1, #1
 80008c8:	4854      	ldr	r0, [pc, #336]	; (8000a1c <main+0x204>)
 80008ca:	f001 ff69 	bl	80027a0 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f040 8090 	bne.w	80009f6 <main+0x1de>
	              transmission_step = 1;
 80008d6:	4b50      	ldr	r3, [pc, #320]	; (8000a18 <main+0x200>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
	          }
	      }
	      break;
 80008dc:	e08b      	b.n	80009f6 <main+0x1de>
	  }

	    case 1: {
	      currentTime = HAL_GetTick();  // Pobranie aktualnego czasu w ms
 80008de:	f001 fc85 	bl	80021ec <HAL_GetTick>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a4e      	ldr	r2, [pc, #312]	; (8000a20 <main+0x208>)
 80008e6:	6013      	str	r3, [r2, #0]
	      if ((currentTime - lastCommandTime) >= 300) {
 80008e8:	4b4d      	ldr	r3, [pc, #308]	; (8000a20 <main+0x208>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <main+0x20c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80008f6:	d308      	bcc.n	800090a <main+0xf2>
	        NEC_SendCommand(command);       // Wysłanie komendy
 80008f8:	4b4b      	ldr	r3, [pc, #300]	; (8000a28 <main+0x210>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fec1 	bl	8000684 <NEC_SendCommand>
	        lastCommandTime = currentTime;  // Aktualizacja czasu ostatniego wysłania
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <main+0x208>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a47      	ldr	r2, [pc, #284]	; (8000a24 <main+0x20c>)
 8000908:	6013      	str	r3, [r2, #0]
	      }

	      if ((currentTime - lastREDLEDCommandTime) >= 400) {
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <main+0x208>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <main+0x214>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000918:	d307      	bcc.n	800092a <main+0x112>
	      	        	    	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800091a:	2101      	movs	r1, #1
 800091c:	483d      	ldr	r0, [pc, #244]	; (8000a14 <main+0x1fc>)
 800091e:	f001 ff6e 	bl	80027fe <HAL_GPIO_TogglePin>
	      	        	    	lastREDLEDCommandTime = currentTime;
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <main+0x208>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a41      	ldr	r2, [pc, #260]	; (8000a2c <main+0x214>)
 8000928:	6013      	str	r3, [r2, #0]
	      	        	      }

	      int value = ir_read();
 800092a:	f7ff fe6d 	bl	8000608 <ir_read>
 800092e:	6078      	str	r0, [r7, #4]
	      if (value != -1) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000936:	d060      	beq.n	80009fa <main+0x1e2>
	        if (value == 12) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b0c      	cmp	r3, #12
 800093c:	d15d      	bne.n	80009fa <main+0x1e2>
	          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800093e:	2120      	movs	r1, #32
 8000940:	4834      	ldr	r0, [pc, #208]	; (8000a14 <main+0x1fc>)
 8000942:	f001 ff5c 	bl	80027fe <HAL_GPIO_TogglePin>
	          //LED indicators
	          HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2101      	movs	r1, #1
 800094a:	4832      	ldr	r0, [pc, #200]	; (8000a14 <main+0x1fc>)
 800094c:	f001 ff3f 	bl	80027ce <HAL_GPIO_WritePin>
	          transmission_step = 2;
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <main+0x200>)
 8000952:	2202      	movs	r2, #2
 8000954:	701a      	strb	r2, [r3, #0]
	        }
	      }
	      break;
 8000956:	e050      	b.n	80009fa <main+0x1e2>
	    }

	    case 2: {
	      nRF24_RX_Mode();
 8000958:	f000 fbe6 	bl	8001128 <nRF24_RX_Mode>
	      transmission_step = 3;
 800095c:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <main+0x200>)
 800095e:	2203      	movs	r2, #3
 8000960:	701a      	strb	r2, [r3, #0]
	      break;
 8000962:	e04f      	b.n	8000a04 <main+0x1ec>
//	    	if ((currentTime - lastYELLOWLEDCommandTime) >= 400) {
//	    		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
//	    		lastYELLOWLEDCommandTime = currentTime;
//	    	}

	      rv_status = receive_message();
 8000964:	f001 f8c6 	bl	8001af4 <receive_message>
 8000968:	4603      	mov	r3, r0
 800096a:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <main+0x218>)
 800096c:	6013      	str	r3, [r2, #0]
	      if (rv_status == 1) {
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <main+0x218>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d143      	bne.n	80009fe <main+0x1e6>
	    	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2110      	movs	r1, #16
 800097a:	4826      	ldr	r0, [pc, #152]	; (8000a14 <main+0x1fc>)
 800097c:	f001 ff27 	bl	80027ce <HAL_GPIO_WritePin>
	        transmission_step = 4;
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <main+0x200>)
 8000982:	2204      	movs	r2, #4
 8000984:	701a      	strb	r2, [r3, #0]
	      }

	      break;
 8000986:	e03a      	b.n	80009fe <main+0x1e6>
	    }
	    case 4: {
	      nRF24_TX_Mode();
 8000988:	f000 fbfc 	bl	8001184 <nRF24_TX_Mode>
	      nRF24_SetRXAddress(0,(uint8_t *)"Nad");
 800098c:	4920      	ldr	r1, [pc, #128]	; (8000a10 <main+0x1f8>)
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fdcf 	bl	8001532 <nRF24_SetRXAddress>
	          //nRF24_SetTXAddress((uint8_t *)"Nad");
	      transmission_step = 5;
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <main+0x200>)
 8000996:	2205      	movs	r2, #5
 8000998:	701a      	strb	r2, [r3, #0]
	      HAL_Delay(500);
 800099a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099e:	f001 fc2f 	bl	8002200 <HAL_Delay>
	      break;
 80009a2:	e02f      	b.n	8000a04 <main+0x1ec>
	    }

	    case 5: {

	      sd_status = send_message(50);
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f000 ffeb 	bl	8001980 <send_message>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <main+0x21c>)
 80009ae:	6013      	str	r3, [r2, #0]
	      if (sd_status == 1) {
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <main+0x21c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d124      	bne.n	8000a02 <main+0x1ea>
	    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2102      	movs	r1, #2
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <main+0x1fc>)
 80009be:	f001 ff06 	bl	80027ce <HAL_GPIO_WritePin>
	        transmission_step = 6;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <main+0x200>)
 80009c4:	2206      	movs	r2, #6
 80009c6:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80009c8:	e01b      	b.n	8000a02 <main+0x1ea>
	    }

	    case 6: {
	      HAL_Delay(5000);
 80009ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80009ce:	f001 fc17 	bl	8002200 <HAL_Delay>
	      //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <main+0x1fc>)
 80009d8:	f001 fef9 	bl	80027ce <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2102      	movs	r1, #2
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <main+0x1fc>)
 80009e2:	f001 fef4 	bl	80027ce <HAL_GPIO_WritePin>
	      transmission_step = 7;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <main+0x200>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	701a      	strb	r2, [r3, #0]
	      break;
 80009ec:	e00a      	b.n	8000a04 <main+0x1ec>
	    }

	    case 7: {
	    	      transmission_step = 0;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <main+0x200>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
	    	      break;
 80009f4:	e006      	b.n	8000a04 <main+0x1ec>
	      break;
 80009f6:	bf00      	nop
 80009f8:	e742      	b.n	8000880 <main+0x68>
	      break;
 80009fa:	bf00      	nop
 80009fc:	e740      	b.n	8000880 <main+0x68>
	      break;
 80009fe:	bf00      	nop
 8000a00:	e73e      	b.n	8000880 <main+0x68>
	      break;
 8000a02:	bf00      	nop
	  switch (transmission_step) {
 8000a04:	e73c      	b.n	8000880 <main+0x68>
 8000a06:	bf00      	nop
 8000a08:	20000060 	.word	0x20000060
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	08007b94 	.word	0x08007b94
 8000a14:	40020000 	.word	0x40020000
 8000a18:	200001a0 	.word	0x200001a0
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	20000194 	.word	0x20000194
 8000a24:	20000198 	.word	0x20000198
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	2000019c 	.word	0x2000019c
 8000a30:	200001a4 	.word	0x200001a4
 8000a34:	200001a8 	.word	0x200001a8

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 f890 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SystemClock_Config+0xc8>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <SystemClock_Config+0xc8>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <SystemClock_Config+0xc8>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <SystemClock_Config+0xcc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <SystemClock_Config+0xcc>)
 8000a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <SystemClock_Config+0xcc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fed9 	bl	8002874 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac8:	f000 fa5a 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 f93b 	bl	8002d64 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000af4:	f000 fa44 	bl	8000f80 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	; 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_CRC_Init+0x20>)
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <MX_CRC_Init+0x24>)
 8000b10:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_CRC_Init+0x20>)
 8000b14:	f001 fca5 	bl	8002462 <HAL_CRC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b1e:	f000 fa2f 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000058 	.word	0x20000058
 8000b2c:	40023000 	.word	0x40023000

08000b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <MX_SPI1_Init+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b64:	2218      	movs	r2, #24
 8000b66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b82:	f002 fa9b 	bl	80030bc <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f000 f9f8 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000060 	.word	0x20000060
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b092      	sub	sp, #72	; 0x48
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f006 ffd0 	bl	8007b6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000bce:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <MX_TIM1_Init+0x104>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 8000bde:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000be0:	f640 2247 	movw	r2, #2631	; 0xa47
 8000be4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf8:	4828      	ldr	r0, [pc, #160]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000bfa:	f003 f8af 	bl	8003d5c <HAL_TIM_PWM_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c04:	f000 f9bc 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c14:	4619      	mov	r1, r3
 8000c16:	4821      	ldr	r0, [pc, #132]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000c18:	f004 fbc6 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c22:	f000 f9ad 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c26:	2360      	movs	r3, #96	; 0x60
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000c2a:	f240 5323 	movw	r3, #1315	; 0x523
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000c4e:	f003 fcff 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c58:	f000 f992 	bl	8000f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000c80:	f004 fbfe 	bl	8005480 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000c8a:	f000 f979 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MX_TIM1_Init+0x100>)
 8000c90:	f001 f99c 	bl	8001fcc <HAL_TIM_MspPostInit>

}
 8000c94:	bf00      	nop
 8000c96:	3748      	adds	r7, #72	; 0x48
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000b8 	.word	0x200000b8
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cca:	2263      	movs	r2, #99	; 0x63
 8000ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000cea:	f002 ff8f 	bl	8003c0c <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf4:	f000 f944 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000d06:	f003 fd65 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d10:	f000 f936 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_TIM2_Init+0x94>)
 8000d22:	f004 fb41 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d2c:	f000 f928 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000100 	.word	0x20000100

08000d3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d76:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d78:	4a35      	ldr	r2, [pc, #212]	; (8000e50 <MX_TIM3_Init+0x114>)
 8000d7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d7e:	2263      	movs	r2, #99	; 0x63
 8000d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d9c:	482b      	ldr	r0, [pc, #172]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000d9e:	f002 ff35 	bl	8003c0c <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000da8:	f000 f8ea 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db6:	4619      	mov	r1, r3
 8000db8:	4824      	ldr	r0, [pc, #144]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000dba:	f003 fd0b 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dc4:	f000 f8dc 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000dc8:	4820      	ldr	r0, [pc, #128]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000dca:	f003 f92b 	bl	8004024 <HAL_TIM_IC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000dd4:	f000 f8d4 	bl	8000f80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4817      	ldr	r0, [pc, #92]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000df0:	f003 fdb7 	bl	8004962 <HAL_TIM_SlaveConfigSynchro>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000dfa:	f000 f8c1 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480f      	ldr	r0, [pc, #60]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000e0e:	f004 facb 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000e18:	f000 f8b2 	bl	8000f80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_TIM3_Init+0x110>)
 8000e34:	f003 fb70 	bl	8004518 <HAL_TIM_IC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000e3e:	f000 f89f 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3740      	adds	r7, #64	; 0x40
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a3f      	ldr	r2, [pc, #252]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <MX_GPIO_Init+0x11c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_NRF_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2103      	movs	r1, #3
 8000ede:	4825      	ldr	r0, [pc, #148]	; (8000f74 <MX_GPIO_Init+0x120>)
 8000ee0:	f001 fc75 	bl	80027ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2133      	movs	r1, #51	; 0x33
 8000ee8:	4823      	ldr	r0, [pc, #140]	; (8000f78 <MX_GPIO_Init+0x124>)
 8000eea:	f001 fc70 	bl	80027ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_NRF_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_NRF_Pin|CE_NRF_Pin;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <MX_GPIO_Init+0x120>)
 8000f06:	f001 fac9 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LD2_Pin;
 8000f0a:	2333      	movs	r3, #51	; 0x33
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4815      	ldr	r0, [pc, #84]	; (8000f78 <MX_GPIO_Init+0x124>)
 8000f22:	f001 fabb 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <MX_GPIO_Init+0x128>)
 8000f3a:	f001 faaf 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <MX_GPIO_Init+0x128>)
 8000f54:	f001 faa2 	bl	800249c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2017      	movs	r0, #23
 8000f5e:	f001 fa4a 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f62:	2017      	movs	r0, #23
 8000f64:	f001 fa63 	bl	800242e <HAL_NVIC_EnableIRQ>

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>

08000f8a <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f932 	bl	8002200 <HAL_Delay>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <nRF24_SendSpi+0x28>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	f002 f906 	bl	80031ce <HAL_SPI_Transmit>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001ac 	.word	0x200001ac

08000fd0 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <nRF24_ReadSpi+0x28>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	f002 fa2c 	bl	8003446 <HAL_SPI_Receive>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001ac 	.word	0x200001ac

08000ffc <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <nRF24_ReadRegister+0x44>)
 8001010:	f001 fbdd 	bl	80027ce <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	2101      	movs	r1, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffc3 	bl	8000fa4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ffd3 	bl	8000fd0 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800102a:	2201      	movs	r2, #1
 800102c:	2101      	movs	r1, #1
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <nRF24_ReadRegister+0x44>)
 8001030:	f001 fbcd 	bl	80027ce <HAL_GPIO_WritePin>

	return result;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020800 	.word	0x40020800

08001044 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001058:	2200      	movs	r2, #0
 800105a:	2101      	movs	r1, #1
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <nRF24_ReadRegisters+0x44>)
 800105e:	f001 fbb6 	bl	80027ce <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff9c 	bl	8000fa4 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	4619      	mov	r1, r3
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff ffad 	bl	8000fd0 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001076:	2201      	movs	r2, #1
 8001078:	2101      	movs	r1, #1
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <nRF24_ReadRegisters+0x44>)
 800107c:	f001 fba7 	bl	80027ce <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020800 	.word	0x40020800

0800108c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80010aa:	2200      	movs	r2, #0
 80010ac:	2101      	movs	r1, #1
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <nRF24_WriteRegister+0x48>)
 80010b0:	f001 fb8d 	bl	80027ce <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff72 	bl	8000fa4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80010c0:	2201      	movs	r2, #1
 80010c2:	2101      	movs	r1, #1
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <nRF24_WriteRegister+0x48>)
 80010c6:	f001 fb82 	bl	80027ce <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020800 	.word	0x40020800

080010d8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <nRF24_WriteRegisters+0x4c>)
 80010f8:	f001 fb69 	bl	80027ce <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff4f 	bl	8000fa4 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	4619      	mov	r1, r3
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f7ff ff4a 	bl	8000fa4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <nRF24_WriteRegisters+0x4c>)
 8001116:	f001 fb5a 	bl	80027ce <HAL_GPIO_WritePin>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020800 	.word	0x40020800

08001128 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	//NRF24_CE_LOW;
	uint8_t config = nRF24_ReadConfig();
 800112e:	f000 f851 	bl	80011d4 <nRF24_ReadConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001136:	4911      	ldr	r1, [pc, #68]	; (800117c <nRF24_RX_Mode+0x54>)
 8001138:	2000      	movs	r0, #0
 800113a:	f000 f9fa 	bl	8001532 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f847 	bl	80011e4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001156:	2070      	movs	r0, #112	; 0x70
 8001158:	f000 f89f 	bl	800129a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800115c:	f000 f8ac 	bl	80012b8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001160:	f000 f8c4 	bl	80012ec <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001164:	2201      	movs	r2, #1
 8001166:	2102      	movs	r1, #2
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <nRF24_RX_Mode+0x58>)
 800116a:	f001 fb30 	bl	80027ce <HAL_GPIO_WritePin>
	nRF24_Delay(20);
 800116e:	2014      	movs	r0, #20
 8001170:	f7ff ff0b 	bl	8000f8a <nRF24_Delay>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001b0 	.word	0x200001b0
 8001180:	40020800 	.word	0x40020800

08001184 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800118a:	2200      	movs	r2, #0
 800118c:	2102      	movs	r1, #2
 800118e:	4810      	ldr	r0, [pc, #64]	; (80011d0 <nRF24_TX_Mode+0x4c>)
 8001190:	f001 fb1d 	bl	80027ce <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001194:	f000 f81e 	bl	80011d4 <nRF24_ReadConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f818 	bl	80011e4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80011b4:	2070      	movs	r0, #112	; 0x70
 80011b6:	f000 f870 	bl	800129a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80011ba:	f000 f87d 	bl	80012b8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80011be:	f000 f895 	bl	80012ec <nRF24_FlushTX>

	nRF24_Delay(20);
 80011c2:	2014      	movs	r0, #20
 80011c4:	f7ff fee1 	bl	8000f8a <nRF24_Delay>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020800 	.word	0x40020800

080011d4 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff0f 	bl	8000ffc <nRF24_ReadRegister>
 80011de:	4603      	mov	r3, r0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4619      	mov	r1, r3
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ff4a 	bl	800108c <nRF24_WriteRegister>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800120a:	2006      	movs	r0, #6
 800120c:	f7ff fef6 	bl	8000ffc <nRF24_ReadRegister>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f023 0307 	bic.w	r3, r3, #7
 800121a:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	b25a      	sxtb	r2, r3
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4313      	orrs	r3, r2
 8001228:	b25b      	sxtb	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	4619      	mov	r1, r3
 8001230:	2006      	movs	r0, #6
 8001232:	f7ff ff2b 	bl	800108c <nRF24_WriteRegister>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001248:	2006      	movs	r0, #6
 800124a:	f7ff fed7 	bl	8000ffc <nRF24_ReadRegister>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001258:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d104      	bne.n	800126a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e006      	b.n	8001278 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d103      	bne.n	8001278 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	4619      	mov	r1, r3
 800127c:	2006      	movs	r0, #6
 800127e:	f7ff ff05 	bl	800108c <nRF24_WriteRegister>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800128e:	2007      	movs	r0, #7
 8001290:	f7ff feb4 	bl	8000ffc <nRF24_ReadRegister>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}

0800129a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	2007      	movs	r0, #7
 80012aa:	f7ff feef 	bl	800108c <nRF24_WriteRegister>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80012be:	23e2      	movs	r3, #226	; 0xe2
 80012c0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <nRF24_FlushRX+0x30>)
 80012c8:	f001 fa81 	bl	80027ce <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	2101      	movs	r1, #1
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe67 	bl	8000fa4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80012d6:	2201      	movs	r2, #1
 80012d8:	2101      	movs	r1, #1
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <nRF24_FlushRX+0x30>)
 80012dc:	f001 fa77 	bl	80027ce <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020800 	.word	0x40020800

080012ec <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80012f2:	23e1      	movs	r3, #225	; 0xe1
 80012f4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <nRF24_FlushTX+0x30>)
 80012fc:	f001 fa67 	bl	80027ce <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	2101      	movs	r1, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe4d 	bl	8000fa4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800130a:	2201      	movs	r2, #1
 800130c:	2101      	movs	r1, #1
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <nRF24_FlushTX+0x30>)
 8001310:	f001 fa5d 	bl	80027ce <HAL_GPIO_WritePin>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40020800 	.word	0x40020800

08001320 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800132a:	f7ff ff53 	bl	80011d4 <nRF24_ReadConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e003      	b.n	800134a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	f023 0308 	bic.w	r3, r3, #8
 8001348:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff49 	bl	80011e4 <nRF24_WriteConfig>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001364:	f7ff ff36 	bl	80011d4 <nRF24_ReadConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d104      	bne.n	800137c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e003      	b.n	8001384 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff2c 	bl	80011e4 <nRF24_WriteConfig>
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	2004      	movs	r0, #4
 80013be:	f7ff fe65 	bl	800108c <nRF24_WriteRegister>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2005      	movs	r0, #5
 80013e0:	f7ff fe54 	bl	800108c <nRF24_WriteRegister>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d901      	bls.n	8001406 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001402:	2305      	movs	r3, #5
 8001404:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	3311      	adds	r3, #17
 800140a:	b2da      	uxtb	r2, r3
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff fe38 	bl	800108c <nRF24_WriteRegister>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	460a      	mov	r2, r1
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	4613      	mov	r3, r2
 8001432:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d901      	bls.n	800143e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800143a:	2305      	movs	r3, #5
 800143c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fddc 	bl	8000ffc <nRF24_ReadRegister>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d10a      	bne.n	8001464 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2201      	movs	r2, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	b25a      	sxtb	r2, r3
 8001458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145c:	4313      	orrs	r3, r2
 800145e:	b25b      	sxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e00b      	b.n	800147c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2201      	movs	r2, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	b25b      	sxtb	r3, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	b25a      	sxtb	r2, r3
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4013      	ands	r3, r2
 8001478:	b25b      	sxtb	r3, r3
 800147a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	4619      	mov	r1, r3
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fe03 	bl	800108c <nRF24_WriteRegister>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	460a      	mov	r2, r1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	4613      	mov	r3, r2
 800149c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d901      	bls.n	80014a8 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80014a4:	2305      	movs	r3, #5
 80014a6:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fda7 	bl	8000ffc <nRF24_ReadRegister>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d10a      	bne.n	80014ce <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2201      	movs	r2, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e00b      	b.n	80014e6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2201      	movs	r2, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e0:	4013      	ands	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4619      	mov	r1, r3
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff fdce 	bl	800108c <nRF24_WriteRegister>
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d901      	bls.n	800150c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001508:	2305      	movs	r3, #5
 800150a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d801      	bhi.n	8001516 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001512:	2303      	movs	r3, #3
 8001514:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	3b02      	subs	r3, #2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	2003      	movs	r0, #3
 8001526:	f7ff fdb1 	bl	800108c <nRF24_WriteRegister>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	6039      	str	r1, [r7, #0]
 800153c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <nRF24_SetRXAddress+0x18>
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d11d      	bne.n	8001586 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e00d      	b.n	800156c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	441a      	add	r2, r3
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	f1c3 0302 	rsb	r3, r3, #2
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	3310      	adds	r3, #16
 8001560:	443b      	add	r3, r7
 8001562:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	3301      	adds	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d9ee      	bls.n	8001550 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	330a      	adds	r3, #10
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f107 010c 	add.w	r1, r7, #12
 800157c:	2203      	movs	r2, #3
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fdaa 	bl	80010d8 <nRF24_WriteRegisters>
	{
 8001584:	e00a      	b.n	800159c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	330a      	adds	r3, #10
 800158a:	b2da      	uxtb	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3302      	adds	r3, #2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4610      	mov	r0, r2
 8001596:	f7ff fd79 	bl	800108c <nRF24_WriteRegister>
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2203      	movs	r2, #3
 80015b2:	4619      	mov	r1, r3
 80015b4:	200a      	movs	r0, #10
 80015b6:	f7ff fd45 	bl	8001044 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e00c      	b.n	80015da <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	f1c3 0302 	rsb	r3, r3, #2
 80015c8:	3210      	adds	r2, #16
 80015ca:	443a      	add	r2, r7
 80015cc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80015d0:	4a16      	ldr	r2, [pc, #88]	; (800162c <nRF24_SetTXAddress+0x88>)
 80015d2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d9ef      	bls.n	80015c0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e00d      	b.n	8001602 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	441a      	add	r2, r3
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	f1c3 0302 	rsb	r3, r3, #2
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	3310      	adds	r3, #16
 80015f6:	443b      	add	r3, r7
 80015f8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d9ee      	bls.n	80015e6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2203      	movs	r2, #3
 800160e:	4619      	mov	r1, r3
 8001610:	200a      	movs	r0, #10
 8001612:	f7ff fd61 	bl	80010d8 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2203      	movs	r2, #3
 800161c:	4619      	mov	r1, r3
 800161e:	2010      	movs	r0, #16
 8001620:	f7ff fd5a 	bl	80010d8 <nRF24_WriteRegisters>

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001b0 	.word	0x200001b0

08001630 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001636:	f7ff fe28 	bl	800128a <nRF24_ReadStatus>
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001644:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fe26 	bl	800129a <nRF24_WriteStatus>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001660:	f7ff fdb8 	bl	80011d4 <nRF24_ReadConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e003      	b.n	8001680 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800167e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fdae 	bl	80011e4 <nRF24_WriteConfig>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800169a:	f7ff fd9b 	bl	80011d4 <nRF24_ReadConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d104      	bne.n	80016b2 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	f043 0320 	orr.w	r3, r3, #32
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e003      	b.n	80016ba <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	f023 0320 	bic.w	r3, r3, #32
 80016b8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fd91 	bl	80011e4 <nRF24_WriteConfig>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80016d4:	f7ff fd7e 	bl	80011d4 <nRF24_ReadConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d104      	bne.n	80016ec <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e003      	b.n	80016f4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f023 0310 	bic.w	r3, r3, #16
 80016f2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fd74 	bl	80011e4 <nRF24_WriteConfig>
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800170c:	2220      	movs	r2, #32
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	20a0      	movs	r0, #160	; 0xa0
 8001712:	f7ff fce1 	bl	80010d8 <nRF24_WriteRegisters>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8001726:	2201      	movs	r2, #1
 8001728:	2102      	movs	r1, #2
 800172a:	4811      	ldr	r0, [pc, #68]	; (8001770 <nRF24_WaitTX+0x50>)
 800172c:	f001 f84f 	bl	80027ce <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff fc2a 	bl	8000f8a <nRF24_Delay>
	NRF24_CE_LOW;
 8001736:	2200      	movs	r2, #0
 8001738:	2102      	movs	r1, #2
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <nRF24_WaitTX+0x50>)
 800173c:	f001 f847 	bl	80027ce <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fc22 	bl	8000f8a <nRF24_Delay>
		status = nRF24_ReadStatus();
 8001746:	f7ff fda0 	bl	800128a <nRF24_ReadStatus>
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <nRF24_WaitTX+0x42>
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0ee      	beq.n	8001740 <nRF24_WaitTX+0x20>

	// Clear the relevant status flags
	    nRF24_WriteStatus((1 << NRF24_MAX_RT) | (1 << NRF24_TX_DS));
 8001762:	2030      	movs	r0, #48	; 0x30
 8001764:	f7ff fd99 	bl	800129a <nRF24_WriteStatus>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020800 	.word	0x40020800

08001774 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800177c:	2220      	movs	r2, #32
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2061      	movs	r0, #97	; 0x61
 8001782:	f7ff fc5f 	bl	8001044 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	2007      	movs	r0, #7
 800178a:	f7ff fc7f 	bl	800108c <nRF24_WriteRegister>
	//nRF24_FlushRX();
	//if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
		//nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
	//}
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800179e:	f7ff fd74 	bl	800128a <nRF24_ReadStatus>
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00c      	beq.n	80017ca <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <nRF24_RXAvailible+0x3c>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fd6a 	bl	800129a <nRF24_WriteStatus>
		return 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <nRF24_RXAvailible+0x34>
	}
	return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000190 	.word	0x20000190

080017d8 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80017e0:	4a25      	ldr	r2, [pc, #148]	; (8001878 <nRF24_Init+0xa0>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80017e6:	2200      	movs	r2, #0
 80017e8:	2102      	movs	r1, #2
 80017ea:	4824      	ldr	r0, [pc, #144]	; (800187c <nRF24_Init+0xa4>)
 80017ec:	f000 ffef 	bl	80027ce <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80017f0:	2201      	movs	r2, #1
 80017f2:	2101      	movs	r1, #1
 80017f4:	4821      	ldr	r0, [pc, #132]	; (800187c <nRF24_Init+0xa4>)
 80017f6:	f000 ffea 	bl	80027ce <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 80017fa:	2005      	movs	r0, #5
 80017fc:	f7ff fbc5 	bl	8000f8a <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001800:	2003      	movs	r0, #3
 8001802:	f7ff fcfd 	bl	8001200 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001806:	2002      	movs	r0, #2
 8001808:	f7ff fd19 	bl	800123e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff fd87 	bl	8001320 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fda1 	bl	800135a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001818:	2107      	movs	r1, #7
 800181a:	2004      	movs	r0, #4
 800181c:	f7ff fdba 	bl	8001394 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001820:	2100      	movs	r1, #0
 8001822:	201c      	movs	r0, #28
 8001824:	f7ff fc32 	bl	800108c <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001828:	200a      	movs	r0, #10
 800182a:	f7ff fdce 	bl	80013ca <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 800182e:	2120      	movs	r1, #32
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fddb 	bl	80013ec <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001836:	2101      	movs	r1, #1
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fdf3 	bl	8001424 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800183e:	2101      	movs	r1, #1
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fe24 	bl	800148e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001846:	2003      	movs	r0, #3
 8001848:	f7ff fe56 	bl	80014f8 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 800184c:	2014      	movs	r0, #20
 800184e:	f7ff fb9c 	bl	8000f8a <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff feff 	bl	8001656 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff ff19 	bl	8001690 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff ff33 	bl	80016ca <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 8001864:	2014      	movs	r0, #20
 8001866:	f7ff fb90 	bl	8000f8a <nRF24_Delay>

	nRF24_ClearInterrupts();
 800186a:	f7ff fee1 	bl	8001630 <nRF24_ClearInterrupts>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001ac 	.word	0x200001ac
 800187c:	40020800 	.word	0x40020800

08001880 <buffer_add>:
uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk
uint32_t PackageTimer;

//TRANSMISSION
// Add data to the ring buffer
void buffer_add(uint8_t* data, uint16_t length) {
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	81fb      	strh	r3, [r7, #14]
 8001890:	e020      	b.n	80018d4 <buffer_add+0x54>
        tx_ring_buffer[tx_head] = data[i];
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <buffer_add+0x68>)
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	7819      	ldrb	r1, [r3, #0]
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <buffer_add+0x6c>)
 80018a0:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % BUFFER_SIZE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <buffer_add+0x68>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <buffer_add+0x70>)
 80018aa:	fb82 1203 	smull	r1, r2, r2, r3
 80018ae:	1191      	asrs	r1, r2, #6
 80018b0:	17da      	asrs	r2, r3, #31
 80018b2:	1a8a      	subs	r2, r1, r2
 80018b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018b8:	fb01 f202 	mul.w	r2, r1, r2
 80018bc:	1a9a      	subs	r2, r3, r2
 80018be:	b292      	uxth	r2, r2
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <buffer_add+0x68>)
 80018c2:	801a      	strh	r2, [r3, #0]
        tx_size++;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <buffer_add+0x74>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <buffer_add+0x74>)
 80018cc:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < length; i++) {
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	3301      	adds	r3, #1
 80018d2:	81fb      	strh	r3, [r7, #14]
 80018d4:	89fa      	ldrh	r2, [r7, #14]
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3da      	bcc.n	8001892 <buffer_add+0x12>
    }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	2000059c 	.word	0x2000059c
 80018ec:	200001b4 	.word	0x200001b4
 80018f0:	10624dd3 	.word	0x10624dd3
 80018f4:	200005a0 	.word	0x200005a0

080018f8 <buffer_get_chunk>:

// Get 32-byte chunk from the ring buffer
uint8_t buffer_get_chunk(uint8_t* chunk) {
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    if (tx_size == 0) return 0;  // No data to send
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <buffer_get_chunk+0x78>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <buffer_get_chunk+0x14>
 8001908:	2300      	movs	r3, #0
 800190a:	e02c      	b.n	8001966 <buffer_get_chunk+0x6e>

    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e021      	b.n	8001956 <buffer_get_chunk+0x5e>
        chunk[i] = tx_ring_buffer[tx_tail];
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <buffer_get_chunk+0x7c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <buffer_get_chunk+0x80>)
 8001920:	5c52      	ldrb	r2, [r2, r1]
 8001922:	701a      	strb	r2, [r3, #0]
        tx_tail = (tx_tail + 1) % BUFFER_SIZE;
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <buffer_get_chunk+0x7c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <buffer_get_chunk+0x84>)
 800192c:	fb82 1203 	smull	r1, r2, r2, r3
 8001930:	1191      	asrs	r1, r2, #6
 8001932:	17da      	asrs	r2, r3, #31
 8001934:	1a8a      	subs	r2, r1, r2
 8001936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800193a:	fb01 f202 	mul.w	r2, r1, r2
 800193e:	1a9a      	subs	r2, r3, r2
 8001940:	b292      	uxth	r2, r2
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <buffer_get_chunk+0x7c>)
 8001944:	801a      	strh	r2, [r3, #0]
        tx_size--;
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <buffer_get_chunk+0x78>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3b01      	subs	r3, #1
 800194c:	4a08      	ldr	r2, [pc, #32]	; (8001970 <buffer_get_chunk+0x78>)
 800194e:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b1f      	cmp	r3, #31
 800195a:	d803      	bhi.n	8001964 <buffer_get_chunk+0x6c>
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <buffer_get_chunk+0x78>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1d6      	bne.n	8001912 <buffer_get_chunk+0x1a>
    }
    return 1;  // Chunk is ready to send
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	200005a0 	.word	0x200005a0
 8001974:	2000059e 	.word	0x2000059e
 8001978:	200001b4 	.word	0x200001b4
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <send_message>:

int32_t send_message(uint32_t delay_time){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	if(tx_size == 0){
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <send_message+0x60>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <send_message+0x14>
			return 1;
 8001990:	2301      	movs	r3, #1
 8001992:	e021      	b.n	80019d8 <send_message+0x58>
		}
	if (tx_size > 0 && HAL_GetTick() - PackageTimer > delay_time) {
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <send_message+0x60>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01c      	beq.n	80019d6 <send_message+0x56>
 800199c:	f000 fc26 	bl	80021ec <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <send_message+0x64>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d213      	bcs.n	80019d6 <send_message+0x56>
		if (buffer_get_chunk(chunk)) {
 80019ae:	480e      	ldr	r0, [pc, #56]	; (80019e8 <send_message+0x68>)
 80019b0:	f7ff ffa2 	bl	80018f8 <buffer_get_chunk>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <send_message+0x44>
		    nRF24_WriteTXPayload(chunk);  // Send 32-byte chunk
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <send_message+0x68>)
 80019bc:	f7ff fea2 	bl	8001704 <nRF24_WriteTXPayload>
		    nRF24_WaitTX();               // Wait until the transmission is completed
 80019c0:	f7ff feae 	bl	8001720 <nRF24_WaitTX>
		    }
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate transmission
 80019c4:	2120      	movs	r1, #32
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <send_message+0x6c>)
 80019c8:	f000 ff19 	bl	80027fe <HAL_GPIO_TogglePin>
		PackageTimer = HAL_GetTick();
 80019cc:	f000 fc0e 	bl	80021ec <HAL_GetTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <send_message+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200005a0 	.word	0x200005a0
 80019e4:	200005c4 	.word	0x200005c4
 80019e8:	200005a4 	.word	0x200005a4
 80019ec:	40020000 	.word	0x40020000

080019f0 <buffer_add_rx>:
uint8_t rx_ring_buffer[BUFFER_SIZE];  // Ring buffer to store received data
uint16_t rx_head = 0, rx_tail = 0;    // Head and tail for the ring buffer
//uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk

// Add received chunk to the ring buffer
void buffer_add_rx(uint8_t* data, uint16_t length) {
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	81fb      	strh	r3, [r7, #14]
 8001a00:	e01b      	b.n	8001a3a <buffer_add_rx+0x4a>
        rx_ring_buffer[rx_head] = data[i];
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <buffer_add_rx+0x60>)
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <buffer_add_rx+0x64>)
 8001a10:	5499      	strb	r1, [r3, r2]
        rx_head = (rx_head + 1) % BUFFER_SIZE;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <buffer_add_rx+0x60>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <buffer_add_rx+0x68>)
 8001a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1e:	1191      	asrs	r1, r2, #6
 8001a20:	17da      	asrs	r2, r3, #31
 8001a22:	1a8a      	subs	r2, r1, r2
 8001a24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a28:	fb01 f202 	mul.w	r2, r1, r2
 8001a2c:	1a9a      	subs	r2, r3, r2
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <buffer_add_rx+0x60>)
 8001a32:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	3301      	adds	r3, #1
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	89fa      	ldrh	r2, [r7, #14]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3df      	bcc.n	8001a02 <buffer_add_rx+0x12>
    }
}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200009b0 	.word	0x200009b0
 8001a54:	200005c8 	.word	0x200005c8
 8001a58:	10624dd3 	.word	0x10624dd3

08001a5c <buffer_get_full_message>:

// Extract full message from the ring buffer
void buffer_get_full_message(uint8_t* message, uint16_t length) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	81fb      	strh	r3, [r7, #14]
 8001a6c:	e01c      	b.n	8001aa8 <buffer_get_full_message+0x4c>
        message[i] = rx_ring_buffer[rx_tail];
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <buffer_get_full_message+0x60>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <buffer_get_full_message+0x64>)
 8001a7c:	5c52      	ldrb	r2, [r2, r1]
 8001a7e:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % BUFFER_SIZE;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <buffer_get_full_message+0x60>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <buffer_get_full_message+0x68>)
 8001a88:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8c:	1191      	asrs	r1, r2, #6
 8001a8e:	17da      	asrs	r2, r3, #31
 8001a90:	1a8a      	subs	r2, r1, r2
 8001a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a96:	fb01 f202 	mul.w	r2, r1, r2
 8001a9a:	1a9a      	subs	r2, r3, r2
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <buffer_get_full_message+0x60>)
 8001aa0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	81fb      	strh	r3, [r7, #14]
 8001aa8:	89fa      	ldrh	r2, [r7, #14]
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3de      	bcc.n	8001a6e <buffer_get_full_message+0x12>
    }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	200009b2 	.word	0x200009b2
 8001ac0:	200005c8 	.word	0x200005c8
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <flush_rx_buffer>:

// Function to flush the transmission ring buffer
void flush_rx_buffer() {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
    // Reset the head, tail, and size to flush the buffer
    rx_head = 0;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <flush_rx_buffer+0x20>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
    rx_tail = 0;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <flush_rx_buffer+0x24>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	801a      	strh	r2, [r3, #0]
    //rx_size = 0;

    // Optionally clear the buffer content
    memset(rx_ring_buffer, 0, sizeof(rx_ring_buffer));
 8001ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001adc:	2100      	movs	r1, #0
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <flush_rx_buffer+0x28>)
 8001ae0:	f006 f844 	bl	8007b6c <memset>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200009b0 	.word	0x200009b0
 8001aec:	200009b2 	.word	0x200009b2
 8001af0:	200005c8 	.word	0x200005c8

08001af4 <receive_message>:

int32_t receive_message(){
 8001af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
	if (nRF24_RXAvailible()) {
 8001afc:	f7ff fe4c 	bl	8001798 <nRF24_RXAvailible>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d049      	beq.n	8001b9a <receive_message+0xa6>
		    nRF24_ReadRXPaylaod(chunk);  // Receive 32-byte chunk
 8001b06:	4828      	ldr	r0, [pc, #160]	; (8001ba8 <receive_message+0xb4>)
 8001b08:	f7ff fe34 	bl	8001774 <nRF24_ReadRXPaylaod>
		    buffer_add_rx(chunk, NRF24_PAYLOAD_SIZE);  // Store received chunk in the buffer
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <receive_message+0xb4>)
 8001b10:	f7ff ff6e 	bl	80019f0 <buffer_add_rx>
		    //MessageLength = sprintf(Message, "%s\n\r", chunk);
		    //HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);

		    // Optionally, you can check if the entire message is received and process it
		    if (rx_head >= expected_message_size) {
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <receive_message+0xb8>)
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <receive_message+0xbc>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d338      	bcc.n	8001b92 <receive_message+0x9e>
 8001b20:	466b      	mov	r3, sp
 8001b22:	461e      	mov	r6, r3
		    uint8_t received_message[expected_message_size];
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <receive_message+0xbc>)
 8001b26:	8819      	ldrh	r1, [r3, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	b28b      	uxth	r3, r1
 8001b30:	2200      	movs	r2, #0
 8001b32:	4698      	mov	r8, r3
 8001b34:	4691      	mov	r9, r2
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b4a:	b28b      	uxth	r3, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	461c      	mov	r4, r3
 8001b50:	4615      	mov	r5, r2
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	00eb      	lsls	r3, r5, #3
 8001b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b60:	00e2      	lsls	r2, r4, #3
 8001b62:	460b      	mov	r3, r1
 8001b64:	3307      	adds	r3, #7
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b6e:	466b      	mov	r3, sp
 8001b70:	3300      	adds	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
		    buffer_get_full_message(received_message, expected_message_size);  // Extract full message
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <receive_message+0xbc>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6838      	ldr	r0, [r7, #0]
 8001b7c:	f7ff ff6e 	bl	8001a5c <buffer_get_full_message>
//		    HAL_UART_Transmit(&huart1, received_message, expected_message_size, 1000);  // Transmit message via UART
//
		    Decrypt_RSA_Message_And_Add_It(0, received_message);
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f852 	bl	8001c2c <Decrypt_RSA_Message_And_Add_It>

		     flush_rx_buffer();
 8001b88:	f7ff ff9e 	bl	8001ac8 <flush_rx_buffer>
		     return 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	46b5      	mov	sp, r6
 8001b90:	e004      	b.n	8001b9c <receive_message+0xa8>
		     }

		     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate reception
 8001b92:	2120      	movs	r1, #32
 8001b94:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <receive_message+0xc0>)
 8001b96:	f000 fe32 	bl	80027fe <HAL_GPIO_TogglePin>
		}
	return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200005a4 	.word	0x200005a4
 8001bac:	200009b0 	.word	0x200009b0
 8001bb0:	20000002 	.word	0x20000002
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <Encrypt_And_Add_Same_Message>:
//	        Message[i] = msg[i];
//	    }
//	Encrypt_And_Add_Same_Message(0, Message);
//}

void Encrypt_And_Add_Same_Message(uint8_t key_number, uint8_t *output_message, size_t message_size){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	73fb      	strb	r3, [r7, #15]
	const uint8_t* key_data = get_rsa_key_set(key_number);
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f8cf 	bl	8001d6c <get_rsa_key_set>
 8001bce:	6178      	str	r0, [r7, #20]
	if (key_data != NULL) {
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00c      	beq.n	8001bf0 <Encrypt_And_Add_Same_Message+0x38>
		PubKey_st.mExponentSize = sizeof(PublicExponent);
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <Encrypt_And_Add_Same_Message+0x64>)
 8001bd8:	2203      	movs	r2, #3
 8001bda:	60da      	str	r2, [r3, #12]
		PubKey_st.mModulusSize = 256;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <Encrypt_And_Add_Same_Message+0x64>)
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	605a      	str	r2, [r3, #4]
		PubKey_st.pmExponent = (uint8_t *) PublicExponent;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <Encrypt_And_Add_Same_Message+0x64>)
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <Encrypt_And_Add_Same_Message+0x68>)
 8001be8:	609a      	str	r2, [r3, #8]
		PubKey_st.pmModulus = (uint8_t *) key_data;
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <Encrypt_And_Add_Same_Message+0x64>)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	6013      	str	r3, [r2, #0]
	}
	status = RSA_Encrypt(&PubKey_st, output_message, message_size, output);
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <Encrypt_And_Add_Same_Message+0x6c>)
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <Encrypt_And_Add_Same_Message+0x64>)
 8001bf8:	f000 f852 	bl	8001ca0 <RSA_Encrypt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <Encrypt_And_Add_Same_Message+0x70>)
 8001c00:	6013      	str	r3, [r2, #0]
	if (status == RSA_SUCCESS){
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <Encrypt_And_Add_Same_Message+0x70>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d104      	bne.n	8001c14 <Encrypt_And_Add_Same_Message+0x5c>
		buffer_add(output, sizeof(output));
 8001c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <Encrypt_And_Add_Same_Message+0x6c>)
 8001c10:	f7ff fe36 	bl	8001880 <buffer_add>
	}
}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20001ab8 	.word	0x20001ab8
 8001c20:	08007e94 	.word	0x08007e94
 8001c24:	200019b4 	.word	0x200019b4
 8001c28:	20000024 	.word	0x20000024

08001c2c <Decrypt_RSA_Message_And_Add_It>:

void Decrypt_RSA_Message_And_Add_It(uint8_t key_number, uint8_t *received_message){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
	const uint8_t* key_data = get_rsa_key_set(key_number);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f896 	bl	8001d6c <get_rsa_key_set>
 8001c40:	60f8      	str	r0, [r7, #12]
    PrivKey_st.mExponentSize = sizeof(PrivateExponent);
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <Decrypt_RSA_Message_And_Add_It+0x60>)
 8001c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c48:	60da      	str	r2, [r3, #12]
    PrivKey_st.mModulusSize = 256;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <Decrypt_RSA_Message_And_Add_It+0x60>)
 8001c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c50:	605a      	str	r2, [r3, #4]
    PrivKey_st.pmExponent = (uint8_t *) PrivateExponent;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <Decrypt_RSA_Message_And_Add_It+0x60>)
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <Decrypt_RSA_Message_And_Add_It+0x64>)
 8001c56:	609a      	str	r2, [r3, #8]
    PrivKey_st.pmModulus = (uint8_t *) key_data;
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <Decrypt_RSA_Message_And_Add_It+0x60>)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6013      	str	r3, [r2, #0]

    status = RSA_Decrypt(&PrivKey_st, received_message, output, &outputSize);
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <Decrypt_RSA_Message_And_Add_It+0x68>)
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <Decrypt_RSA_Message_And_Add_It+0x6c>)
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <Decrypt_RSA_Message_And_Add_It+0x60>)
 8001c66:	f000 f859 	bl	8001d1c <RSA_Decrypt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <Decrypt_RSA_Message_And_Add_It+0x70>)
 8001c6e:	6013      	str	r3, [r2, #0]
    if (status == RSA_SUCCESS){
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <Decrypt_RSA_Message_And_Add_It+0x70>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <Decrypt_RSA_Message_And_Add_It+0x56>
    	Encrypt_And_Add_Same_Message(0, output, 16);
 8001c78:	2210      	movs	r2, #16
 8001c7a:	4907      	ldr	r1, [pc, #28]	; (8001c98 <Decrypt_RSA_Message_And_Add_It+0x6c>)
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ff9b 	bl	8001bb8 <Encrypt_And_Add_Same_Message>
    	}
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001ac8 	.word	0x20001ac8
 8001c90:	08007e98 	.word	0x08007e98
 8001c94:	20001ab4 	.word	0x20001ab4
 8001c98:	200019b4 	.word	0x200019b4
 8001c9c:	20000024 	.word	0x20000024

08001ca0 <RSA_Encrypt>:

int32_t RSA_Encrypt(RSApubKey_stt *P_pPubKey,
                    const uint8_t *P_pInputMessage,
                    int32_t P_InputSize,
                    uint8_t *P_pOutput)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09c      	sub	sp, #112	; 0x70
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  int32_t status = RNG_SUCCESS ;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RNGstate_stt RNGstate;
  RNGinitInput_stt RNGinit_st;
  RNGinit_st.pmEntropyData = entropy_data;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <RSA_Encrypt+0x74>)
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RNGinit_st.mEntropyDataSize = sizeof(entropy_data);
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RNGinit_st.mPersDataSize = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RNGinit_st.mNonceSize = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34

  status = RNGinit(&RNGinit_st, &RNGstate);
 8001cc2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f005 feff 	bl	8007ad0 <RNGinit>
 8001cd2:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (status == RNG_SUCCESS)
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <RSA_Encrypt+0x68>
  {
    RSAinOut_stt inOut_st;
    membuf_stt mb;

    mb.mSize = sizeof(preallocated_buffer);
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	833b      	strh	r3, [r7, #24]
    mb.mUsed = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	837b      	strh	r3, [r7, #26]
    mb.pmBuf = preallocated_buffer;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <RSA_Encrypt+0x78>)
 8001ce6:	617b      	str	r3, [r7, #20]

    /* Fill the RSAinOut_stt */
    inOut_st.pmInput = P_pInputMessage;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	61fb      	str	r3, [r7, #28]
    inOut_st.mInputSize = P_InputSize;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	623b      	str	r3, [r7, #32]
    inOut_st.pmOutput = P_pOutput;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Encrypt the message, this function will write sizeof(modulus) data */
    status = RSA_PKCS1v15_Encrypt(P_pPubKey, &inOut_st, &RNGstate, &mb);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cfc:	f107 011c 	add.w	r1, r7, #28
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f005 fc87 	bl	8007614 <RSA_PKCS1v15_Encrypt>
 8001d06:	66f8      	str	r0, [r7, #108]	; 0x6c
  }
  return(status);
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3770      	adds	r7, #112	; 0x70
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000004 	.word	0x20000004
 8001d18:	200009b4 	.word	0x200009b4

08001d1c <RSA_Decrypt>:
*/
int32_t RSA_Decrypt(RSAprivKey_stt * P_pPrivKey,
                    const uint8_t * P_pInputMessage,
                    uint8_t *P_pOutput,
                    int32_t *P_OutputSize)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  int32_t status = RSA_SUCCESS ;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RSAinOut_stt inOut_st;
  membuf_stt mb;

  mb.mSize = sizeof(preallocated_buffer);
 8001d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d32:	82bb      	strh	r3, [r7, #20]
  mb.mUsed = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	82fb      	strh	r3, [r7, #22]
  mb.pmBuf = preallocated_buffer;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <RSA_Decrypt+0x4c>)
 8001d3a:	613b      	str	r3, [r7, #16]

  /* Fill the RSAinOut_stt */
  inOut_st.pmInput = P_pInputMessage;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
  inOut_st.mInputSize = P_pPrivKey->mModulusSize;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61fb      	str	r3, [r7, #28]
  inOut_st.pmOutput = P_pOutput;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	623b      	str	r3, [r7, #32]

  /* Encrypt the message, this function will write sizeof(modulus) data */
  status = RSA_PKCS1v15_Decrypt(P_pPrivKey, &inOut_st, P_OutputSize, &mb);
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	f107 0118 	add.w	r1, r7, #24
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f005 fd41 	bl	80077dc <RSA_PKCS1v15_Decrypt>
 8001d5a:	6278      	str	r0, [r7, #36]	; 0x24
  return(status);
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200009b4 	.word	0x200009b4

08001d6c <get_rsa_key_set>:
			0x8D, 0xD2, 0x66, 0xB6, 0xDB, 0x4A, 0xC0, 0x4B, 0xE0, 0xF4, 0xF8, 0x02, 0x9B, 0xE8, 0xD3, 0x41, 0xD9, 0x4A, 0x32,
			0x3C, 0x75, 0x43, 0x19, 0xA8, 0x1F, 0x41, 0x90, 0x92, 0x1E, 0xF7, 0x18, 0xE8, 0x0C, 0x55, 0xC2, 0x98, 0x01
};

// Funkcja do pobrania wskaźnika na wybrany zestaw kluczy w tablicy
const uint8_t* get_rsa_key_set(uint8_t index) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    if (index >= RSA_KEY_SETS_COUNT) {
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b31      	cmp	r3, #49	; 0x31
 8001d7a:	d901      	bls.n	8001d80 <get_rsa_key_set+0x14>
        return 0; // Zwraca 0, jeśli indeks jest poza zakresem
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e003      	b.n	8001d88 <get_rsa_key_set+0x1c>
    }
    return &rsa_keys_bin[index * RSA_KEY_SET_SIZE];
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <get_rsa_key_set+0x28>)
 8001d86:	4413      	add	r3, r2
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	08007f98 	.word	0x08007f98

08001d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_MspInit+0x48>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_MspInit+0x48>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_MspInit+0x48>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_MspInit+0x48>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_MspInit+0x48>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_MspInit+0x48>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40023800 	.word	0x40023800

08001de4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_CRC_MspInit+0x38>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10d      	bne.n	8001e12 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_CRC_MspInit+0x3c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_CRC_MspInit+0x3c>)
 8001e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_CRC_MspInit+0x3c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40023000 	.word	0x40023000
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_SPI_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_SPI_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e7e:	2338      	movs	r3, #56	; 0x38
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_SPI_MspInit+0x8c>)
 8001e9a:	f000 faff 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40013000 	.word	0x40013000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_TIM_PWM_MspInit+0x38>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	d116      	bne.n	8001f44 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	201c      	movs	r0, #28
 8001f38:	f000 fa5d 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f3c:	201c      	movs	r0, #28
 8001f3e:	f000 fa76 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f42:	e038      	b.n	8001fb6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d133      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_TIM_Base_MspInit+0xcc>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f96:	2302      	movs	r3, #2
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa2:	f000 fa7b 	bl	800249c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	201d      	movs	r0, #29
 8001fac:	f000 fa23 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fb0:	201d      	movs	r0, #29
 8001fb2:	f000 fa3c 	bl	800242e <HAL_NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_TIM_MspPostInit+0x68>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d11e      	bne.n	800202c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_TIM_MspPostInit+0x6c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <HAL_TIM_MspPostInit+0x6c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_TIM_MspPostInit+0x6c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800200a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800201c:	2301      	movs	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <HAL_TIM_MspPostInit+0x70>)
 8002028:	f000 fa38 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010000 	.word	0x40010000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f000 f89f 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}

0800208e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 8002092:	2040      	movs	r0, #64	; 0x40
 8002094:	f000 fbcc 	bl	8002830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM2_IRQHandler+0x10>)
 80020a2:	f002 f931 	bl	8004308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000100 	.word	0x20000100

080020b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM3_IRQHandler+0x10>)
 80020b6:	f002 f927 	bl	8004308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000148 	.word	0x20000148

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020ec:	4c0b      	ldr	r4, [pc, #44]	; (800211c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020fa:	f7ff ffe3 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fe:	f005 fd03 	bl	8007b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7fe fb89 	bl	8000818 <main>
  bx  lr    
 8002106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002114:	080086e0 	.word	0x080086e0
  ldr r2, =_sbss
 8002118:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800211c:	20001adc 	.word	0x20001adc

08002120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_Init+0x40>)
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_Init+0x40>)
 800213a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x40>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f947 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fe1e 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023c00 	.word	0x40023c00

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f95f 	bl	800244a <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f000 f927 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000028 	.word	0x20000028
 80021c0:	20000030 	.word	0x20000030
 80021c4:	2000002c 	.word	0x2000002c

080021c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_IncTick+0x1c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_IncTick+0x20>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x20>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000030 	.word	0x20000030
 80021e8:	20001ad8 	.word	0x20001ad8

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b02      	ldr	r3, [pc, #8]	; (80021fc <HAL_GetTick+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20001ad8 	.word	0x20001ad8

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff fff0 	bl	80021ec <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffe0 	bl	80021ec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000030 	.word	0x20000030

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <__NVIC_EnableIRQ+0x34>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff90 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff2d 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff42 	bl	8002290 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff90 	bl	8002338 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5f 	bl	80022e4 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff35 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e00e      	b.n	8002492 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	795b      	ldrb	r3, [r3, #5]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fcad 	bl	8001de4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e159      	b.n	800276c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8148 	bne.w	8002766 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a2 	beq.w	8002766 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <HAL_GPIO_Init+0x2e4>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a55      	ldr	r2, [pc, #340]	; (8002780 <HAL_GPIO_Init+0x2e4>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_GPIO_Init+0x2e4>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a51      	ldr	r2, [pc, #324]	; (8002784 <HAL_GPIO_Init+0x2e8>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x2ec>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x202>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a47      	ldr	r2, [pc, #284]	; (800278c <HAL_GPIO_Init+0x2f0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x1fe>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a46      	ldr	r2, [pc, #280]	; (8002790 <HAL_GPIO_Init+0x2f4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x1fa>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_GPIO_Init+0x2f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_GPIO_Init+0x2fc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x1f2>
 800268a:	2304      	movs	r3, #4
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 800268e:	2307      	movs	r3, #7
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 800269e:	2300      	movs	r3, #0
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4934      	ldr	r1, [pc, #208]	; (8002784 <HAL_GPIO_Init+0x2e8>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_GPIO_Init+0x300>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e2:	4a2e      	ldr	r2, [pc, #184]	; (800279c <HAL_GPIO_Init+0x300>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_GPIO_Init+0x300>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <HAL_GPIO_Init+0x300>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_GPIO_Init+0x300>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002736:	4a19      	ldr	r2, [pc, #100]	; (800279c <HAL_GPIO_Init+0x300>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_GPIO_Init+0x300>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_GPIO_Init+0x300>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f67f aea2 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40023800 	.word	0x40023800
 8002784:	40013800 	.word	0x40013800
 8002788:	40020000 	.word	0x40020000
 800278c:	40020400 	.word	0x40020400
 8002790:	40020800 	.word	0x40020800
 8002794:	40020c00 	.word	0x40020c00
 8002798:	40021000 	.word	0x40021000
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e001      	b.n	80027c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]
 80027da:	4613      	mov	r3, r2
 80027dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027de:	787b      	ldrb	r3, [r7, #1]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ea:	e003      	b.n	80027f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	041a      	lsls	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	041a      	lsls	r2, r3, #16
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43d9      	mvns	r1, r3
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	400b      	ands	r3, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f806 	bl	8002860 <HAL_GPIO_EXTI_Callback>
  }
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fc5e 	bl	80021ec <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fc5a 	bl	80021ec <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fc4a 	bl	80021ec <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fc46 	bl	80021ec <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fbff 	bl	80021ec <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fbfb 	bl	80021ec <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fbde 	bl	80021ec <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff fbda 	bl	80021ec <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fbbe 	bl	80021ec <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fbba 	bl	80021ec <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fba7 	bl	80021ec <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fba3 	bl	80021ec <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb63 	bl	80021ec <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7ff fb5f 	bl	80021ec <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fb24 	bl	80021ec <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fb20 	bl	80021ec <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7ff fb0e 	bl	80021ec <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7ff fb0a 	bl	80021ec <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fade 	bl	80021ec <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff fada 	bl	80021ec <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fab3 	bl	80021ec <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff faaf 	bl	80021ec <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa9c 	bl	80021ec <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fa98 	bl	80021ec <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7ff f9ca 	bl	80021ec <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7ff f9c6 	bl	80021ec <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f92c 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08008198 	.word	0x08008198
 8002f28:	20000028 	.word	0x20000028
 8002f2c:	2000002c 	.word	0x2000002c

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b090      	sub	sp, #64	; 0x40
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f40:	2300      	movs	r3, #0
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80a2 	bhi.w	800309e <HAL_RCC_GetSysClockFreq+0x16e>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e09c      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f68:	e09c      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f6e:	e099      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d027      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	627a      	str	r2, [r7, #36]	; 0x24
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f9c:	fb03 f201 	mul.w	r2, r3, r1
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a43      	ldr	r2, [pc, #268]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002faa:	fba0 2102 	umull	r2, r1, r0, r2
 8002fae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002fb0:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb4:	4413      	add	r3, r2
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	61fa      	str	r2, [r7, #28]
 8002fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fc8:	f7fd f906 	bl	80001d8 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	e055      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	2200      	movs	r2, #0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	617a      	str	r2, [r7, #20]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fe8:	f04f 0b00 	mov.w	fp, #0
 8002fec:	4652      	mov	r2, sl
 8002fee:	465b      	mov	r3, fp
 8002ff0:	f04f 0000 	mov.w	r0, #0
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	0159      	lsls	r1, r3, #5
 8002ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffe:	0150      	lsls	r0, r2, #5
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	ebb2 080a 	subs.w	r8, r2, sl
 8003008:	eb63 090b 	sbc.w	r9, r3, fp
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003018:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800301c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003020:	ebb2 0408 	subs.w	r4, r2, r8
 8003024:	eb63 0509 	sbc.w	r5, r3, r9
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	eb14 030a 	adds.w	r3, r4, sl
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	eb45 030b 	adc.w	r3, r5, fp
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003054:	4629      	mov	r1, r5
 8003056:	028b      	lsls	r3, r1, #10
 8003058:	4620      	mov	r0, r4
 800305a:	4629      	mov	r1, r5
 800305c:	4604      	mov	r4, r0
 800305e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003062:	4601      	mov	r1, r0
 8003064:	028a      	lsls	r2, r1, #10
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	2200      	movs	r2, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	60fa      	str	r2, [r7, #12]
 8003072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003076:	f7fd f8af 	bl	80001d8 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4613      	mov	r3, r2
 8003080:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800309c:	e002      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3740      	adds	r7, #64	; 0x40
 80030aa:	46bd      	mov	sp, r7
 80030ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	017d7840 	.word	0x017d7840

080030bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07b      	b.n	80031c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d108      	bne.n	80030e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030de:	d009      	beq.n	80030f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
 80030e6:	e005      	b.n	80030f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fe88 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	ea42 0103 	orr.w	r1, r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0104 	and.w	r1, r3, #4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f003 0210 	and.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b088      	sub	sp, #32
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_SPI_Transmit+0x22>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e126      	b.n	800343e <HAL_SPI_Transmit+0x270>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f8:	f7fe fff8 	bl	80021ec <HAL_GetTick>
 80031fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d002      	beq.n	8003214 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003212:	e10b      	b.n	800342c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_Transmit+0x52>
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003224:	e102      	b.n	800342c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	d10f      	bne.n	800328e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d14b      	bne.n	800334e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0xf6>
 80032be:	8afb      	ldrh	r3, [r7, #22]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d13e      	bne.n	8003342 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e8:	e02b      	b.n	8003342 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d112      	bne.n	800331e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	86da      	strh	r2, [r3, #54]	; 0x36
 800331c:	e011      	b.n	8003342 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fe ff65 	bl	80021ec <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Transmit+0x168>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x16e>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003340:	e074      	b.n	800342c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ce      	bne.n	80032ea <HAL_SPI_Transmit+0x11c>
 800334c:	e04c      	b.n	80033e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Transmit+0x18e>
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d140      	bne.n	80033de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003382:	e02c      	b.n	80033de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d113      	bne.n	80033ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b8:	e011      	b.n	80033de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ba:	f7fe ff17 	bl	80021ec <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d803      	bhi.n	80033d2 <HAL_SPI_Transmit+0x204>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d102      	bne.n	80033d8 <HAL_SPI_Transmit+0x20a>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033dc:	e026      	b.n	800342c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1cd      	bne.n	8003384 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbcb 	bl	8003b88 <SPI_EndRxTxTransaction>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e000      	b.n	800342c <HAL_SPI_Transmit+0x25e>
  }

error:
 800342a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343c:	7ffb      	ldrb	r3, [r7, #31]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b088      	sub	sp, #32
 800344a:	af02      	add	r7, sp, #8
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003462:	d112      	bne.n	800348a <HAL_SPI_Receive+0x44>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10e      	bne.n	800348a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f8f1 	bl	8003668 <HAL_SPI_TransmitReceive>
 8003486:	4603      	mov	r3, r0
 8003488:	e0ea      	b.n	8003660 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_SPI_Receive+0x52>
 8003494:	2302      	movs	r3, #2
 8003496:	e0e3      	b.n	8003660 <HAL_SPI_Receive+0x21a>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a0:	f7fe fea4 	bl	80021ec <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b6:	e0ca      	b.n	800364e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Receive+0x7e>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c8:	e0c1      	b.n	800364e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2204      	movs	r2, #4
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003510:	d10f      	bne.n	8003532 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d007      	beq.n	8003550 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d162      	bne.n	800361e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003558:	e02e      	b.n	80035b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d115      	bne.n	8003594 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f103 020c 	add.w	r2, r3, #12
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003592:	e011      	b.n	80035b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003594:	f7fe fe2a 	bl	80021ec <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d803      	bhi.n	80035ac <HAL_SPI_Receive+0x166>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Receive+0x16c>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035b6:	e04a      	b.n	800364e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1cb      	bne.n	800355a <HAL_SPI_Receive+0x114>
 80035c2:	e031      	b.n	8003628 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d113      	bne.n	80035fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	b292      	uxth	r2, r2
 80035de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f8:	e011      	b.n	800361e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fa:	f7fe fdf7 	bl	80021ec <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d803      	bhi.n	8003612 <HAL_SPI_Receive+0x1cc>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d102      	bne.n	8003618 <HAL_SPI_Receive+0x1d2>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800361c:	e017      	b.n	800364e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1cd      	bne.n	80035c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fa45 	bl	8003abc <SPI_EndRxTransaction>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
 800364a:	e000      	b.n	800364e <HAL_SPI_Receive+0x208>
  }

error :
 800364c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_SPI_TransmitReceive+0x26>
 800368a:	2302      	movs	r3, #2
 800368c:	e18a      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x33c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003696:	f7fe fda9 	bl	80021ec <HAL_GetTick>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d00f      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x70>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d107      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x68>
 80036c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036d6:	e15b      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x82>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x82>
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036f0:	e14e      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2205      	movs	r2, #5
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d007      	beq.n	800375a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003762:	d178      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x10a>
 800376c:	8b7b      	ldrh	r3, [r7, #26]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d166      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003796:	e053      	b.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d11b      	bne.n	80037de <HAL_SPI_TransmitReceive+0x176>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <HAL_SPI_TransmitReceive+0x176>
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d113      	bne.n	80037de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d119      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x1b8>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d014      	beq.n	8003820 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	b292      	uxth	r2, r2
 8003802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	1c9a      	adds	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800381c:	2301      	movs	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003820:	f7fe fce4 	bl	80021ec <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382c:	429a      	cmp	r2, r3
 800382e:	d807      	bhi.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d003      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800383e:	e0a7      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1a6      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x130>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1a1      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x130>
 8003854:	e07c      	b.n	8003950 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x1fc>
 800385e:	8b7b      	ldrh	r3, [r7, #26]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d16b      	bne.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388a:	e057      	b.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d11c      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d114      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d119      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x2ae>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d014      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003912:	2301      	movs	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003916:	f7fe fc69 	bl	80021ec <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_TransmitReceive+0x2c6>
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d102      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x2cc>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800393a:	e029      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1a2      	bne.n	800388c <HAL_SPI_TransmitReceive+0x224>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d19d      	bne.n	800388c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f917 	bl	8003b88 <SPI_EndRxTxTransaction>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800396c:	e010      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e000      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800398e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039bc:	f7fe fc16 	bl	80021ec <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039cc:	f7fe fc0e 	bl	80021ec <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039d2:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	015b      	lsls	r3, r3, #5
 80039d8:	0d1b      	lsrs	r3, r3, #20
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039e2:	e054      	b.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d050      	beq.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ec:	f7fe fbfe 	bl	80021ec <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d902      	bls.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d13d      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1a:	d111      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d004      	beq.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d107      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a48:	d10f      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e017      	b.n	8003aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d19b      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000028 	.word	0x20000028

08003abc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad0:	d111      	bne.n	8003af6 <SPI_EndRxTransaction+0x3a>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ada:	d004      	beq.n	8003ae6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d107      	bne.n	8003af6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d12a      	bne.n	8003b56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b08:	d012      	beq.n	8003b30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff ff49 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02d      	beq.n	8003b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e026      	b.n	8003b7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2101      	movs	r1, #1
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff ff36 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01a      	beq.n	8003b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e013      	b.n	8003b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2101      	movs	r1, #1
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff ff23 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <SPI_EndRxTxTransaction+0x7c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <SPI_EndRxTxTransaction+0x80>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0d5b      	lsrs	r3, r3, #21
 8003ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d112      	bne.n	8003bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fef4 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e00f      	b.n	8003bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d0f2      	beq.n	8003bda <SPI_EndRxTxTransaction+0x52>
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bf6:	bf00      	nop
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000028 	.word	0x20000028
 8003c08:	165e9f81 	.word	0x165e9f81

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe f95e 	bl	8001ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 ff40 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e03c      	b.n	8003d3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_TIM_Base_Start+0x9c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_TIM_Base_Start+0x5c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d013      	beq.n	8003d08 <HAL_TIM_Base_Start+0x5c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_TIM_Base_Start+0xa0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_TIM_Base_Start+0x5c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <HAL_TIM_Base_Start+0xa4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_TIM_Base_Start+0x5c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_TIM_Base_Start+0xa8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_TIM_Base_Start+0x5c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <HAL_TIM_Base_Start+0xac>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d111      	bne.n	8003d2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d010      	beq.n	8003d3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	e007      	b.n	8003d3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000

08003d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e041      	b.n	8003df2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fe f896 	bl	8001eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	f000 fe98 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_TIM_PWM_Start+0x24>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e022      	b.n	8003e66 <HAL_TIM_PWM_Start+0x6a>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d109      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x3e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e015      	b.n	8003e66 <HAL_TIM_PWM_Start+0x6a>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d109      	bne.n	8003e54 <HAL_TIM_PWM_Start+0x58>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e008      	b.n	8003e66 <HAL_TIM_PWM_Start+0x6a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e068      	b.n	8003f40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x82>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7c:	e013      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xaa>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0x92>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8c:	e00b      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xaa>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xa2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e9c:	e003      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xaa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 fa55 	bl	800535e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_TIM_PWM_Start+0x14c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_TIM_PWM_Start+0x14c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x10e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d013      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x10e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_TIM_PWM_Start+0x150>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x10e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <HAL_TIM_PWM_Start+0x154>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x10e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIM_PWM_Start+0x158>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x10e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_TIM_PWM_Start+0x15c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d111      	bne.n	8003f2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	d010      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	e007      	b.n	8003f3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40014000 	.word	0x40014000

08003f5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 f9f5 	bl	800535e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <HAL_TIM_PWM_Stop+0xc4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d117      	bne.n	8003fae <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a1a      	ldr	r2, [r3, #32]
 8003f84:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_TIM_PWM_Stop+0x52>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	f240 4344 	movw	r3, #1092	; 0x444
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_TIM_PWM_Stop+0x52>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_TIM_PWM_Stop+0x82>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	f240 4344 	movw	r3, #1092	; 0x444
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <HAL_TIM_PWM_Stop+0x82>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Stop+0x92>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	e013      	b.n	8004016 <HAL_TIM_PWM_Stop+0xba>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Stop+0xa2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	e00b      	b.n	8004016 <HAL_TIM_PWM_Stop+0xba>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Stop+0xb2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	e003      	b.n	8004016 <HAL_TIM_PWM_Stop+0xba>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40010000 	.word	0x40010000

08004024 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e041      	b.n	80040ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f839 	bl	80040c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f000 fd34 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_IC_Start_IT+0x1e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e013      	b.n	800411a <HAL_TIM_IC_Start_IT+0x46>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0x2e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e00b      	b.n	800411a <HAL_TIM_IC_Start_IT+0x46>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d104      	bne.n	8004112 <HAL_TIM_IC_Start_IT+0x3e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e003      	b.n	800411a <HAL_TIM_IC_Start_IT+0x46>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <HAL_TIM_IC_Start_IT+0x58>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e013      	b.n	8004154 <HAL_TIM_IC_Start_IT+0x80>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d104      	bne.n	800413c <HAL_TIM_IC_Start_IT+0x68>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e00b      	b.n	8004154 <HAL_TIM_IC_Start_IT+0x80>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d104      	bne.n	800414c <HAL_TIM_IC_Start_IT+0x78>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e003      	b.n	8004154 <HAL_TIM_IC_Start_IT+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004152:	b2db      	uxtb	r3, r3
 8004154:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800415c:	7b7b      	ldrb	r3, [r7, #13]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e0c2      	b.n	80042ec <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_IT+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	e013      	b.n	800419e <HAL_TIM_IC_Start_IT+0xca>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0xb2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004184:	e00b      	b.n	800419e <HAL_TIM_IC_Start_IT+0xca>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0xc2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004194:	e003      	b.n	800419e <HAL_TIM_IC_Start_IT+0xca>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_IC_Start_IT+0xda>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	e013      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x102>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d104      	bne.n	80041be <HAL_TIM_IC_Start_IT+0xea>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041bc:	e00b      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x102>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_IC_Start_IT+0xfa>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041cc:	e003      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x102>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b0c      	cmp	r3, #12
 80041da:	d841      	bhi.n	8004260 <HAL_TIM_IC_Start_IT+0x18c>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_TIM_IC_Start_IT+0x110>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004261 	.word	0x08004261
 80041ec:	08004261 	.word	0x08004261
 80041f0:	08004261 	.word	0x08004261
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	08004261 	.word	0x08004261
 80041fc:	08004261 	.word	0x08004261
 8004200:	08004261 	.word	0x08004261
 8004204:	0800423d 	.word	0x0800423d
 8004208:	08004261 	.word	0x08004261
 800420c:	08004261 	.word	0x08004261
 8004210:	08004261 	.word	0x08004261
 8004214:	0800424f 	.word	0x0800424f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0202 	orr.w	r2, r2, #2
 8004226:	60da      	str	r2, [r3, #12]
      break;
 8004228:	e01d      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0204 	orr.w	r2, r2, #4
 8004238:	60da      	str	r2, [r3, #12]
      break;
 800423a:	e014      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	60da      	str	r2, [r3, #12]
      break;
 800424c:	e00b      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0210 	orr.w	r2, r2, #16
 800425c:	60da      	str	r2, [r3, #12]
      break;
 800425e:	e002      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	bf00      	nop
  }

  if (status == HAL_OK)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d13e      	bne.n	80042ea <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f872 	bl	800535e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <HAL_TIM_IC_Start_IT+0x220>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d013      	beq.n	80042b6 <HAL_TIM_IC_Start_IT+0x1e2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_TIM_IC_Start_IT+0x224>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a17      	ldr	r2, [pc, #92]	; (80042fc <HAL_TIM_IC_Start_IT+0x228>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIM_IC_Start_IT+0x22c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <HAL_TIM_IC_Start_IT+0x230>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b06      	cmp	r3, #6
 80042c6:	d010      	beq.n	80042ea <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	e007      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0201 	orr.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40014000 	.word	0x40014000

08004308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0202 	mvn.w	r2, #2
 8004334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fa4a 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fb95 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fb9b 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0204 	mvn.w	r2, #4
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fa20 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fb6b 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb71 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0208 	mvn.w	r2, #8
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc f9f6 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fb41 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fb47 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b10      	cmp	r3, #16
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc f9cc 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fb17 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb1d 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0201 	mvn.w	r2, #1
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 faf2 	bl	8004a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d10e      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d107      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f001 f83e 	bl	8005534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fae1 	bl	8004aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0220 	mvn.w	r2, #32
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f001 f809 	bl	8005522 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004532:	2302      	movs	r3, #2
 8004534:	e088      	b.n	8004648 <HAL_TIM_IC_ConfigChannel+0x130>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f000 fd54 	bl	8005000 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 020c 	bic.w	r2, r2, #12
 8004566:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]
 800457a:	e060      	b.n	800463e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d11c      	bne.n	80045bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f000 fdc9 	bl	8005128 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	021a      	lsls	r2, r3, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	619a      	str	r2, [r3, #24]
 80045ba:	e040      	b.n	800463e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d11b      	bne.n	80045fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f000 fe14 	bl	80051fe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 020c 	bic.w	r2, r2, #12
 80045e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69d9      	ldr	r1, [r3, #28]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	61da      	str	r2, [r3, #28]
 80045f8:	e021      	b.n	800463e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d11c      	bne.n	800463a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6819      	ldr	r1, [r3, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f000 fe30 	bl	8005274 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004622:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69d9      	ldr	r1, [r3, #28]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
 8004638:	e001      	b.n	800463e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004646:	7dfb      	ldrb	r3, [r7, #23]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466a:	2302      	movs	r3, #2
 800466c:	e0ae      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	f200 809f 	bhi.w	80047bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080047bd 	.word	0x080047bd
 800468c:	080047bd 	.word	0x080047bd
 8004690:	080047bd 	.word	0x080047bd
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080047bd 	.word	0x080047bd
 800469c:	080047bd 	.word	0x080047bd
 80046a0:	080047bd 	.word	0x080047bd
 80046a4:	0800473b 	.word	0x0800473b
 80046a8:	080047bd 	.word	0x080047bd
 80046ac:	080047bd 	.word	0x080047bd
 80046b0:	080047bd 	.word	0x080047bd
 80046b4:	0800477b 	.word	0x0800477b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa84 	bl	8004bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
      break;
 80046f6:	e064      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 faca 	bl	8004c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]
      break;
 8004738:	e043      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fb13 	bl	8004d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0208 	orr.w	r2, r2, #8
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e023      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fb5d 	bl	8004e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
      break;
 80047c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0b4      	b.n	800495a <HAL_TIM_ConfigClockSource+0x186>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800480e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d03e      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0xd4>
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	f200 8087 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	f000 8086 	beq.w	8004946 <HAL_TIM_ConfigClockSource+0x172>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483e:	d87f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b70      	cmp	r3, #112	; 0x70
 8004842:	d01a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0xa6>
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d87b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d050      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x11a>
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d877      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b50      	cmp	r3, #80	; 0x50
 8004852:	d03c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xfa>
 8004854:	2b50      	cmp	r3, #80	; 0x50
 8004856:	d873      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d058      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x13a>
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d86f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b30      	cmp	r3, #48	; 0x30
 8004862:	d064      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	2b30      	cmp	r3, #48	; 0x30
 8004866:	d86b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d060      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d867      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d05a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	e062      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f000 fd49 	bl	8005320 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800489c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	609a      	str	r2, [r3, #8]
      break;
 80048a6:	e04f      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f000 fd32 	bl	8005320 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ca:	609a      	str	r2, [r3, #8]
      break;
 80048cc:	e03c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fbf6 	bl	80050cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2150      	movs	r1, #80	; 0x50
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd00 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 80048ec:	e02c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 fc50 	bl	80051a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2160      	movs	r1, #96	; 0x60
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fcf0 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 800490c:	e01c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	f000 fbd6 	bl	80050cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2140      	movs	r1, #64	; 0x40
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fce0 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 800492c:	e00c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 fcd7 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 800493e:	e003      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e000      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004976:	2302      	movs	r3, #2
 8004978:	e031      	b.n	80049de <HAL_TIM_SlaveConfigSynchro+0x7c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 faa5 	bl	8004edc <TIM_SlaveTimer_SetConfig>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d009      	beq.n	80049ac <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e018      	b.n	80049de <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ba:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ca:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d831      	bhi.n	8004a60 <HAL_TIM_ReadCapturedValue+0x78>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_TIM_ReadCapturedValue+0x1c>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	08004a61 	.word	0x08004a61
 8004a1c:	08004a61 	.word	0x08004a61
 8004a20:	08004a61 	.word	0x08004a61
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a61 	.word	0x08004a61
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004a61 	.word	0x08004a61
 8004a34:	08004a57 	.word	0x08004a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	60fb      	str	r3, [r7, #12]

      break;
 8004a40:	e00f      	b.n	8004a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	60fb      	str	r3, [r7, #12]

      break;
 8004a4a:	e00a      	b.n	8004a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	60fb      	str	r3, [r7, #12]

      break;
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	60fb      	str	r3, [r7, #12]

      break;
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a60:	bf00      	nop
  }

  return tmpreg;
 8004a62:	68fb      	ldr	r3, [r7, #12]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop

08004a70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	7f1b      	ldrb	r3, [r3, #28]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr
	...

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a33      	ldr	r2, [pc, #204]	; (8004bb0 <TIM_Base_SetConfig+0xe0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00f      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d00b      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <TIM_Base_SetConfig+0xe4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <TIM_Base_SetConfig+0xe8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <TIM_Base_SetConfig+0xec>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <TIM_Base_SetConfig+0xe0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01b      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d017      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <TIM_Base_SetConfig+0xe4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <TIM_Base_SetConfig+0xe8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <TIM_Base_SetConfig+0xec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <TIM_Base_SetConfig+0xf0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_Base_SetConfig+0xf4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <TIM_Base_SetConfig+0xf8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <TIM_Base_SetConfig+0xe0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d103      	bne.n	8004ba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	615a      	str	r2, [r3, #20]
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0302 	bic.w	r3, r3, #2
 8004c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <TIM_OC1_SetConfig+0xc8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d10c      	bne.n	8004c42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f023 0308 	bic.w	r3, r3, #8
 8004c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <TIM_OC1_SetConfig+0xc8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d111      	bne.n	8004c6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000

08004c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0210 	bic.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0320 	bic.w	r3, r3, #32
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <TIM_OC2_SetConfig+0xd0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d10d      	bne.n	8004d14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <TIM_OC2_SetConfig+0xd0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	40010000 	.word	0x40010000

08004d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <TIM_OC3_SetConfig+0xd0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10d      	bne.n	8004de6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_OC3_SetConfig+0xd0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d113      	bne.n	8004e16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	621a      	str	r2, [r3, #32]
}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000

08004e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <TIM_OC4_SetConfig+0x98>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d109      	bne.n	8004eb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	019b      	lsls	r3, r3, #6
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	40010000 	.word	0x40010000

08004edc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 0307 	bic.w	r3, r3, #7
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b70      	cmp	r3, #112	; 0x70
 8004f24:	d01a      	beq.n	8004f5c <TIM_SlaveTimer_SetConfig+0x80>
 8004f26:	2b70      	cmp	r3, #112	; 0x70
 8004f28:	d860      	bhi.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
 8004f2a:	2b60      	cmp	r3, #96	; 0x60
 8004f2c:	d054      	beq.n	8004fd8 <TIM_SlaveTimer_SetConfig+0xfc>
 8004f2e:	2b60      	cmp	r3, #96	; 0x60
 8004f30:	d85c      	bhi.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
 8004f32:	2b50      	cmp	r3, #80	; 0x50
 8004f34:	d046      	beq.n	8004fc4 <TIM_SlaveTimer_SetConfig+0xe8>
 8004f36:	2b50      	cmp	r3, #80	; 0x50
 8004f38:	d858      	bhi.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d019      	beq.n	8004f72 <TIM_SlaveTimer_SetConfig+0x96>
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d854      	bhi.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
 8004f42:	2b30      	cmp	r3, #48	; 0x30
 8004f44:	d055      	beq.n	8004ff2 <TIM_SlaveTimer_SetConfig+0x116>
 8004f46:	2b30      	cmp	r3, #48	; 0x30
 8004f48:	d850      	bhi.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d051      	beq.n	8004ff2 <TIM_SlaveTimer_SetConfig+0x116>
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d84c      	bhi.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04d      	beq.n	8004ff2 <TIM_SlaveTimer_SetConfig+0x116>
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d04b      	beq.n	8004ff2 <TIM_SlaveTimer_SetConfig+0x116>
 8004f5a:	e047      	b.n	8004fec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68d9      	ldr	r1, [r3, #12]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f000 f9d8 	bl	8005320 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004f70:	e040      	b.n	8004ff4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d101      	bne.n	8004f7e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e03b      	b.n	8004ff6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a1a      	ldr	r2, [r3, #32]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
      break;
 8004fc2:	e017      	b.n	8004ff4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6899      	ldr	r1, [r3, #8]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f000 f87b 	bl	80050cc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004fd6:	e00d      	b.n	8004ff4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f000 f8db 	bl	80051a0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004fea:	e003      	b.n	8004ff4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff0:	e000      	b.n	8004ff4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004ff2:	bf00      	nop
  }

  return status;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f023 0201 	bic.w	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <TIM_TI1_SetConfig+0xb8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_TI1_SetConfig+0x56>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d00f      	beq.n	8005056 <TIM_TI1_SetConfig+0x56>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a20      	ldr	r2, [pc, #128]	; (80050bc <TIM_TI1_SetConfig+0xbc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_TI1_SetConfig+0x56>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <TIM_TI1_SetConfig+0xc0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_TI1_SetConfig+0x56>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <TIM_TI1_SetConfig+0xc4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_TI1_SetConfig+0x56>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <TIM_TI1_SetConfig+0xc8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <TIM_TI1_SetConfig+0x5a>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <TIM_TI1_SetConfig+0x5c>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e003      	b.n	800507a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	b2db      	uxtb	r3, r3
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 030a 	and.w	r3, r3, #10
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40014000 	.word	0x40014000

080050cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 030a 	bic.w	r3, r3, #10
 8005108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0210 	bic.w	r2, r3, #16
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	031b      	lsls	r3, r3, #12
 800516c:	b29b      	uxth	r3, r3
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800517a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 0210 	bic.w	r2, r3, #16
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	031b      	lsls	r3, r3, #12
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	b2db      	uxtb	r3, r3
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800524e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	031b      	lsls	r3, r3, #12
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	031b      	lsls	r3, r3, #12
 80052cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	f043 0307 	orr.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800533a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	021a      	lsls	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	431a      	orrs	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4313      	orrs	r3, r2
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	609a      	str	r2, [r3, #8]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr

0800535e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2201      	movs	r2, #1
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	43db      	mvns	r3, r3
 8005380:	401a      	ands	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	fa01 f303 	lsl.w	r3, r1, r3
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e050      	b.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1b      	ldr	r2, [pc, #108]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d013      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a14      	ldr	r2, [pc, #80]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a12      	ldr	r2, [pc, #72]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10c      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4313      	orrs	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	40010000 	.word	0x40010000
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800
 8005478:	40000c00 	.word	0x40000c00
 800547c:	40014000 	.word	0x40014000

08005480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005498:	2302      	movs	r3, #2
 800549a:	e03d      	b.n	8005518 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
	...

08005548 <AES_keyschedule_enc_LL>:
 8005548:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800554c:	1092      	asrs	r2, r2, #2
 800554e:	2a00      	cmp	r2, #0
 8005550:	b084      	sub	sp, #16
 8005552:	dd06      	ble.n	8005562 <AES_keyschedule_enc_LL+0x1a>
 8005554:	0095      	lsls	r5, r2, #2
 8005556:	2300      	movs	r3, #0
 8005558:	58c4      	ldr	r4, [r0, r3]
 800555a:	50cc      	str	r4, [r1, r3]
 800555c:	3304      	adds	r3, #4
 800555e:	42ab      	cmp	r3, r5
 8005560:	d1fa      	bne.n	8005558 <AES_keyschedule_enc_LL+0x10>
 8005562:	2a06      	cmp	r2, #6
 8005564:	d007      	beq.n	8005576 <AES_keyschedule_enc_LL+0x2e>
 8005566:	2a08      	cmp	r2, #8
 8005568:	d06c      	beq.n	8005644 <AES_keyschedule_enc_LL+0xfc>
 800556a:	2a04      	cmp	r2, #4
 800556c:	d03a      	beq.n	80055e4 <AES_keyschedule_enc_LL+0x9c>
 800556e:	b004      	add	sp, #16
 8005570:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005574:	4770      	bx	lr
 8005576:	f8df c190 	ldr.w	ip, [pc, #400]	; 8005708 <AES_keyschedule_enc_LL+0x1c0>
 800557a:	684c      	ldr	r4, [r1, #4]
 800557c:	688d      	ldr	r5, [r1, #8]
 800557e:	68c8      	ldr	r0, [r1, #12]
 8005580:	680e      	ldr	r6, [r1, #0]
 8005582:	4b60      	ldr	r3, [pc, #384]	; (8005704 <AES_keyschedule_enc_LL+0x1bc>)
 8005584:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 8005588:	e005      	b.n	8005596 <AES_keyschedule_enc_LL+0x4e>
 800558a:	690f      	ldr	r7, [r1, #16]
 800558c:	4047      	eors	r7, r0
 800558e:	407a      	eors	r2, r7
 8005590:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005592:	628f      	str	r7, [r1, #40]	; 0x28
 8005594:	3118      	adds	r1, #24
 8005596:	694a      	ldr	r2, [r1, #20]
 8005598:	f85c af04 	ldr.w	sl, [ip, #4]!
 800559c:	fa5f f982 	uxtb.w	r9, r2
 80055a0:	0e17      	lsrs	r7, r2, #24
 80055a2:	f813 9009 	ldrb.w	r9, [r3, r9]
 80055a6:	5ddf      	ldrb	r7, [r3, r7]
 80055a8:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 80055ac:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80055b0:	f3c2 2907 	ubfx	r9, r2, #8, #8
 80055b4:	f813 b00b 	ldrb.w	fp, [r3, fp]
 80055b8:	f813 9009 	ldrb.w	r9, [r3, r9]
 80055bc:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 80055c0:	ea86 060a 	eor.w	r6, r6, sl
 80055c4:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 80055c8:	407e      	eors	r6, r7
 80055ca:	4074      	eors	r4, r6
 80055cc:	4065      	eors	r5, r4
 80055ce:	4068      	eors	r0, r5
 80055d0:	4541      	cmp	r1, r8
 80055d2:	6248      	str	r0, [r1, #36]	; 0x24
 80055d4:	620d      	str	r5, [r1, #32]
 80055d6:	61cc      	str	r4, [r1, #28]
 80055d8:	618e      	str	r6, [r1, #24]
 80055da:	d1d6      	bne.n	800558a <AES_keyschedule_enc_LL+0x42>
 80055dc:	b004      	add	sp, #16
 80055de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055e2:	4770      	bx	lr
 80055e4:	4608      	mov	r0, r1
 80055e6:	4f48      	ldr	r7, [pc, #288]	; (8005708 <AES_keyschedule_enc_LL+0x1c0>)
 80055e8:	f850 4b90 	ldr.w	r4, [r0], #144
 80055ec:	68ca      	ldr	r2, [r1, #12]
 80055ee:	684d      	ldr	r5, [r1, #4]
 80055f0:	688e      	ldr	r6, [r1, #8]
 80055f2:	4b44      	ldr	r3, [pc, #272]	; (8005704 <AES_keyschedule_enc_LL+0x1bc>)
 80055f4:	e000      	b.n	80055f8 <AES_keyschedule_enc_LL+0xb0>
 80055f6:	3110      	adds	r1, #16
 80055f8:	fa5f f982 	uxtb.w	r9, r2
 80055fc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8005600:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8005604:	f813 b009 	ldrb.w	fp, [r3, r9]
 8005608:	f813 c00c 	ldrb.w	ip, [r3, ip]
 800560c:	f813 a008 	ldrb.w	sl, [r3, r8]
 8005610:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8005614:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8005618:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 800561c:	f813 9009 	ldrb.w	r9, [r3, r9]
 8005620:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8005624:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8005628:	ea84 0408 	eor.w	r4, r4, r8
 800562c:	ea84 040c 	eor.w	r4, r4, ip
 8005630:	4065      	eors	r5, r4
 8005632:	406e      	eors	r6, r5
 8005634:	4072      	eors	r2, r6
 8005636:	4281      	cmp	r1, r0
 8005638:	61ca      	str	r2, [r1, #28]
 800563a:	618e      	str	r6, [r1, #24]
 800563c:	614d      	str	r5, [r1, #20]
 800563e:	610c      	str	r4, [r1, #16]
 8005640:	d1d9      	bne.n	80055f6 <AES_keyschedule_enc_LL+0xae>
 8005642:	e794      	b.n	800556e <AES_keyschedule_enc_LL+0x26>
 8005644:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <AES_keyschedule_enc_LL+0x1bc>)
 8005646:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8005708 <AES_keyschedule_enc_LL+0x1c0>
 800564a:	68ca      	ldr	r2, [r1, #12]
 800564c:	688c      	ldr	r4, [r1, #8]
 800564e:	684d      	ldr	r5, [r1, #4]
 8005650:	f8d1 c000 	ldr.w	ip, [r1]
 8005654:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 8005658:	4699      	mov	r9, r3
 800565a:	9003      	str	r0, [sp, #12]
 800565c:	e023      	b.n	80056a6 <AES_keyschedule_enc_LL+0x15e>
 800565e:	f819 b00b 	ldrb.w	fp, [r9, fp]
 8005662:	f819 7007 	ldrb.w	r7, [r9, r7]
 8005666:	f819 8008 	ldrb.w	r8, [r9, r8]
 800566a:	9702      	str	r7, [sp, #8]
 800566c:	9f01      	ldr	r7, [sp, #4]
 800566e:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8005672:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005676:	f819 6007 	ldrb.w	r6, [r9, r7]
 800567a:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 800567e:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 8005682:	690e      	ldr	r6, [r1, #16]
 8005684:	694f      	ldr	r7, [r1, #20]
 8005686:	ea88 0806 	eor.w	r8, r8, r6
 800568a:	698e      	ldr	r6, [r1, #24]
 800568c:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 8005690:	ea88 0707 	eor.w	r7, r8, r7
 8005694:	ea87 0b06 	eor.w	fp, r7, r6
 8005698:	ea8b 0000 	eor.w	r0, fp, r0
 800569c:	634f      	str	r7, [r1, #52]	; 0x34
 800569e:	63c8      	str	r0, [r1, #60]	; 0x3c
 80056a0:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 80056a4:	3120      	adds	r1, #32
 80056a6:	69c8      	ldr	r0, [r1, #28]
 80056a8:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 80056ac:	b2c7      	uxtb	r7, r0
 80056ae:	0e06      	lsrs	r6, r0, #24
 80056b0:	f813 b007 	ldrb.w	fp, [r3, r7]
 80056b4:	5d9e      	ldrb	r6, [r3, r6]
 80056b6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80056ba:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 80056be:	f813 b007 	ldrb.w	fp, [r3, r7]
 80056c2:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80056c6:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 80056ca:	5ddf      	ldrb	r7, [r3, r7]
 80056cc:	ea8c 0c08 	eor.w	ip, ip, r8
 80056d0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 80056d4:	ea8c 0c06 	eor.w	ip, ip, r6
 80056d8:	ea8c 0505 	eor.w	r5, ip, r5
 80056dc:	406c      	eors	r4, r5
 80056de:	4062      	eors	r2, r4
 80056e0:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80056e4:	9601      	str	r6, [sp, #4]
 80056e6:	9e03      	ldr	r6, [sp, #12]
 80056e8:	62ca      	str	r2, [r1, #44]	; 0x2c
 80056ea:	42b1      	cmp	r1, r6
 80056ec:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80056f0:	fa5f f882 	uxtb.w	r8, r2
 80056f4:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80056f8:	628c      	str	r4, [r1, #40]	; 0x28
 80056fa:	624d      	str	r5, [r1, #36]	; 0x24
 80056fc:	f8c1 c020 	str.w	ip, [r1, #32]
 8005700:	d1ad      	bne.n	800565e <AES_keyschedule_enc_LL+0x116>
 8005702:	e734      	b.n	800556e <AES_keyschedule_enc_LL+0x26>
 8005704:	080085d0 	.word	0x080085d0
 8005708:	080081a4 	.word	0x080081a4

0800570c <AES_general_SW_enc>:
 800570c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005710:	4cbe      	ldr	r4, [pc, #760]	; (8005a0c <AES_general_SW_enc+0x300>)
 8005712:	4dbf      	ldr	r5, [pc, #764]	; (8005a10 <AES_general_SW_enc+0x304>)
 8005714:	b08a      	sub	sp, #40	; 0x28
 8005716:	2700      	movs	r7, #0
 8005718:	2601      	movs	r6, #1
 800571a:	9709      	str	r7, [sp, #36]	; 0x24
 800571c:	6026      	str	r6, [r4, #0]
 800571e:	6824      	ldr	r4, [r4, #0]
 8005720:	9409      	str	r4, [sp, #36]	; 0x24
 8005722:	682c      	ldr	r4, [r5, #0]
 8005724:	9409      	str	r4, [sp, #36]	; 0x24
 8005726:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005728:	9107      	str	r1, [sp, #28]
 800572a:	10db      	asrs	r3, r3, #3
 800572c:	3303      	adds	r3, #3
 800572e:	3401      	adds	r4, #1
 8005730:	9306      	str	r3, [sp, #24]
 8005732:	f000 8151 	beq.w	80059d8 <AES_general_SW_enc+0x2cc>
 8005736:	6804      	ldr	r4, [r0, #0]
 8005738:	6811      	ldr	r1, [r2, #0]
 800573a:	6840      	ldr	r0, [r0, #4]
 800573c:	6853      	ldr	r3, [r2, #4]
 800573e:	ea81 0b04 	eor.w	fp, r1, r4
 8005742:	4058      	eors	r0, r3
 8005744:	9003      	str	r0, [sp, #12]
 8005746:	46d9      	mov	r9, fp
 8005748:	46dc      	mov	ip, fp
 800574a:	4bb2      	ldr	r3, [pc, #712]	; (8005a14 <AES_general_SW_enc+0x308>)
 800574c:	9c03      	ldr	r4, [sp, #12]
 800574e:	4698      	mov	r8, r3
 8005750:	e067      	b.n	8005822 <AES_general_SW_enc+0x116>
 8005752:	ea4f 611b 	mov.w	r1, fp, lsr #24
 8005756:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800575a:	0e07      	lsrs	r7, r0, #24
 800575c:	ea4f 651a 	mov.w	r5, sl, lsr #24
 8005760:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 8005764:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 8005768:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 800576c:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 8005770:	e892 0022 	ldmia.w	r2, {r1, r5}
 8005774:	404e      	eors	r6, r1
 8005776:	fa5f f18a 	uxtb.w	r1, sl
 800577a:	ea89 0505 	eor.w	r5, r9, r5
 800577e:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 8005782:	6891      	ldr	r1, [r2, #8]
 8005784:	ea8c 0c01 	eor.w	ip, ip, r1
 8005788:	68d1      	ldr	r1, [r2, #12]
 800578a:	404f      	eors	r7, r1
 800578c:	9704      	str	r7, [sp, #16]
 800578e:	fa5f f78b 	uxtb.w	r7, fp
 8005792:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 8005796:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 800579a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800579e:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 80057a2:	b2e5      	uxtb	r5, r4
 80057a4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80057a8:	b2c1      	uxtb	r1, r0
 80057aa:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80057ae:	9405      	str	r4, [sp, #20]
 80057b0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80057b4:	9c04      	ldr	r4, [sp, #16]
 80057b6:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80057ba:	9703      	str	r7, [sp, #12]
 80057bc:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 80057c0:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80057c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80057c8:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 80057cc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80057d0:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 80057d4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80057d8:	f3ca 2007 	ubfx	r0, sl, #8, #8
 80057dc:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80057e0:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 80057e4:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 80057e8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80057ec:	f3cb 4007 	ubfx	r0, fp, #16, #8
 80057f0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80057f4:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 80057f8:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 80057fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005800:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8005804:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 8005808:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 800580c:	9805      	ldr	r0, [sp, #20]
 800580e:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 8005812:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 8005816:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 800581a:	9703      	str	r7, [sp, #12]
 800581c:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 8005820:	463c      	mov	r4, r7
 8005822:	0e21      	lsrs	r1, r4, #24
 8005824:	ea4f 661c 	mov.w	r6, ip, lsr #24
 8005828:	ea4f 6419 	mov.w	r4, r9, lsr #24
 800582c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8005830:	6911      	ldr	r1, [r2, #16]
 8005832:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8005836:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800583a:	6954      	ldr	r4, [r2, #20]
 800583c:	404d      	eors	r5, r1
 800583e:	ea4f 601b 	mov.w	r0, fp, lsr #24
 8005842:	fa5f f189 	uxtb.w	r1, r9
 8005846:	407c      	eors	r4, r7
 8005848:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800584c:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 8005850:	6991      	ldr	r1, [r2, #24]
 8005852:	4048      	eors	r0, r1
 8005854:	69d1      	ldr	r1, [r2, #28]
 8005856:	404e      	eors	r6, r1
 8005858:	9604      	str	r6, [sp, #16]
 800585a:	9e03      	ldr	r6, [sp, #12]
 800585c:	9904      	ldr	r1, [sp, #16]
 800585e:	fa5f fa86 	uxtb.w	sl, r6
 8005862:	fa5f f68b 	uxtb.w	r6, fp
 8005866:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800586a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800586e:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 8005872:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 8005876:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800587a:	fa5f f48c 	uxtb.w	r4, ip
 800587e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8005882:	9702      	str	r7, [sp, #8]
 8005884:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005888:	9705      	str	r7, [sp, #20]
 800588a:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 800588e:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8005892:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005896:	9f06      	ldr	r7, [sp, #24]
 8005898:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 800589c:	9601      	str	r6, [sp, #4]
 800589e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80058a2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80058a6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80058aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80058ae:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80058b2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 80058b6:	9604      	str	r6, [sp, #16]
 80058b8:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80058bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80058c0:	3f01      	subs	r7, #1
 80058c2:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 80058c6:	9706      	str	r7, [sp, #24]
 80058c8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80058cc:	9904      	ldr	r1, [sp, #16]
 80058ce:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 80058d2:	f3cb 4507 	ubfx	r5, fp, #16, #8
 80058d6:	f3cb 2907 	ubfx	r9, fp, #8, #8
 80058da:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 80058de:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 80058e2:	9901      	ldr	r1, [sp, #4]
 80058e4:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 80058e8:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 80058ec:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 80058f0:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 80058f4:	9f06      	ldr	r7, [sp, #24]
 80058f6:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 80058fa:	9e05      	ldr	r6, [sp, #20]
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8005902:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 8005906:	f102 0220 	add.w	r2, r2, #32
 800590a:	f73f af22 	bgt.w	8005752 <AES_general_SW_enc+0x46>
 800590e:	4b42      	ldr	r3, [pc, #264]	; (8005a18 <AES_general_SW_enc+0x30c>)
 8005910:	6811      	ldr	r1, [r2, #0]
 8005912:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8005916:	fa5f f68a 	uxtb.w	r6, sl
 800591a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800591e:	f813 8007 	ldrb.w	r8, [r3, r7]
 8005922:	5d9f      	ldrb	r7, [r3, r6]
 8005924:	5d5d      	ldrb	r5, [r3, r5]
 8005926:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800592a:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 800592e:	f813 c006 	ldrb.w	ip, [r3, r6]
 8005932:	0e27      	lsrs	r7, r4, #24
 8005934:	fa5f f68b 	uxtb.w	r6, fp
 8005938:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 800593c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8005940:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 8005944:	ea88 0101 	eor.w	r1, r8, r1
 8005948:	f813 c007 	ldrb.w	ip, [r3, r7]
 800594c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005950:	5d9f      	ldrb	r7, [r3, r6]
 8005952:	5d5e      	ldrb	r6, [r3, r5]
 8005954:	f8c8 1000 	str.w	r1, [r8]
 8005958:	f3ca 2507 	ubfx	r5, sl, #8, #8
 800595c:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8005960:	f813 8005 	ldrb.w	r8, [r3, r5]
 8005964:	6851      	ldr	r1, [r2, #4]
 8005966:	0e07      	lsrs	r7, r0, #24
 8005968:	b2e5      	uxtb	r5, r4
 800596a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 800596e:	f3ca 4607 	ubfx	r6, sl, #16, #8
 8005972:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 8005976:	5ddf      	ldrb	r7, [r3, r7]
 8005978:	f813 9006 	ldrb.w	r9, [r3, r6]
 800597c:	5d5d      	ldrb	r5, [r3, r5]
 800597e:	ea8c 0101 	eor.w	r1, ip, r1
 8005982:	f3cb 2607 	ubfx	r6, fp, #8, #8
 8005986:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800598a:	5d9e      	ldrb	r6, [r3, r6]
 800598c:	f8cc 1004 	str.w	r1, [ip, #4]
 8005990:	b2c0      	uxtb	r0, r0
 8005992:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 8005996:	ea4f 671a 	mov.w	r7, sl, lsr #24
 800599a:	f813 8000 	ldrb.w	r8, [r3, r0]
 800599e:	6890      	ldr	r0, [r2, #8]
 80059a0:	5ddf      	ldrb	r7, [r3, r7]
 80059a2:	f3cb 4107 	ubfx	r1, fp, #16, #8
 80059a6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80059aa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80059ae:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80059b2:	4045      	eors	r5, r0
 80059b4:	5c58      	ldrb	r0, [r3, r1]
 80059b6:	f8cc 5008 	str.w	r5, [ip, #8]
 80059ba:	5d19      	ldrb	r1, [r3, r4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 80059c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059ca:	4053      	eors	r3, r2
 80059cc:	f8cc 300c 	str.w	r3, [ip, #12]
 80059d0:	b00a      	add	sp, #40	; 0x28
 80059d2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059d6:	4770      	bx	lr
 80059d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	9309      	str	r3, [sp, #36]	; 0x24
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f aea7 	bne.w	8005736 <AES_general_SW_enc+0x2a>
 80059e8:	6803      	ldr	r3, [r0, #0]
 80059ea:	6815      	ldr	r5, [r2, #0]
 80059ec:	6847      	ldr	r7, [r0, #4]
 80059ee:	6886      	ldr	r6, [r0, #8]
 80059f0:	6854      	ldr	r4, [r2, #4]
 80059f2:	68c0      	ldr	r0, [r0, #12]
 80059f4:	6891      	ldr	r1, [r2, #8]
 80059f6:	406b      	eors	r3, r5
 80059f8:	9303      	str	r3, [sp, #12]
 80059fa:	68d3      	ldr	r3, [r2, #12]
 80059fc:	ea84 0c07 	eor.w	ip, r4, r7
 8005a00:	ea81 0b06 	eor.w	fp, r1, r6
 8005a04:	ea83 0900 	eor.w	r9, r3, r0
 8005a08:	e69f      	b.n	800574a <AES_general_SW_enc+0x3e>
 8005a0a:	bf00      	nop
 8005a0c:	40023008 	.word	0x40023008
 8005a10:	40023000 	.word	0x40023000
 8005a14:	080081d0 	.word	0x080081d0
 8005a18:	080085d0 	.word	0x080085d0

08005a1c <DRBG_AES128_Block_cipher_df.constprop.37>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	b0ff      	sub	sp, #508	; 0x1fc
 8005a22:	460c      	mov	r4, r1
 8005a24:	f101 0519 	add.w	r5, r1, #25
 8005a28:	4606      	mov	r6, r0
 8005a2a:	9201      	str	r2, [sp, #4]
 8005a2c:	499c      	ldr	r1, [pc, #624]	; (8005ca0 <DRBG_AES128_Block_cipher_df.constprop.37+0x284>)
 8005a2e:	22b0      	movs	r2, #176	; 0xb0
 8005a30:	a852      	add	r0, sp, #328	; 0x148
 8005a32:	f002 f88d 	bl	8007b50 <memcpy>
 8005a36:	f015 080f 	ands.w	r8, r5, #15
 8005a3a:	ea4f 2214 	mov.w	r2, r4, lsr #8
 8005a3e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005a42:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8005a46:	f04f 0320 	mov.w	r3, #32
 8005a4a:	bf18      	it	ne
 8005a4c:	f1c8 0810 	rsbne	r8, r8, #16
 8005a50:	4631      	mov	r1, r6
 8005a52:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8005a56:	f04f 0600 	mov.w	r6, #0
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	a810      	add	r0, sp, #64	; 0x40
 8005a5e:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 8005a62:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8005a66:	462f      	mov	r7, r5
 8005a68:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 8005a6c:	bf18      	it	ne
 8005a6e:	eb05 0708 	addne.w	r7, r5, r8
 8005a72:	f88d e038 	strb.w	lr, [sp, #56]	; 0x38
 8005a76:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
 8005a7a:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
 8005a7e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8005a82:	f002 f865 	bl	8007b50 <memcpy>
 8005a86:	ab0a      	add	r3, sp, #40	; 0x28
 8005a88:	441c      	add	r4, r3
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	7623      	strb	r3, [r4, #24]
 8005a8e:	f1b8 0f00 	cmp.w	r8, #0
 8005a92:	d005      	beq.n	8005aa0 <DRBG_AES128_Block_cipher_df.constprop.37+0x84>
 8005a94:	a80a      	add	r0, sp, #40	; 0x28
 8005a96:	4428      	add	r0, r5
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	f002 f866 	bl	8007b6c <memset>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	093f      	lsrs	r7, r7, #4
 8005aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8005aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	930d      	str	r3, [sp, #52]	; 0x34
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	9304      	str	r3, [sp, #16]
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	f000 80ec 	beq.w	8005c90 <DRBG_AES128_Block_cipher_df.constprop.37+0x274>
 8005ab8:	46b8      	mov	r8, r7
 8005aba:	4618      	mov	r0, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	461e      	mov	r6, r3
 8005ac2:	ac0a      	add	r4, sp, #40	; 0x28
 8005ac4:	ad26      	add	r5, sp, #152	; 0x98
 8005ac6:	461f      	mov	r7, r3
 8005ac8:	e003      	b.n	8005ad2 <DRBG_AES128_Block_cipher_df.constprop.37+0xb6>
 8005aca:	9a02      	ldr	r2, [sp, #8]
 8005acc:	9903      	ldr	r1, [sp, #12]
 8005ace:	9804      	ldr	r0, [sp, #16]
 8005ad0:	9f05      	ldr	r7, [sp, #20]
 8005ad2:	7863      	ldrb	r3, [r4, #1]
 8005ad4:	f894 e000 	ldrb.w	lr, [r4]
 8005ad8:	f894 a009 	ldrb.w	sl, [r4, #9]
 8005adc:	f894 900d 	ldrb.w	r9, [r4, #13]
 8005ae0:	f894 c005 	ldrb.w	ip, [r4, #5]
 8005ae4:	f894 b004 	ldrb.w	fp, [r4, #4]
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8005aee:	f894 e003 	ldrb.w	lr, [r4, #3]
 8005af2:	ea43 030e 	orr.w	r3, r3, lr
 8005af6:	f894 e008 	ldrb.w	lr, [r4, #8]
 8005afa:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8005afe:	ea4a 6a0e 	orr.w	sl, sl, lr, lsl #24
 8005b02:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8005b06:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8005b0a:	ea49 690e 	orr.w	r9, r9, lr, lsl #24
 8005b0e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005b12:	f894 e007 	ldrb.w	lr, [r4, #7]
 8005b16:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
 8005b1a:	ea4c 0c0e 	orr.w	ip, ip, lr
 8005b1e:	f894 b002 	ldrb.w	fp, [r4, #2]
 8005b22:	f894 e00b 	ldrb.w	lr, [r4, #11]
 8005b26:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 8005b2a:	ea4a 0a0e 	orr.w	sl, sl, lr
 8005b2e:	f894 e00f 	ldrb.w	lr, [r4, #15]
 8005b32:	405a      	eors	r2, r3
 8005b34:	ea49 090e 	orr.w	r9, r9, lr
 8005b38:	79a3      	ldrb	r3, [r4, #6]
 8005b3a:	f894 e00a 	ldrb.w	lr, [r4, #10]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	7ba2      	ldrb	r2, [r4, #14]
 8005b42:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
 8005b46:	ea49 2202 	orr.w	r2, r9, r2, lsl #8
 8005b4a:	ea4a 2e0e 	orr.w	lr, sl, lr, lsl #8
 8005b4e:	ea81 0c0c 	eor.w	ip, r1, ip
 8005b52:	ea80 0e0e 	eor.w	lr, r0, lr
 8005b56:	4057      	eors	r7, r2
 8005b58:	2310      	movs	r3, #16
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	a902      	add	r1, sp, #8
 8005b60:	aa52      	add	r2, sp, #328	; 0x148
 8005b62:	f8c5 c004 	str.w	ip, [r5, #4]
 8005b66:	f8c5 e008 	str.w	lr, [r5, #8]
 8005b6a:	60ef      	str	r7, [r5, #12]
 8005b6c:	441c      	add	r4, r3
 8005b6e:	f7ff fdcd 	bl	800570c <AES_general_SW_enc>
 8005b72:	4546      	cmp	r6, r8
 8005b74:	d1a9      	bne.n	8005aca <DRBG_AES128_Block_cipher_df.constprop.37+0xae>
 8005b76:	2200      	movs	r2, #0
 8005b78:	2401      	movs	r4, #1
 8005b7a:	f10d 0e18 	add.w	lr, sp, #24
 8005b7e:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
 8005b82:	4647      	mov	r7, r8
 8005b84:	4613      	mov	r3, r2
 8005b86:	9206      	str	r2, [sp, #24]
 8005b88:	9207      	str	r2, [sp, #28]
 8005b8a:	9208      	str	r2, [sp, #32]
 8005b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4611      	mov	r1, r2
 8005b92:	4616      	mov	r6, r2
 8005b94:	ac0a      	add	r4, sp, #40	; 0x28
 8005b96:	f8cd e000 	str.w	lr, [sp]
 8005b9a:	e003      	b.n	8005ba4 <DRBG_AES128_Block_cipher_df.constprop.37+0x188>
 8005b9c:	9a06      	ldr	r2, [sp, #24]
 8005b9e:	9907      	ldr	r1, [sp, #28]
 8005ba0:	9808      	ldr	r0, [sp, #32]
 8005ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba4:	f894 8001 	ldrb.w	r8, [r4, #1]
 8005ba8:	f894 9000 	ldrb.w	r9, [r4]
 8005bac:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8005bb0:	f894 e005 	ldrb.w	lr, [r4, #5]
 8005bb4:	f894 b004 	ldrb.w	fp, [r4, #4]
 8005bb8:	f894 a009 	ldrb.w	sl, [r4, #9]
 8005bbc:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8005bc0:	ea48 6809 	orr.w	r8, r8, r9, lsl #24
 8005bc4:	f894 9003 	ldrb.w	r9, [r4, #3]
 8005bc8:	ea48 0809 	orr.w	r8, r8, r9
 8005bcc:	f894 9002 	ldrb.w	r9, [r4, #2]
 8005bd0:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8005bd4:	f894 800c 	ldrb.w	r8, [r4, #12]
 8005bd8:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005bdc:	ea4c 6c08 	orr.w	ip, ip, r8, lsl #24
 8005be0:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8005be4:	f894 8007 	ldrb.w	r8, [r4, #7]
 8005be8:	ea4e 6e0b 	orr.w	lr, lr, fp, lsl #24
 8005bec:	f894 b008 	ldrb.w	fp, [r4, #8]
 8005bf0:	ea4e 0e08 	orr.w	lr, lr, r8
 8005bf4:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8005bf8:	f894 800b 	ldrb.w	r8, [r4, #11]
 8005bfc:	ea4a 6a0b 	orr.w	sl, sl, fp, lsl #24
 8005c00:	ea4a 0a08 	orr.w	sl, sl, r8
 8005c04:	f894 800f 	ldrb.w	r8, [r4, #15]
 8005c08:	f894 b006 	ldrb.w	fp, [r4, #6]
 8005c0c:	ea82 0209 	eor.w	r2, r2, r9
 8005c10:	ea4c 0c08 	orr.w	ip, ip, r8
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	f894 800a 	ldrb.w	r8, [r4, #10]
 8005c1a:	7ba2      	ldrb	r2, [r4, #14]
 8005c1c:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
 8005c20:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8005c24:	ea4a 2808 	orr.w	r8, sl, r8, lsl #8
 8005c28:	ea81 0e0e 	eor.w	lr, r1, lr
 8005c2c:	ea83 0c0c 	eor.w	ip, r3, ip
 8005c30:	ea80 0808 	eor.w	r8, r0, r8
 8005c34:	2310      	movs	r3, #16
 8005c36:	3601      	adds	r6, #1
 8005c38:	4628      	mov	r0, r5
 8005c3a:	9900      	ldr	r1, [sp, #0]
 8005c3c:	f8c5 e004 	str.w	lr, [r5, #4]
 8005c40:	aa52      	add	r2, sp, #328	; 0x148
 8005c42:	f8c5 8008 	str.w	r8, [r5, #8]
 8005c46:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005c4a:	441c      	add	r4, r3
 8005c4c:	f7ff fd5e 	bl	800570c <AES_general_SW_enc>
 8005c50:	42be      	cmp	r6, r7
 8005c52:	d1a3      	bne.n	8005b9c <DRBG_AES128_Block_cipher_df.constprop.37+0x180>
 8005c54:	a802      	add	r0, sp, #8
 8005c56:	4629      	mov	r1, r5
 8005c58:	2210      	movs	r2, #16
 8005c5a:	f7ff fc75 	bl	8005548 <AES_keyschedule_enc_LL>
 8005c5e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005c62:	462a      	mov	r2, r5
 8005c64:	2310      	movs	r3, #16
 8005c66:	f7ff fd51 	bl	800570c <AES_general_SW_enc>
 8005c6a:	9c01      	ldr	r4, [sp, #4]
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	6861      	ldr	r1, [r4, #4]
 8005c70:	68a2      	ldr	r2, [r4, #8]
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	9c00      	ldr	r4, [sp, #0]
 8005c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c78:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	f104 0110 	add.w	r1, r4, #16
 8005c82:	2310      	movs	r3, #16
 8005c84:	f7ff fd42 	bl	800570c <AES_general_SW_enc>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	b07f      	add	sp, #508	; 0x1fc
 8005c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c90:	ac06      	add	r4, sp, #24
 8005c92:	9706      	str	r7, [sp, #24]
 8005c94:	9707      	str	r7, [sp, #28]
 8005c96:	9708      	str	r7, [sp, #32]
 8005c98:	9709      	str	r7, [sp, #36]	; 0x24
 8005c9a:	ad26      	add	r5, sp, #152	; 0x98
 8005c9c:	9400      	str	r4, [sp, #0]
 8005c9e:	e7d9      	b.n	8005c54 <DRBG_AES128_Block_cipher_df.constprop.37+0x238>
 8005ca0:	08007c80 	.word	0x08007c80

08005ca4 <crl_DRBG_AES128_Generate.part.25.constprop.36>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	460d      	mov	r5, r1
 8005caa:	1e19      	subs	r1, r3, #0
 8005cac:	b0c1      	sub	sp, #260	; 0x104
 8005cae:	4680      	mov	r8, r0
 8005cb0:	f340 810d 	ble.w	8005ece <crl_DRBG_AES128_Generate.part.25.constprop.36+0x22a>
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	aa04      	add	r2, sp, #16
 8005cb8:	f7ff feb0 	bl	8005a1c <DRBG_AES128_Block_cipher_df.constprop.37>
 8005cbc:	b110      	cbz	r0, 8005cc4 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x20>
 8005cbe:	b041      	add	sp, #260	; 0x104
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc4:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8005cc8:	f108 0a10 	add.w	sl, r8, #16
 8005ccc:	4650      	mov	r0, sl
 8005cce:	4649      	mov	r1, r9
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	f7ff fc39 	bl	8005548 <AES_keyschedule_enc_LL>
 8005cd6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005cda:	464c      	mov	r4, r9
 8005cdc:	465f      	mov	r7, fp
 8005cde:	462e      	mov	r6, r5
 8005ce0:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4640      	mov	r0, r8
 8005cec:	464a      	mov	r2, r9
 8005cee:	441f      	add	r7, r3
 8005cf0:	f8c8 500c 	str.w	r5, [r8, #12]
 8005cf4:	b985      	cbnz	r5, 8005d18 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8005cf6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8005cfa:	3501      	adds	r5, #1
 8005cfc:	f8c8 5008 	str.w	r5, [r8, #8]
 8005d00:	b955      	cbnz	r5, 8005d18 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8005d02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005d06:	3501      	adds	r5, #1
 8005d08:	f8c8 5004 	str.w	r5, [r8, #4]
 8005d0c:	b925      	cbnz	r5, 8005d18 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 8005d0e:	f8d8 5000 	ldr.w	r5, [r8]
 8005d12:	3501      	adds	r5, #1
 8005d14:	f8c8 5000 	str.w	r5, [r8]
 8005d18:	f7ff fcf8 	bl	800570c <AES_general_SW_enc>
 8005d1c:	454f      	cmp	r7, r9
 8005d1e:	d1df      	bne.n	8005ce0 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x3c>
 8005d20:	9a06      	ldr	r2, [sp, #24]
 8005d22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d26:	9804      	ldr	r0, [sp, #16]
 8005d28:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005d2a:	4635      	mov	r5, r6
 8005d2c:	9e05      	ldr	r6, [sp, #20]
 8005d2e:	4053      	eors	r3, r2
 8005d30:	4071      	eors	r1, r6
 8005d32:	9a07      	ldr	r2, [sp, #28]
 8005d34:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005d36:	f8c8 3018 	str.w	r3, [r8, #24]
 8005d3a:	4047      	eors	r7, r0
 8005d3c:	ea82 0e06 	eor.w	lr, r2, r6
 8005d40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005d42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	f8c8 7010 	str.w	r7, [r8, #16]
 8005d4a:	9f08      	ldr	r7, [sp, #32]
 8005d4c:	f8c8 1014 	str.w	r1, [r8, #20]
 8005d50:	ea83 0600 	eor.w	r6, r3, r0
 8005d54:	ea87 0102 	eor.w	r1, r7, r2
 8005d58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d5e:	f8c8 e01c 	str.w	lr, [r8, #28]
 8005d62:	ea80 0702 	eor.w	r7, r0, r2
 8005d66:	e888 00c2 	stmia.w	r8, {r1, r6, r7}
 8005d6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005d6c:	ea83 0200 	eor.w	r2, r3, r0
 8005d70:	f8c8 200c 	str.w	r2, [r8, #12]
 8005d74:	4650      	mov	r0, sl
 8005d76:	4621      	mov	r1, r4
 8005d78:	2210      	movs	r2, #16
 8005d7a:	f7ff fbe5 	bl	8005548 <AES_keyschedule_enc_LL>
 8005d7e:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8005d82:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005d86:	3601      	adds	r6, #1
 8005d88:	4640      	mov	r0, r8
 8005d8a:	4669      	mov	r1, sp
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	2310      	movs	r3, #16
 8005d90:	f8c8 600c 	str.w	r6, [r8, #12]
 8005d94:	b986      	cbnz	r6, 8005db8 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8005d96:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8005d9a:	3601      	adds	r6, #1
 8005d9c:	f8c8 6008 	str.w	r6, [r8, #8]
 8005da0:	b956      	cbnz	r6, 8005db8 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8005da2:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8005da6:	3601      	adds	r6, #1
 8005da8:	f8c8 6004 	str.w	r6, [r8, #4]
 8005dac:	b926      	cbnz	r6, 8005db8 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8005dae:	f8d8 6000 	ldr.w	r6, [r8]
 8005db2:	3601      	adds	r6, #1
 8005db4:	f8c8 6000 	str.w	r6, [r8]
 8005db8:	f7ff fca8 	bl	800570c <AES_general_SW_enc>
 8005dbc:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 8005dc0:	70e8      	strb	r0, [r5, #3]
 8005dc2:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8005dc6:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8005dca:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8005dce:	0a0e      	lsrs	r6, r1, #8
 8005dd0:	0c08      	lsrs	r0, r1, #16
 8005dd2:	f885 9002 	strb.w	r9, [r5, #2]
 8005dd6:	f885 c001 	strb.w	ip, [r5, #1]
 8005dda:	f885 e000 	strb.w	lr, [r5]
 8005dde:	71e9      	strb	r1, [r5, #7]
 8005de0:	71ae      	strb	r6, [r5, #6]
 8005de2:	7168      	strb	r0, [r5, #5]
 8005de4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8005de8:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8005dec:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005df0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8005df4:	0a1e      	lsrs	r6, r3, #8
 8005df6:	0c18      	lsrs	r0, r3, #16
 8005df8:	0e19      	lsrs	r1, r3, #24
 8005dfa:	f885 a004 	strb.w	sl, [r5, #4]
 8005dfe:	72ea      	strb	r2, [r5, #11]
 8005e00:	f885 900a 	strb.w	r9, [r5, #10]
 8005e04:	f885 c009 	strb.w	ip, [r5, #9]
 8005e08:	f885 e008 	strb.w	lr, [r5, #8]
 8005e0c:	73eb      	strb	r3, [r5, #15]
 8005e0e:	73ae      	strb	r6, [r5, #14]
 8005e10:	7368      	strb	r0, [r5, #13]
 8005e12:	7329      	strb	r1, [r5, #12]
 8005e14:	3510      	adds	r5, #16
 8005e16:	42bd      	cmp	r5, r7
 8005e18:	d1b3      	bne.n	8005d82 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xde>
 8005e1a:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8005e1e:	2310      	movs	r3, #16
 8005e20:	3501      	adds	r5, #1
 8005e22:	4659      	mov	r1, fp
 8005e24:	4640      	mov	r0, r8
 8005e26:	4622      	mov	r2, r4
 8005e28:	449b      	add	fp, r3
 8005e2a:	f8c8 500c 	str.w	r5, [r8, #12]
 8005e2e:	b985      	cbnz	r5, 8005e52 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8005e30:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8005e34:	3501      	adds	r5, #1
 8005e36:	f8c8 5008 	str.w	r5, [r8, #8]
 8005e3a:	b955      	cbnz	r5, 8005e52 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8005e3c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005e40:	3501      	adds	r5, #1
 8005e42:	f8c8 5004 	str.w	r5, [r8, #4]
 8005e46:	b925      	cbnz	r5, 8005e52 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 8005e48:	f8d8 5000 	ldr.w	r5, [r8]
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	f8c8 5000 	str.w	r5, [r8]
 8005e52:	f7ff fc5b 	bl	800570c <AES_general_SW_enc>
 8005e56:	45a3      	cmp	fp, r4
 8005e58:	d1df      	bne.n	8005e1a <crl_DRBG_AES128_Generate.part.25.constprop.36+0x176>
 8005e5a:	9906      	ldr	r1, [sp, #24]
 8005e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e5e:	9c05      	ldr	r4, [sp, #20]
 8005e60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e62:	9e04      	ldr	r6, [sp, #16]
 8005e64:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e68:	ea81 0c02 	eor.w	ip, r1, r2
 8005e6c:	9a07      	ldr	r2, [sp, #28]
 8005e6e:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8005e72:	f8c8 c018 	str.w	ip, [r8, #24]
 8005e76:	4060      	eors	r0, r4
 8005e78:	ea82 0307 	eor.w	r3, r2, r7
 8005e7c:	4075      	eors	r5, r6
 8005e7e:	9c08      	ldr	r4, [sp, #32]
 8005e80:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005e82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e84:	f8c8 0014 	str.w	r0, [r8, #20]
 8005e88:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e8c:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e90:	ea84 0506 	eor.w	r5, r4, r6
 8005e94:	ea87 0600 	eor.w	r6, r7, r0
 8005e98:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005e9a:	f8c8 301c 	str.w	r3, [r8, #28]
 8005e9e:	ea82 0407 	eor.w	r4, r2, r7
 8005ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ea4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005ea6:	f8c8 4008 	str.w	r4, [r8, #8]
 8005eaa:	ea82 0007 	eor.w	r0, r2, r7
 8005eae:	1c4b      	adds	r3, r1, #1
 8005eb0:	f8c8 000c 	str.w	r0, [r8, #12]
 8005eb4:	bf1a      	itte	ne
 8005eb6:	3101      	addne	r1, #1
 8005eb8:	2000      	movne	r0, #0
 8005eba:	f241 7073 	movweq	r0, #6003	; 0x1773
 8005ebe:	e888 0060 	stmia.w	r8, {r5, r6}
 8005ec2:	bf18      	it	ne
 8005ec4:	f8c8 1020 	strne.w	r1, [r8, #32]
 8005ec8:	b041      	add	sp, #260	; 0x104
 8005eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	9307      	str	r3, [sp, #28]
 8005ed8:	9308      	str	r3, [sp, #32]
 8005eda:	9309      	str	r3, [sp, #36]	; 0x24
 8005edc:	930a      	str	r3, [sp, #40]	; 0x28
 8005ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ee0:	f100 0a10 	add.w	sl, r0, #16
 8005ee4:	ac14      	add	r4, sp, #80	; 0x50
 8005ee6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005eea:	e743      	b.n	8005d74 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xd0>

08005eec <crl_DRBG_AES128_Generate.part.25>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	b0c3      	sub	sp, #268	; 0x10c
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	9100      	str	r1, [sp, #0]
 8005ef6:	1e19      	subs	r1, r3, #0
 8005ef8:	f8dd b130 	ldr.w	fp, [sp, #304]	; 0x130
 8005efc:	f340 80f4 	ble.w	80060e8 <crl_DRBG_AES128_Generate.part.25+0x1fc>
 8005f00:	4610      	mov	r0, r2
 8005f02:	aa06      	add	r2, sp, #24
 8005f04:	f7ff fd8a 	bl	8005a1c <DRBG_AES128_Block_cipher_df.constprop.37>
 8005f08:	b110      	cbz	r0, 8005f10 <crl_DRBG_AES128_Generate.part.25+0x24>
 8005f0a:	b043      	add	sp, #268	; 0x10c
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f10:	af16      	add	r7, sp, #88	; 0x58
 8005f12:	f105 0910 	add.w	r9, r5, #16
 8005f16:	ac0e      	add	r4, sp, #56	; 0x38
 8005f18:	4648      	mov	r0, r9
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	f7ff fb13 	bl	8005548 <AES_keyschedule_enc_LL>
 8005f22:	46ba      	mov	sl, r7
 8005f24:	9401      	str	r4, [sp, #4]
 8005f26:	4626      	mov	r6, r4
 8005f28:	68ec      	ldr	r4, [r5, #12]
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	3401      	adds	r4, #1
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	463a      	mov	r2, r7
 8005f34:	441e      	add	r6, r3
 8005f36:	60ec      	str	r4, [r5, #12]
 8005f38:	b954      	cbnz	r4, 8005f50 <crl_DRBG_AES128_Generate.part.25+0x64>
 8005f3a:	68ac      	ldr	r4, [r5, #8]
 8005f3c:	3401      	adds	r4, #1
 8005f3e:	60ac      	str	r4, [r5, #8]
 8005f40:	b934      	cbnz	r4, 8005f50 <crl_DRBG_AES128_Generate.part.25+0x64>
 8005f42:	686c      	ldr	r4, [r5, #4]
 8005f44:	3401      	adds	r4, #1
 8005f46:	606c      	str	r4, [r5, #4]
 8005f48:	b914      	cbnz	r4, 8005f50 <crl_DRBG_AES128_Generate.part.25+0x64>
 8005f4a:	682c      	ldr	r4, [r5, #0]
 8005f4c:	3401      	adds	r4, #1
 8005f4e:	602c      	str	r4, [r5, #0]
 8005f50:	f7ff fbdc 	bl	800570c <AES_general_SW_enc>
 8005f54:	42be      	cmp	r6, r7
 8005f56:	d1e7      	bne.n	8005f28 <crl_DRBG_AES128_Generate.part.25+0x3c>
 8005f58:	9807      	ldr	r0, [sp, #28]
 8005f5a:	9a08      	ldr	r2, [sp, #32]
 8005f5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f60:	9e06      	ldr	r6, [sp, #24]
 8005f62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005f64:	4041      	eors	r1, r0
 8005f66:	4053      	eors	r3, r2
 8005f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f6c:	61ab      	str	r3, [r5, #24]
 8005f6e:	4074      	eors	r4, r6
 8005f70:	ea80 0702 	eor.w	r7, r0, r2
 8005f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f7a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005f7c:	612c      	str	r4, [r5, #16]
 8005f7e:	6169      	str	r1, [r5, #20]
 8005f80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005f82:	61ef      	str	r7, [r5, #28]
 8005f84:	ea80 0102 	eor.w	r1, r0, r2
 8005f88:	ea83 0006 	eor.w	r0, r3, r6
 8005f8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f90:	6029      	str	r1, [r5, #0]
 8005f92:	405c      	eors	r4, r3
 8005f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f96:	6068      	str	r0, [r5, #4]
 8005f98:	405a      	eors	r2, r3
 8005f9a:	60ac      	str	r4, [r5, #8]
 8005f9c:	60ea      	str	r2, [r5, #12]
 8005f9e:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8006224 <crl_DRBG_AES128_Generate.part.25+0x338>
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	ea0b 0808 	and.w	r8, fp, r8
 8005fac:	f7ff facc 	bl	8005548 <AES_keyschedule_enc_LL>
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	f2c0 811e 	blt.w	80061f4 <crl_DRBG_AES128_Generate.part.25+0x308>
 8005fb8:	f1bb 0f0f 	cmp.w	fp, #15
 8005fbc:	f340 8121 	ble.w	8006202 <crl_DRBG_AES128_Generate.part.25+0x316>
 8005fc0:	9f00      	ldr	r7, [sp, #0]
 8005fc2:	f04f 0910 	mov.w	r9, #16
 8005fc6:	1cfc      	adds	r4, r7, #3
 8005fc8:	ae02      	add	r6, sp, #8
 8005fca:	68ef      	ldr	r7, [r5, #12]
 8005fcc:	2310      	movs	r3, #16
 8005fce:	3701      	adds	r7, #1
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4499      	add	r9, r3
 8005fd8:	60ef      	str	r7, [r5, #12]
 8005fda:	b957      	cbnz	r7, 8005ff2 <crl_DRBG_AES128_Generate.part.25+0x106>
 8005fdc:	68af      	ldr	r7, [r5, #8]
 8005fde:	3701      	adds	r7, #1
 8005fe0:	60af      	str	r7, [r5, #8]
 8005fe2:	b937      	cbnz	r7, 8005ff2 <crl_DRBG_AES128_Generate.part.25+0x106>
 8005fe4:	686f      	ldr	r7, [r5, #4]
 8005fe6:	3701      	adds	r7, #1
 8005fe8:	606f      	str	r7, [r5, #4]
 8005fea:	b917      	cbnz	r7, 8005ff2 <crl_DRBG_AES128_Generate.part.25+0x106>
 8005fec:	682f      	ldr	r7, [r5, #0]
 8005fee:	3701      	adds	r7, #1
 8005ff0:	602f      	str	r7, [r5, #0]
 8005ff2:	f7ff fb8b 	bl	800570c <AES_general_SW_enc>
 8005ff6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005ffa:	0a07      	lsrs	r7, r0, #8
 8005ffc:	7020      	strb	r0, [r4, #0]
 8005ffe:	f804 7c01 	strb.w	r7, [r4, #-1]
 8006002:	0c07      	lsrs	r7, r0, #16
 8006004:	0e00      	lsrs	r0, r0, #24
 8006006:	f804 7c02 	strb.w	r7, [r4, #-2]
 800600a:	f804 0c03 	strb.w	r0, [r4, #-3]
 800600e:	0a0f      	lsrs	r7, r1, #8
 8006010:	0c08      	lsrs	r0, r1, #16
 8006012:	7121      	strb	r1, [r4, #4]
 8006014:	0e09      	lsrs	r1, r1, #24
 8006016:	70e7      	strb	r7, [r4, #3]
 8006018:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 800601c:	70a0      	strb	r0, [r4, #2]
 800601e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006022:	7061      	strb	r1, [r4, #1]
 8006024:	0e17      	lsrs	r7, r2, #24
 8006026:	7222      	strb	r2, [r4, #8]
 8006028:	0a18      	lsrs	r0, r3, #8
 800602a:	0c19      	lsrs	r1, r3, #16
 800602c:	0e1a      	lsrs	r2, r3, #24
 800602e:	45cb      	cmp	fp, r9
 8006030:	f884 c007 	strb.w	ip, [r4, #7]
 8006034:	f884 e006 	strb.w	lr, [r4, #6]
 8006038:	7167      	strb	r7, [r4, #5]
 800603a:	7323      	strb	r3, [r4, #12]
 800603c:	72e0      	strb	r0, [r4, #11]
 800603e:	72a1      	strb	r1, [r4, #10]
 8006040:	7262      	strb	r2, [r4, #9]
 8006042:	f104 0410 	add.w	r4, r4, #16
 8006046:	dac0      	bge.n	8005fca <crl_DRBG_AES128_Generate.part.25+0xde>
 8006048:	f1b8 0f00 	cmp.w	r8, #0
 800604c:	d15c      	bne.n	8006108 <crl_DRBG_AES128_Generate.part.25+0x21c>
 800604e:	9c01      	ldr	r4, [sp, #4]
 8006050:	68ee      	ldr	r6, [r5, #12]
 8006052:	2310      	movs	r3, #16
 8006054:	3601      	adds	r6, #1
 8006056:	4621      	mov	r1, r4
 8006058:	4628      	mov	r0, r5
 800605a:	4652      	mov	r2, sl
 800605c:	441c      	add	r4, r3
 800605e:	60ee      	str	r6, [r5, #12]
 8006060:	b956      	cbnz	r6, 8006078 <crl_DRBG_AES128_Generate.part.25+0x18c>
 8006062:	68ae      	ldr	r6, [r5, #8]
 8006064:	3601      	adds	r6, #1
 8006066:	60ae      	str	r6, [r5, #8]
 8006068:	b936      	cbnz	r6, 8006078 <crl_DRBG_AES128_Generate.part.25+0x18c>
 800606a:	686e      	ldr	r6, [r5, #4]
 800606c:	3601      	adds	r6, #1
 800606e:	606e      	str	r6, [r5, #4]
 8006070:	b916      	cbnz	r6, 8006078 <crl_DRBG_AES128_Generate.part.25+0x18c>
 8006072:	682e      	ldr	r6, [r5, #0]
 8006074:	3601      	adds	r6, #1
 8006076:	602e      	str	r6, [r5, #0]
 8006078:	f7ff fb48 	bl	800570c <AES_general_SW_enc>
 800607c:	4554      	cmp	r4, sl
 800607e:	d1e7      	bne.n	8006050 <crl_DRBG_AES128_Generate.part.25+0x164>
 8006080:	9c07      	ldr	r4, [sp, #28]
 8006082:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006084:	9f06      	ldr	r7, [sp, #24]
 8006086:	9908      	ldr	r1, [sp, #32]
 8006088:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800608a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800608c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800608e:	4060      	eors	r0, r4
 8006090:	ea81 0c02 	eor.w	ip, r1, r2
 8006094:	407e      	eors	r6, r7
 8006096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006098:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800609a:	6168      	str	r0, [r5, #20]
 800609c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800609e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80060a0:	612e      	str	r6, [r5, #16]
 80060a2:	ea87 0800 	eor.w	r8, r7, r0
 80060a6:	ea82 0603 	eor.w	r6, r2, r3
 80060aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80060ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060b0:	6a29      	ldr	r1, [r5, #32]
 80060b2:	f8c5 c018 	str.w	ip, [r5, #24]
 80060b6:	ea84 0700 	eor.w	r7, r4, r0
 80060ba:	ea82 0403 	eor.w	r4, r2, r3
 80060be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060c2:	f8c5 801c 	str.w	r8, [r5, #28]
 80060c6:	ea82 0003 	eor.w	r0, r2, r3
 80060ca:	1c4b      	adds	r3, r1, #1
 80060cc:	60e8      	str	r0, [r5, #12]
 80060ce:	bf1a      	itte	ne
 80060d0:	3101      	addne	r1, #1
 80060d2:	2000      	movne	r0, #0
 80060d4:	f241 7073 	movweq	r0, #6003	; 0x1773
 80060d8:	e885 00c0 	stmia.w	r5, {r6, r7}
 80060dc:	60ac      	str	r4, [r5, #8]
 80060de:	bf18      	it	ne
 80060e0:	6229      	strne	r1, [r5, #32]
 80060e2:	b043      	add	sp, #268	; 0x10c
 80060e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e8:	2300      	movs	r3, #0
 80060ea:	ac0e      	add	r4, sp, #56	; 0x38
 80060ec:	9306      	str	r3, [sp, #24]
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	9308      	str	r3, [sp, #32]
 80060f2:	9309      	str	r3, [sp, #36]	; 0x24
 80060f4:	930a      	str	r3, [sp, #40]	; 0x28
 80060f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060f8:	930c      	str	r3, [sp, #48]	; 0x30
 80060fa:	930d      	str	r3, [sp, #52]	; 0x34
 80060fc:	f100 0910 	add.w	r9, r0, #16
 8006100:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8006104:	9401      	str	r4, [sp, #4]
 8006106:	e74a      	b.n	8005f9e <crl_DRBG_AES128_Generate.part.25+0xb2>
 8006108:	68eb      	ldr	r3, [r5, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60eb      	str	r3, [r5, #12]
 800610e:	b953      	cbnz	r3, 8006126 <crl_DRBG_AES128_Generate.part.25+0x23a>
 8006110:	68ab      	ldr	r3, [r5, #8]
 8006112:	3301      	adds	r3, #1
 8006114:	60ab      	str	r3, [r5, #8]
 8006116:	b933      	cbnz	r3, 8006126 <crl_DRBG_AES128_Generate.part.25+0x23a>
 8006118:	686b      	ldr	r3, [r5, #4]
 800611a:	3301      	adds	r3, #1
 800611c:	606b      	str	r3, [r5, #4]
 800611e:	b913      	cbnz	r3, 8006126 <crl_DRBG_AES128_Generate.part.25+0x23a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	ae02      	add	r6, sp, #8
 8006128:	4652      	mov	r2, sl
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	2310      	movs	r3, #16
 8006130:	f7ff faec 	bl	800570c <AES_general_SW_enc>
 8006134:	f1b8 0f00 	cmp.w	r8, #0
 8006138:	4642      	mov	r2, r8
 800613a:	bfb8      	it	lt
 800613c:	f108 0203 	addlt.w	r2, r8, #3
 8006140:	1092      	asrs	r2, r2, #2
 8006142:	2a00      	cmp	r2, #0
 8006144:	dd60      	ble.n	8006208 <crl_DRBG_AES128_Generate.part.25+0x31c>
 8006146:	9900      	ldr	r1, [sp, #0]
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	f1a9 0010 	sub.w	r0, r9, #16
 800614e:	4401      	add	r1, r0
 8006150:	0c1f      	lsrs	r7, r3, #16
 8006152:	704f      	strb	r7, [r1, #1]
 8006154:	9f00      	ldr	r7, [sp, #0]
 8006156:	70cb      	strb	r3, [r1, #3]
 8006158:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 800615c:	0e1c      	lsrs	r4, r3, #24
 800615e:	2a01      	cmp	r2, #1
 8006160:	f881 e002 	strb.w	lr, [r1, #2]
 8006164:	543c      	strb	r4, [r7, r0]
 8006166:	dd51      	ble.n	800620c <crl_DRBG_AES128_Generate.part.25+0x320>
 8006168:	6873      	ldr	r3, [r6, #4]
 800616a:	f1a9 000c 	sub.w	r0, r9, #12
 800616e:	4639      	mov	r1, r7
 8006170:	4401      	add	r1, r0
 8006172:	0c1f      	lsrs	r7, r3, #16
 8006174:	704f      	strb	r7, [r1, #1]
 8006176:	9f00      	ldr	r7, [sp, #0]
 8006178:	70cb      	strb	r3, [r1, #3]
 800617a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 800617e:	0e1c      	lsrs	r4, r3, #24
 8006180:	2a02      	cmp	r2, #2
 8006182:	f881 e002 	strb.w	lr, [r1, #2]
 8006186:	543c      	strb	r4, [r7, r0]
 8006188:	dd42      	ble.n	8006210 <crl_DRBG_AES128_Generate.part.25+0x324>
 800618a:	68b3      	ldr	r3, [r6, #8]
 800618c:	f1a9 0108 	sub.w	r1, r9, #8
 8006190:	463a      	mov	r2, r7
 8006192:	440a      	add	r2, r1
 8006194:	0a1f      	lsrs	r7, r3, #8
 8006196:	7097      	strb	r7, [r2, #2]
 8006198:	9f00      	ldr	r7, [sp, #0]
 800619a:	70d3      	strb	r3, [r2, #3]
 800619c:	0c18      	lsrs	r0, r3, #16
 800619e:	0e1c      	lsrs	r4, r3, #24
 80061a0:	7050      	strb	r0, [r2, #1]
 80061a2:	547c      	strb	r4, [r7, r1]
 80061a4:	2003      	movs	r0, #3
 80061a6:	f018 0f03 	tst.w	r8, #3
 80061aa:	f43f af50 	beq.w	800604e <crl_DRBG_AES128_Generate.part.25+0x162>
 80061ae:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <crl_DRBG_AES128_Generate.part.25+0x334>)
 80061b0:	ea08 0303 	and.w	r3, r8, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	db2d      	blt.n	8006214 <crl_DRBG_AES128_Generate.part.25+0x328>
 80061b8:	9c00      	ldr	r4, [sp, #0]
 80061ba:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 80061be:	f1a9 0110 	sub.w	r1, r9, #16
 80061c2:	441c      	add	r4, r3
 80061c4:	f1c3 0704 	rsb	r7, r3, #4
 80061c8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80061cc:	440c      	add	r4, r1
 80061ce:	00ff      	lsls	r7, r7, #3
 80061d0:	40fa      	lsrs	r2, r7
 80061d2:	3b02      	subs	r3, #2
 80061d4:	f804 2c01 	strb.w	r2, [r4, #-1]
 80061d8:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 80061dc:	f53f af37 	bmi.w	800604e <crl_DRBG_AES128_Generate.part.25+0x162>
 80061e0:	9c00      	ldr	r4, [sp, #0]
 80061e2:	4421      	add	r1, r4
 80061e4:	0a12      	lsrs	r2, r2, #8
 80061e6:	54ca      	strb	r2, [r1, r3]
 80061e8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80061ec:	d2fa      	bcs.n	80061e4 <crl_DRBG_AES128_Generate.part.25+0x2f8>
 80061ee:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 80061f2:	e72c      	b.n	800604e <crl_DRBG_AES128_Generate.part.25+0x162>
 80061f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80061f8:	f068 080f 	orn	r8, r8, #15
 80061fc:	f108 0801 	add.w	r8, r8, #1
 8006200:	e6da      	b.n	8005fb8 <crl_DRBG_AES128_Generate.part.25+0xcc>
 8006202:	f04f 0910 	mov.w	r9, #16
 8006206:	e71f      	b.n	8006048 <crl_DRBG_AES128_Generate.part.25+0x15c>
 8006208:	2000      	movs	r0, #0
 800620a:	e7cc      	b.n	80061a6 <crl_DRBG_AES128_Generate.part.25+0x2ba>
 800620c:	2001      	movs	r0, #1
 800620e:	e7ca      	b.n	80061a6 <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006210:	2002      	movs	r0, #2
 8006212:	e7c8      	b.n	80061a6 <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006214:	3b01      	subs	r3, #1
 8006216:	f063 0303 	orn	r3, r3, #3
 800621a:	3301      	adds	r3, #1
 800621c:	e7cc      	b.n	80061b8 <crl_DRBG_AES128_Generate.part.25+0x2cc>
 800621e:	bf00      	nop
 8006220:	80000003 	.word	0x80000003
 8006224:	8000000f 	.word	0x8000000f

08006228 <StAllocBig>:
 8006228:	88d3      	ldrh	r3, [r2, #6]
 800622a:	b4f0      	push	{r4, r5, r6, r7}
 800622c:	1c4c      	adds	r4, r1, #1
 800622e:	8896      	ldrh	r6, [r2, #4]
 8006230:	f103 0508 	add.w	r5, r3, #8
 8006234:	00a4      	lsls	r4, r4, #2
 8006236:	1967      	adds	r7, r4, r5
 8006238:	42b7      	cmp	r7, r6
 800623a:	d903      	bls.n	8006244 <StAllocBig+0x1c>
 800623c:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006240:	bcf0      	pop	{r4, r5, r6, r7}
 8006242:	4770      	bx	lr
 8006244:	6816      	ldr	r6, [r2, #0]
 8006246:	18f7      	adds	r7, r6, r3
 8006248:	6007      	str	r7, [r0, #0]
 800624a:	6817      	ldr	r7, [r2, #0]
 800624c:	443d      	add	r5, r7
 800624e:	50f5      	str	r5, [r6, r3]
 8006250:	6803      	ldr	r3, [r0, #0]
 8006252:	7199      	strb	r1, [r3, #6]
 8006254:	88d3      	ldrh	r3, [r2, #6]
 8006256:	3308      	adds	r3, #8
 8006258:	441c      	add	r4, r3
 800625a:	80d4      	strh	r4, [r2, #6]
 800625c:	2000      	movs	r0, #0
 800625e:	bcf0      	pop	{r4, r5, r6, r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop

08006264 <StFreeBig>:
 8006264:	6803      	ldr	r3, [r0, #0]
 8006266:	b14b      	cbz	r3, 800627c <StFreeBig+0x18>
 8006268:	b141      	cbz	r1, 800627c <StFreeBig+0x18>
 800626a:	799a      	ldrb	r2, [r3, #6]
 800626c:	88cb      	ldrh	r3, [r1, #6]
 800626e:	43d2      	mvns	r2, r2
 8006270:	3b08      	subs	r3, #8
 8006272:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006276:	2300      	movs	r3, #0
 8006278:	80ca      	strh	r2, [r1, #6]
 800627a:	6003      	str	r3, [r0, #0]
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop

08006280 <InitBig>:
 8006280:	7983      	ldrb	r3, [r0, #6]
 8006282:	b470      	push	{r4, r5, r6}
 8006284:	b1b3      	cbz	r3, 80062b4 <InitBig+0x34>
 8006286:	2201      	movs	r2, #1
 8006288:	6805      	ldr	r5, [r0, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	2600      	movs	r6, #0
 800628e:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 8006292:	7984      	ldrb	r4, [r0, #6]
 8006294:	3301      	adds	r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	3401      	adds	r4, #1
 800629a:	42a3      	cmp	r3, r4
 800629c:	461a      	mov	r2, r3
 800629e:	d3f6      	bcc.n	800628e <InitBig+0xe>
 80062a0:	2301      	movs	r3, #1
 80062a2:	2900      	cmp	r1, #0
 80062a4:	8083      	strh	r3, [r0, #4]
 80062a6:	bfb4      	ite	lt
 80062a8:	4249      	neglt	r1, r1
 80062aa:	2300      	movge	r3, #0
 80062ac:	71c3      	strb	r3, [r0, #7]
 80062ae:	6029      	str	r1, [r5, #0]
 80062b0:	bc70      	pop	{r4, r5, r6}
 80062b2:	4770      	bx	lr
 80062b4:	6805      	ldr	r5, [r0, #0]
 80062b6:	e7f3      	b.n	80062a0 <InitBig+0x20>

080062b8 <CopyBig>:
 80062b8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80062bc:	798b      	ldrb	r3, [r1, #6]
 80062be:	8884      	ldrh	r4, [r0, #4]
 80062c0:	429c      	cmp	r4, r3
 80062c2:	d907      	bls.n	80062d4 <CopyBig+0x1c>
 80062c4:	3301      	adds	r3, #1
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	d227      	bcs.n	800631a <CopyBig+0x62>
 80062ca:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80062ce:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80062d2:	4770      	bx	lr
 80062d4:	f04f 0800 	mov.w	r8, #0
 80062d8:	79c3      	ldrb	r3, [r0, #7]
 80062da:	71cb      	strb	r3, [r1, #7]
 80062dc:	808c      	strh	r4, [r1, #4]
 80062de:	4622      	mov	r2, r4
 80062e0:	b1f4      	cbz	r4, 8006320 <CopyBig+0x68>
 80062e2:	6807      	ldr	r7, [r0, #0]
 80062e4:	680d      	ldr	r5, [r1, #0]
 80062e6:	00a6      	lsls	r6, r4, #2
 80062e8:	2300      	movs	r3, #0
 80062ea:	58f8      	ldr	r0, [r7, r3]
 80062ec:	50e8      	str	r0, [r5, r3]
 80062ee:	3304      	adds	r3, #4
 80062f0:	42b3      	cmp	r3, r6
 80062f2:	d1fa      	bne.n	80062ea <CopyBig+0x32>
 80062f4:	798b      	ldrb	r3, [r1, #6]
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	db0b      	blt.n	8006312 <CopyBig+0x5a>
 80062fa:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80062fe:	3b01      	subs	r3, #1
 8006300:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006304:	2500      	movs	r5, #0
 8006306:	f843 5f04 	str.w	r5, [r3, #4]!
 800630a:	798c      	ldrb	r4, [r1, #6]
 800630c:	3201      	adds	r2, #1
 800630e:	4294      	cmp	r4, r2
 8006310:	daf9      	bge.n	8006306 <CopyBig+0x4e>
 8006312:	4640      	mov	r0, r8
 8006314:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006318:	4770      	bx	lr
 800631a:	f241 48b5 	movw	r8, #5301	; 0x14b5
 800631e:	e7db      	b.n	80062d8 <CopyBig+0x20>
 8006320:	680d      	ldr	r5, [r1, #0]
 8006322:	e7ea      	b.n	80062fa <CopyBig+0x42>

08006324 <Add_Moduli_Big>:
 8006324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	7983      	ldrb	r3, [r0, #6]
 800632a:	8884      	ldrh	r4, [r0, #4]
 800632c:	888f      	ldrh	r7, [r1, #4]
 800632e:	6805      	ldr	r5, [r0, #0]
 8006330:	680e      	ldr	r6, [r1, #0]
 8006332:	4692      	mov	sl, r2
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	42a7      	cmp	r7, r4
 8006338:	bf34      	ite	cc
 800633a:	46bb      	movcc	fp, r7
 800633c:	46a3      	movcs	fp, r4
 800633e:	4294      	cmp	r4, r2
 8006340:	4623      	mov	r3, r4
 8006342:	f8da 8000 	ldr.w	r8, [sl]
 8006346:	d20f      	bcs.n	8006368 <Add_Moduli_Big+0x44>
 8006348:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 800634c:	3a01      	subs	r2, #1
 800634e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006352:	f04f 0c00 	mov.w	ip, #0
 8006356:	f842 cf04 	str.w	ip, [r2, #4]!
 800635a:	f890 e006 	ldrb.w	lr, [r0, #6]
 800635e:	3301      	adds	r3, #1
 8006360:	f10e 0e01 	add.w	lr, lr, #1
 8006364:	459e      	cmp	lr, r3
 8006366:	d8f6      	bhi.n	8006356 <Add_Moduli_Big+0x32>
 8006368:	798a      	ldrb	r2, [r1, #6]
 800636a:	3201      	adds	r2, #1
 800636c:	4297      	cmp	r7, r2
 800636e:	463b      	mov	r3, r7
 8006370:	d20f      	bcs.n	8006392 <Add_Moduli_Big+0x6e>
 8006372:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006376:	3a01      	subs	r2, #1
 8006378:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800637c:	f04f 0c00 	mov.w	ip, #0
 8006380:	f842 cf04 	str.w	ip, [r2, #4]!
 8006384:	f891 e006 	ldrb.w	lr, [r1, #6]
 8006388:	3301      	adds	r3, #1
 800638a:	f10e 0e01 	add.w	lr, lr, #1
 800638e:	459e      	cmp	lr, r3
 8006390:	d8f6      	bhi.n	8006380 <Add_Moduli_Big+0x5c>
 8006392:	42bc      	cmp	r4, r7
 8006394:	d200      	bcs.n	8006398 <Add_Moduli_Big+0x74>
 8006396:	4608      	mov	r0, r1
 8006398:	4651      	mov	r1, sl
 800639a:	f7ff ff8d 	bl	80062b8 <CopyBig>
 800639e:	46dc      	mov	ip, fp
 80063a0:	f1bb 0f00 	cmp.w	fp, #0
 80063a4:	d030      	beq.n	8006408 <Add_Moduli_Big+0xe4>
 80063a6:	ea4f 098b 	mov.w	r9, fp, lsl #2
 80063aa:	2700      	movs	r7, #0
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	59e8      	ldr	r0, [r5, r7]
 80063b2:	59f4      	ldr	r4, [r6, r7]
 80063b4:	2100      	movs	r1, #0
 80063b6:	1900      	adds	r0, r0, r4
 80063b8:	f141 0100 	adc.w	r1, r1, #0
 80063bc:	1880      	adds	r0, r0, r2
 80063be:	f848 0007 	str.w	r0, [r8, r7]
 80063c2:	f107 0704 	add.w	r7, r7, #4
 80063c6:	eb41 0103 	adc.w	r1, r1, r3
 80063ca:	454f      	cmp	r7, r9
 80063cc:	460a      	mov	r2, r1
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	d1ed      	bne.n	80063b0 <Add_Moduli_Big+0x8c>
 80063d4:	ea52 0103 	orrs.w	r1, r2, r3
 80063d8:	d016      	beq.n	8006408 <Add_Moduli_Big+0xe4>
 80063da:	f858 3007 	ldr.w	r3, [r8, r7]
 80063de:	3301      	adds	r3, #1
 80063e0:	f848 3007 	str.w	r3, [r8, r7]
 80063e4:	4447      	add	r7, r8
 80063e6:	b97b      	cbnz	r3, 8006408 <Add_Moduli_Big+0xe4>
 80063e8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80063ec:	455a      	cmp	r2, fp
 80063ee:	d202      	bcs.n	80063f6 <Add_Moduli_Big+0xd2>
 80063f0:	e00c      	b.n	800640c <Add_Moduli_Big+0xe8>
 80063f2:	4594      	cmp	ip, r2
 80063f4:	d80a      	bhi.n	800640c <Add_Moduli_Big+0xe8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3301      	adds	r3, #1
 80063fa:	f10c 0c01 	add.w	ip, ip, #1
 80063fe:	f847 3f04 	str.w	r3, [r7, #4]!
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f5      	beq.n	80063f2 <Add_Moduli_Big+0xce>
 8006406:	e001      	b.n	800640c <Add_Moduli_Big+0xe8>
 8006408:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800640c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8006410:	b113      	cbz	r3, 8006418 <Add_Moduli_Big+0xf4>
 8006412:	3201      	adds	r2, #1
 8006414:	f8aa 2004 	strh.w	r2, [sl, #4]
 8006418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800641c <IsZeroBig>:
 800641c:	8883      	ldrh	r3, [r0, #4]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d001      	beq.n	8006426 <IsZeroBig+0xa>
 8006422:	2000      	movs	r0, #0
 8006424:	4770      	bx	lr
 8006426:	6803      	ldr	r3, [r0, #0]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f1d0 0001 	rsbs	r0, r0, #1
 800642e:	bf38      	it	cc
 8006430:	2000      	movcc	r0, #0
 8006432:	4770      	bx	lr

08006434 <SetZeroBig>:
 8006434:	2300      	movs	r3, #0
 8006436:	b430      	push	{r4, r5}
 8006438:	6804      	ldr	r4, [r0, #0]
 800643a:	71c3      	strb	r3, [r0, #7]
 800643c:	461a      	mov	r2, r3
 800643e:	461d      	mov	r5, r3
 8006440:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 8006444:	7981      	ldrb	r1, [r0, #6]
 8006446:	3301      	adds	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	3101      	adds	r1, #1
 800644c:	428b      	cmp	r3, r1
 800644e:	461a      	mov	r2, r3
 8006450:	d3f6      	bcc.n	8006440 <SetZeroBig+0xc>
 8006452:	2301      	movs	r3, #1
 8006454:	8083      	strh	r3, [r0, #4]
 8006456:	bc30      	pop	{r4, r5}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <CompareBig>:
 800645c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8006460:	79c2      	ldrb	r2, [r0, #7]
 8006462:	79cb      	ldrb	r3, [r1, #7]
 8006464:	4293      	cmp	r3, r2
 8006466:	b254      	sxtb	r4, r2
 8006468:	d005      	beq.n	8006476 <CompareBig+0x1a>
 800646a:	2c01      	cmp	r4, #1
 800646c:	d036      	beq.n	80064dc <CompareBig+0x80>
 800646e:	2003      	movs	r0, #3
 8006470:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006474:	4770      	bx	lr
 8006476:	8884      	ldrh	r4, [r0, #4]
 8006478:	888f      	ldrh	r7, [r1, #4]
 800647a:	42bc      	cmp	r4, r7
 800647c:	d820      	bhi.n	80064c0 <CompareBig+0x64>
 800647e:	d327      	bcc.n	80064d0 <CompareBig+0x74>
 8006480:	f8d0 8000 	ldr.w	r8, [r0]
 8006484:	f8d1 c000 	ldr.w	ip, [r1]
 8006488:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 800648c:	eb0c 0187 	add.w	r1, ip, r7, lsl #2
 8006490:	2301      	movs	r3, #1
 8006492:	e004      	b.n	800649e <CompareBig+0x42>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d808      	bhi.n	80064aa <CompareBig+0x4e>
 8006498:	3301      	adds	r3, #1
 800649a:	42a3      	cmp	r3, r4
 800649c:	d805      	bhi.n	80064aa <CompareBig+0x4e>
 800649e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80064a2:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 80064a6:	42ae      	cmp	r6, r5
 80064a8:	d0f4      	beq.n	8006494 <CompareBig+0x38>
 80064aa:	1e59      	subs	r1, r3, #1
 80064ac:	42a1      	cmp	r1, r4
 80064ae:	d01d      	beq.n	80064ec <CompareBig+0x90>
 80064b0:	1ae4      	subs	r4, r4, r3
 80064b2:	1afb      	subs	r3, r7, r3
 80064b4:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 80064b8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80064bc:	4299      	cmp	r1, r3
 80064be:	d907      	bls.n	80064d0 <CompareBig+0x74>
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	bf0c      	ite	eq
 80064c4:	2002      	moveq	r0, #2
 80064c6:	f06f 0001 	mvnne.w	r0, #1
 80064ca:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80064ce:	4770      	bx	lr
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	bf0c      	ite	eq
 80064d4:	f04f 30ff 	moveq.w	r0, #4294967295
 80064d8:	2001      	movne	r0, #1
 80064da:	e7c9      	b.n	8006470 <CompareBig+0x14>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf0c      	ite	eq
 80064e0:	f06f 0002 	mvneq.w	r0, #2
 80064e4:	2003      	movne	r0, #3
 80064e6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80064ea:	4770      	bx	lr
 80064ec:	2000      	movs	r0, #0
 80064ee:	e7bf      	b.n	8006470 <CompareBig+0x14>

080064f0 <CountBits>:
 80064f0:	b510      	push	{r4, lr}
 80064f2:	4604      	mov	r4, r0
 80064f4:	f7ff ff92 	bl	800641c <IsZeroBig>
 80064f8:	b9d8      	cbnz	r0, 8006532 <CountBits+0x42>
 80064fa:	88a0      	ldrh	r0, [r4, #4]
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8006502:	3b01      	subs	r3, #1
 8006504:	0140      	lsls	r0, r0, #5
 8006506:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800650a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	d00d      	beq.n	8006530 <CountBits+0x40>
 8006514:	f1a0 0420 	sub.w	r4, r0, #32
 8006518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800651c:	e001      	b.n	8006522 <CountBits+0x32>
 800651e:	42a0      	cmp	r0, r4
 8006520:	d009      	beq.n	8006536 <CountBits+0x46>
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	ea01 0203 	and.w	r2, r1, r3
 8006528:	4293      	cmp	r3, r2
 800652a:	f100 30ff 	add.w	r0, r0, #4294967295
 800652e:	d1f6      	bne.n	800651e <CountBits+0x2e>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	2001      	movs	r0, #1
 8006534:	bd10      	pop	{r4, pc}
 8006536:	bd10      	pop	{r4, pc}

08006538 <CountBytes>:
 8006538:	b510      	push	{r4, lr}
 800653a:	4604      	mov	r4, r0
 800653c:	f7ff ff6e 	bl	800641c <IsZeroBig>
 8006540:	2801      	cmp	r0, #1
 8006542:	d01a      	beq.n	800657a <CountBytes+0x42>
 8006544:	88a0      	ldrh	r0, [r4, #4]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	0080      	lsls	r0, r0, #2
 800654a:	4403      	add	r3, r0
 800654c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8006550:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006554:	d111      	bne.n	800657a <CountBytes+0x42>
 8006556:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800655a:	f100 32ff 	add.w	r2, r0, #4294967295
 800655e:	d10b      	bne.n	8006578 <CountBytes+0x40>
 8006560:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8006564:	f1a0 0202 	sub.w	r2, r0, #2
 8006568:	d106      	bne.n	8006578 <CountBytes+0x40>
 800656a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800656e:	f1a0 0203 	sub.w	r2, r0, #3
 8006572:	d101      	bne.n	8006578 <CountBytes+0x40>
 8006574:	3804      	subs	r0, #4
 8006576:	bd10      	pop	{r4, pc}
 8006578:	4610      	mov	r0, r2
 800657a:	bd10      	pop	{r4, pc}

0800657c <W8_to_Big>:
 800657c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	2a00      	cmp	r2, #0
 8006582:	d072      	beq.n	800666a <W8_to_Big+0xee>
 8006584:	2800      	cmp	r0, #0
 8006586:	d06f      	beq.n	8006668 <W8_to_Big+0xec>
 8006588:	1ccc      	adds	r4, r1, #3
 800658a:	7993      	ldrb	r3, [r2, #6]
 800658c:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8006590:	4563      	cmp	r3, ip
 8006592:	d203      	bcs.n	800659c <W8_to_Big+0x20>
 8006594:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8006598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659c:	2900      	cmp	r1, #0
 800659e:	d068      	beq.n	8006672 <W8_to_Big+0xf6>
 80065a0:	4688      	mov	r8, r1
 80065a2:	bfb8      	it	lt
 80065a4:	46a0      	movlt	r8, r4
 80065a6:	ea4f 08a8 	mov.w	r8, r8, asr #2
 80065aa:	f1b8 0f00 	cmp.w	r8, #0
 80065ae:	6817      	ldr	r7, [r2, #0]
 80065b0:	bfd8      	it	le
 80065b2:	2400      	movle	r4, #0
 80065b4:	dd1a      	ble.n	80065ec <W8_to_Big+0x70>
 80065b6:	1843      	adds	r3, r0, r1
 80065b8:	463c      	mov	r4, r7
 80065ba:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
 80065be:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 80065c2:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 80065c6:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 80065ca:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 80065ce:	042d      	lsls	r5, r5, #16
 80065d0:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80065d4:	ea45 0509 	orr.w	r5, r5, r9
 80065d8:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80065dc:	f844 5b04 	str.w	r5, [r4], #4
 80065e0:	4554      	cmp	r4, sl
 80065e2:	f1a3 0304 	sub.w	r3, r3, #4
 80065e6:	d1ea      	bne.n	80065be <W8_to_Big+0x42>
 80065e8:	7993      	ldrb	r3, [r2, #6]
 80065ea:	4644      	mov	r4, r8
 80065ec:	429c      	cmp	r4, r3
 80065ee:	da0b      	bge.n	8006608 <W8_to_Big+0x8c>
 80065f0:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 80065f4:	3d01      	subs	r5, #1
 80065f6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80065fa:	2300      	movs	r3, #0
 80065fc:	f845 3f04 	str.w	r3, [r5, #4]!
 8006600:	7996      	ldrb	r6, [r2, #6]
 8006602:	3401      	adds	r4, #1
 8006604:	42b4      	cmp	r4, r6
 8006606:	dbf9      	blt.n	80065fc <W8_to_Big+0x80>
 8006608:	f011 0103 	ands.w	r1, r1, #3
 800660c:	d010      	beq.n	8006630 <W8_to_Big+0xb4>
 800660e:	7803      	ldrb	r3, [r0, #0]
 8006610:	f847 3028 	str.w	r3, [r7, r8, lsl #2]
 8006614:	2901      	cmp	r1, #1
 8006616:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 800661a:	dd09      	ble.n	8006630 <W8_to_Big+0xb4>
 800661c:	1e44      	subs	r4, r0, #1
 800661e:	4421      	add	r1, r4
 8006620:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006624:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8006628:	4288      	cmp	r0, r1
 800662a:	f8c8 3000 	str.w	r3, [r8]
 800662e:	d1f7      	bne.n	8006620 <W8_to_Big+0xa4>
 8006630:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 8006634:	3901      	subs	r1, #1
 8006636:	fa1f f38c 	uxth.w	r3, ip
 800663a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800663e:	8093      	strh	r3, [r2, #4]
 8006640:	b971      	cbnz	r1, 8006660 <W8_to_Big+0xe4>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d102      	bne.n	800664c <W8_to_Big+0xd0>
 8006646:	e00b      	b.n	8006660 <W8_to_Big+0xe4>
 8006648:	2b01      	cmp	r3, #1
 800664a:	d008      	beq.n	800665e <W8_to_Big+0xe2>
 800664c:	3b01      	subs	r3, #1
 800664e:	b29b      	uxth	r3, r3
 8006650:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8006654:	3901      	subs	r1, #1
 8006656:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800665a:	2900      	cmp	r1, #0
 800665c:	d0f4      	beq.n	8006648 <W8_to_Big+0xcc>
 800665e:	8093      	strh	r3, [r2, #4]
 8006660:	2000      	movs	r0, #0
 8006662:	71d0      	strb	r0, [r2, #7]
 8006664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	b119      	cbz	r1, 8006672 <W8_to_Big+0xf6>
 800666a:	f241 40b8 	movw	r0, #5304	; 0x14b8
 800666e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006672:	4610      	mov	r0, r2
 8006674:	f7ff fede 	bl	8006434 <SetZeroBig>
 8006678:	2000      	movs	r0, #0
 800667a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667e:	bf00      	nop

08006680 <Big_to_W8>:
 8006680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006684:	4691      	mov	r9, r2
 8006686:	4688      	mov	r8, r1
 8006688:	4605      	mov	r5, r0
 800668a:	f7ff ff55 	bl	8006538 <CountBytes>
 800668e:	2800      	cmp	r0, #0
 8006690:	4602      	mov	r2, r0
 8006692:	bfb8      	it	lt
 8006694:	1cc2      	addlt	r2, r0, #3
 8006696:	1092      	asrs	r2, r2, #2
 8006698:	2a00      	cmp	r2, #0
 800669a:	dd2f      	ble.n	80066fc <Big_to_W8+0x7c>
 800669c:	eb08 0400 	add.w	r4, r8, r0
 80066a0:	0097      	lsls	r7, r2, #2
 80066a2:	2300      	movs	r3, #0
 80066a4:	682e      	ldr	r6, [r5, #0]
 80066a6:	58f1      	ldr	r1, [r6, r3]
 80066a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066ac:	682e      	ldr	r6, [r5, #0]
 80066ae:	58f1      	ldr	r1, [r6, r3]
 80066b0:	0a09      	lsrs	r1, r1, #8
 80066b2:	f804 1c02 	strb.w	r1, [r4, #-2]
 80066b6:	682e      	ldr	r6, [r5, #0]
 80066b8:	58f1      	ldr	r1, [r6, r3]
 80066ba:	0c09      	lsrs	r1, r1, #16
 80066bc:	f804 1c03 	strb.w	r1, [r4, #-3]
 80066c0:	682e      	ldr	r6, [r5, #0]
 80066c2:	58f6      	ldr	r6, [r6, r3]
 80066c4:	3304      	adds	r3, #4
 80066c6:	0e36      	lsrs	r6, r6, #24
 80066c8:	42bb      	cmp	r3, r7
 80066ca:	f804 6d04 	strb.w	r6, [r4, #-4]!
 80066ce:	d1e9      	bne.n	80066a4 <Big_to_W8+0x24>
 80066d0:	f010 0303 	ands.w	r3, r0, #3
 80066d4:	d009      	beq.n	80066ea <Big_to_W8+0x6a>
 80066d6:	6829      	ldr	r1, [r5, #0]
 80066d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80066dc:	4498      	add	r8, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80066e4:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80066e8:	d1f9      	bne.n	80066de <Big_to_W8+0x5e>
 80066ea:	f1b9 0f00 	cmp.w	r9, #0
 80066ee:	d003      	beq.n	80066f8 <Big_to_W8+0x78>
 80066f0:	f8c9 0000 	str.w	r0, [r9]
 80066f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fc:	2200      	movs	r2, #0
 80066fe:	e7e7      	b.n	80066d0 <Big_to_W8+0x50>

08006700 <FastMulInnerBase>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	8882      	ldrh	r2, [r0, #4]
 8006706:	7983      	ldrb	r3, [r0, #6]
 8006708:	440a      	add	r2, r1
 800670a:	429a      	cmp	r2, r3
 800670c:	4604      	mov	r4, r0
 800670e:	460d      	mov	r5, r1
 8006710:	dd04      	ble.n	800671c <FastMulInnerBase+0x1c>
 8006712:	f241 46b5 	movw	r6, #5301	; 0x14b5
 8006716:	4630      	mov	r0, r6
 8006718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800671c:	f7ff fe7e 	bl	800641c <IsZeroBig>
 8006720:	4606      	mov	r6, r0
 8006722:	b9e8      	cbnz	r0, 8006760 <FastMulInnerBase+0x60>
 8006724:	2d00      	cmp	r5, #0
 8006726:	d0f6      	beq.n	8006716 <FastMulInnerBase+0x16>
 8006728:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	f1b8 0f01 	cmp.w	r8, #1
 8006732:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8006736:	d007      	beq.n	8006748 <FastMulInnerBase+0x48>
 8006738:	eb00 0388 	add.w	r3, r0, r8, lsl #2
 800673c:	1d07      	adds	r7, r0, #4
 800673e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006742:	5099      	str	r1, [r3, r2]
 8006744:	42bb      	cmp	r3, r7
 8006746:	d1fa      	bne.n	800673e <FastMulInnerBase+0x3e>
 8006748:	2d00      	cmp	r5, #0
 800674a:	6803      	ldr	r3, [r0, #0]
 800674c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 8006750:	bf08      	it	eq
 8006752:	2204      	moveq	r2, #4
 8006754:	2100      	movs	r1, #0
 8006756:	4445      	add	r5, r8
 8006758:	f001 fa08 	bl	8007b6c <memset>
 800675c:	80a5      	strh	r5, [r4, #4]
 800675e:	e7da      	b.n	8006716 <FastMulInnerBase+0x16>
 8006760:	2600      	movs	r6, #0
 8006762:	e7d8      	b.n	8006716 <FastMulInnerBase+0x16>

08006764 <LeftShift>:
 8006764:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006768:	4681      	mov	r9, r0
 800676a:	b3b1      	cbz	r1, 80067da <LeftShift+0x76>
 800676c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8006770:	f8d0 c000 	ldr.w	ip, [r0]
 8006774:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 8006778:	f10a 3aff 	add.w	sl, sl, #4294967295
 800677c:	f1c1 0720 	rsb	r7, r1, #32
 8006780:	f85c 502a 	ldr.w	r5, [ip, sl, lsl #2]
 8006784:	f1b8 0301 	subs.w	r3, r8, #1
 8006788:	eb0c 0a8a 	add.w	sl, ip, sl, lsl #2
 800678c:	fa25 f007 	lsr.w	r0, r5, r7
 8006790:	bf18      	it	ne
 8006792:	4652      	movne	r2, sl
 8006794:	d101      	bne.n	800679a <LeftShift+0x36>
 8006796:	e009      	b.n	80067ac <LeftShift+0x48>
 8006798:	4625      	mov	r5, r4
 800679a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800679e:	408d      	lsls	r5, r1
 80067a0:	fa24 f607 	lsr.w	r6, r4, r7
 80067a4:	4335      	orrs	r5, r6
 80067a6:	3b01      	subs	r3, #1
 80067a8:	6055      	str	r5, [r2, #4]
 80067aa:	d1f5      	bne.n	8006798 <LeftShift+0x34>
 80067ac:	f8dc 3000 	ldr.w	r3, [ip]
 80067b0:	fa03 f101 	lsl.w	r1, r3, r1
 80067b4:	f8cc 1000 	str.w	r1, [ip]
 80067b8:	b160      	cbz	r0, 80067d4 <LeftShift+0x70>
 80067ba:	f899 3006 	ldrb.w	r3, [r9, #6]
 80067be:	f108 0801 	add.w	r8, r8, #1
 80067c2:	4598      	cmp	r8, r3
 80067c4:	bf97      	itett	ls
 80067c6:	f8ca 0004 	strls.w	r0, [sl, #4]
 80067ca:	f241 40b5 	movwhi	r0, #5301	; 0x14b5
 80067ce:	2000      	movls	r0, #0
 80067d0:	f8a9 8004 	strhls.w	r8, [r9, #4]
 80067d4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80067d8:	4770      	bx	lr
 80067da:	4608      	mov	r0, r1
 80067dc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <MulBigbyUnInt>:
 80067e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	4684      	mov	ip, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	b339      	cbz	r1, 800683e <MulBigbyUnInt+0x5a>
 80067ee:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80067f2:	f8d0 9000 	ldr.w	r9, [r0]
 80067f6:	f1b8 0f00 	cmp.w	r8, #0
 80067fa:	d01d      	beq.n	8006838 <MulBigbyUnInt+0x54>
 80067fc:	f1a9 0604 	sub.w	r6, r9, #4
 8006800:	eb06 0188 	add.w	r1, r6, r8, lsl #2
 8006804:	2200      	movs	r2, #0
 8006806:	2300      	movs	r3, #0
 8006808:	6874      	ldr	r4, [r6, #4]
 800680a:	4692      	mov	sl, r2
 800680c:	469b      	mov	fp, r3
 800680e:	fbe7 ab04 	umlal	sl, fp, r7, r4
 8006812:	f846 af04 	str.w	sl, [r6, #4]!
 8006816:	428e      	cmp	r6, r1
 8006818:	465d      	mov	r5, fp
 800681a:	465a      	mov	r2, fp
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	d1f2      	bne.n	8006808 <MulBigbyUnInt+0x24>
 8006822:	b14d      	cbz	r5, 8006838 <MulBigbyUnInt+0x54>
 8006824:	f89c 0006 	ldrb.w	r0, [ip, #6]
 8006828:	f108 0101 	add.w	r1, r8, #1
 800682c:	4281      	cmp	r1, r0
 800682e:	d90b      	bls.n	8006848 <MulBigbyUnInt+0x64>
 8006830:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8006834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006838:	2000      	movs	r0, #0
 800683a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	f7ff fdf9 	bl	8006434 <SetZeroBig>
 8006842:	4638      	mov	r0, r7
 8006844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006848:	f8ac 1004 	strh.w	r1, [ip, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	f849 b028 	str.w	fp, [r9, r8, lsl #2]
 8006852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	bf00      	nop

08006858 <Sub_Moduli_Big>:
 8006858:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800685c:	8883      	ldrh	r3, [r0, #4]
 800685e:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8006862:	4692      	mov	sl, r2
 8006864:	7992      	ldrb	r2, [r2, #6]
 8006866:	454b      	cmp	r3, r9
 8006868:	bf2c      	ite	cs
 800686a:	4698      	movcs	r8, r3
 800686c:	46c8      	movcc	r8, r9
 800686e:	3201      	adds	r2, #1
 8006870:	4590      	cmp	r8, r2
 8006872:	d904      	bls.n	800687e <Sub_Moduli_Big+0x26>
 8006874:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8006878:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800687c:	4770      	bx	lr
 800687e:	7982      	ldrb	r2, [r0, #6]
 8006880:	6807      	ldr	r7, [r0, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	bf28      	it	cs
 8006886:	2400      	movcs	r4, #0
 8006888:	d306      	bcc.n	8006898 <Sub_Moduli_Big+0x40>
 800688a:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 800688e:	3301      	adds	r3, #1
 8006890:	7982      	ldrb	r2, [r0, #6]
 8006892:	b29b      	uxth	r3, r3
 8006894:	429a      	cmp	r2, r3
 8006896:	d2f8      	bcs.n	800688a <Sub_Moduli_Big+0x32>
 8006898:	798b      	ldrb	r3, [r1, #6]
 800689a:	f8d1 c000 	ldr.w	ip, [r1]
 800689e:	454b      	cmp	r3, r9
 80068a0:	d308      	bcc.n	80068b4 <Sub_Moduli_Big+0x5c>
 80068a2:	464b      	mov	r3, r9
 80068a4:	2000      	movs	r0, #0
 80068a6:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
 80068aa:	3301      	adds	r3, #1
 80068ac:	798a      	ldrb	r2, [r1, #6]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d2f8      	bcs.n	80068a6 <Sub_Moduli_Big+0x4e>
 80068b4:	2500      	movs	r5, #0
 80068b6:	f8da 6000 	ldr.w	r6, [sl]
 80068ba:	f109 0901 	add.w	r9, r9, #1
 80068be:	462c      	mov	r4, r5
 80068c0:	2200      	movs	r2, #0
 80068c2:	2300      	movs	r3, #0
 80068c4:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80068c8:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 80068cc:	3401      	adds	r4, #1
 80068ce:	1a40      	subs	r0, r0, r1
 80068d0:	eb60 0100 	sbc.w	r1, r0, r0
 80068d4:	1880      	adds	r0, r0, r2
 80068d6:	b2a4      	uxth	r4, r4
 80068d8:	eb41 0103 	adc.w	r1, r1, r3
 80068dc:	454c      	cmp	r4, r9
 80068de:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 80068e2:	460a      	mov	r2, r1
 80068e4:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80068e8:	4625      	mov	r5, r4
 80068ea:	d3eb      	bcc.n	80068c4 <Sub_Moduli_Big+0x6c>
 80068ec:	45a0      	cmp	r8, r4
 80068ee:	d90f      	bls.n	8006910 <Sub_Moduli_Big+0xb8>
 80068f0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80068f4:	f104 0c01 	add.w	ip, r4, #1
 80068f8:	1950      	adds	r0, r2, r5
 80068fa:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80068fe:	fa1f f48c 	uxth.w	r4, ip
 8006902:	f143 0100 	adc.w	r1, r3, #0
 8006906:	45a0      	cmp	r8, r4
 8006908:	460a      	mov	r2, r1
 800690a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800690e:	d8ef      	bhi.n	80068f0 <Sub_Moduli_Big+0x98>
 8006910:	b132      	cbz	r2, 8006920 <Sub_Moduli_Big+0xc8>
 8006912:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8006916:	3b01      	subs	r3, #1
 8006918:	f06f 0201 	mvn.w	r2, #1
 800691c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 8006920:	1e63      	subs	r3, r4, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8006928:	b942      	cbnz	r2, 800693c <Sub_Moduli_Big+0xe4>
 800692a:	b16b      	cbz	r3, 8006948 <Sub_Moduli_Big+0xf0>
 800692c:	3b01      	subs	r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d0f8      	beq.n	800692a <Sub_Moduli_Big+0xd2>
 8006938:	1c5c      	adds	r4, r3, #1
 800693a:	b2a4      	uxth	r4, r4
 800693c:	f8aa 4004 	strh.w	r4, [sl, #4]
 8006940:	2000      	movs	r0, #0
 8006942:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006946:	4770      	bx	lr
 8006948:	2401      	movs	r4, #1
 800694a:	f8aa 4004 	strh.w	r4, [sl, #4]
 800694e:	2000      	movs	r0, #0
 8006950:	e7f7      	b.n	8006942 <Sub_Moduli_Big+0xea>
 8006952:	bf00      	nop

08006954 <SubBig>:
 8006954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	460d      	mov	r5, r1
 800695c:	ac02      	add	r4, sp, #8
 800695e:	2100      	movs	r1, #0
 8006960:	f890 c006 	ldrb.w	ip, [r0, #6]
 8006964:	f844 1d04 	str.w	r1, [r4, #-4]!
 8006968:	f895 e006 	ldrb.w	lr, [r5, #6]
 800696c:	4606      	mov	r6, r0
 800696e:	4690      	mov	r8, r2
 8006970:	45f4      	cmp	ip, lr
 8006972:	bf2c      	ite	cs
 8006974:	4661      	movcs	r1, ip
 8006976:	4671      	movcc	r1, lr
 8006978:	4620      	mov	r0, r4
 800697a:	461a      	mov	r2, r3
 800697c:	461f      	mov	r7, r3
 800697e:	f7ff fc53 	bl	8006228 <StAllocBig>
 8006982:	b120      	cbz	r0, 800698e <SubBig+0x3a>
 8006984:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006988:	b002      	add	sp, #8
 800698a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	809a      	strh	r2, [r3, #4]
 8006994:	4630      	mov	r0, r6
 8006996:	4629      	mov	r1, r5
 8006998:	f7ff fd60 	bl	800645c <CompareBig>
 800699c:	3003      	adds	r0, #3
 800699e:	2806      	cmp	r0, #6
 80069a0:	d80d      	bhi.n	80069be <SubBig+0x6a>
 80069a2:	e8df f000 	tbb	[pc, r0]
 80069a6:	3639      	.short	0x3639
 80069a8:	262f3204 	.word	0x262f3204
 80069ac:	1d          	.byte	0x1d
 80069ad:	00          	.byte	0x00
 80069ae:	4628      	mov	r0, r5
 80069b0:	4631      	mov	r1, r6
 80069b2:	9a01      	ldr	r2, [sp, #4]
 80069b4:	f7ff ff50 	bl	8006858 <Sub_Moduli_Big>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	71da      	strb	r2, [r3, #7]
 80069be:	4640      	mov	r0, r8
 80069c0:	2100      	movs	r1, #0
 80069c2:	f7ff fc5d 	bl	8006280 <InitBig>
 80069c6:	4641      	mov	r1, r8
 80069c8:	9801      	ldr	r0, [sp, #4]
 80069ca:	f7ff fc75 	bl	80062b8 <CopyBig>
 80069ce:	4639      	mov	r1, r7
 80069d0:	4605      	mov	r5, r0
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff fc46 	bl	8006264 <StFreeBig>
 80069d8:	4628      	mov	r0, r5
 80069da:	b002      	add	sp, #8
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	9a01      	ldr	r2, [sp, #4]
 80069e2:	4630      	mov	r0, r6
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7ff fc9d 	bl	8006324 <Add_Moduli_Big>
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	71da      	strb	r2, [r3, #7]
 80069f0:	e7e5      	b.n	80069be <SubBig+0x6a>
 80069f2:	4630      	mov	r0, r6
 80069f4:	4629      	mov	r1, r5
 80069f6:	9a01      	ldr	r2, [sp, #4]
 80069f8:	f7ff ff2e 	bl	8006858 <Sub_Moduli_Big>
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	71da      	strb	r2, [r3, #7]
 8006a02:	e7dc      	b.n	80069be <SubBig+0x6a>
 8006a04:	4628      	mov	r0, r5
 8006a06:	4631      	mov	r1, r6
 8006a08:	e7f5      	b.n	80069f6 <SubBig+0xa2>
 8006a0a:	9801      	ldr	r0, [sp, #4]
 8006a0c:	f7ff fd12 	bl	8006434 <SetZeroBig>
 8006a10:	e7d5      	b.n	80069be <SubBig+0x6a>
 8006a12:	4630      	mov	r0, r6
 8006a14:	4629      	mov	r1, r5
 8006a16:	e7cc      	b.n	80069b2 <SubBig+0x5e>
 8006a18:	9a01      	ldr	r2, [sp, #4]
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7ff fc81 	bl	8006324 <Add_Moduli_Big>
 8006a22:	9b01      	ldr	r3, [sp, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	71da      	strb	r2, [r3, #7]
 8006a28:	e7c9      	b.n	80069be <SubBig+0x6a>
 8006a2a:	bf00      	nop

08006a2c <MontyInit>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	468b      	mov	fp, r1
 8006a32:	7981      	ldrb	r1, [r0, #6]
 8006a34:	b083      	sub	sp, #12
 8006a36:	f10b 0a04 	add.w	sl, fp, #4
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	3102      	adds	r1, #2
 8006a40:	4650      	mov	r0, sl
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	4691      	mov	r9, r2
 8006a46:	f7ff fbef 	bl	8006228 <StAllocBig>
 8006a4a:	b128      	cbz	r0, 8006a58 <MontyInit+0x2c>
 8006a4c:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8006a50:	4638      	mov	r0, r7
 8006a52:	b003      	add	sp, #12
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	4601      	mov	r1, r0
 8006a5a:	f8cb 8000 	str.w	r8, [fp]
 8006a5e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006a62:	f7ff fc0d 	bl	8006280 <InitBig>
 8006a66:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8006a6a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006a6e:	f8d8 2000 	ldr.w	r2, [r8]
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	3001      	adds	r0, #1
 8006a76:	8098      	strh	r0, [r3, #4]
 8006a78:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006a7c:	2401      	movs	r4, #1
 8006a7e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	261f      	movs	r6, #31
 8006a86:	2502      	movs	r5, #2
 8006a88:	2703      	movs	r7, #3
 8006a8a:	fb02 f304 	mul.w	r3, r2, r4
 8006a8e:	403b      	ands	r3, r7
 8006a90:	eb05 0e04 	add.w	lr, r5, r4
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	bf28      	it	cs
 8006a98:	4674      	movcs	r4, lr
 8006a9a:	007f      	lsls	r7, r7, #1
 8006a9c:	3e01      	subs	r6, #1
 8006a9e:	f087 0701 	eor.w	r7, r7, #1
 8006aa2:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8006aa6:	d1f0      	bne.n	8006a8a <MontyInit+0x5e>
 8006aa8:	4264      	negs	r4, r4
 8006aaa:	f8cb 4008 	str.w	r4, [fp, #8]
 8006aae:	f898 1006 	ldrb.w	r1, [r8, #6]
 8006ab2:	a801      	add	r0, sp, #4
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	f7ff fbb6 	bl	8006228 <StAllocBig>
 8006abc:	b148      	cbz	r0, 8006ad2 <MontyInit+0xa6>
 8006abe:	4650      	mov	r0, sl
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	f7ff fbcf 	bl	8006264 <StFreeBig>
 8006ac6:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8006aca:	4638      	mov	r0, r7
 8006acc:	b003      	add	sp, #12
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	9901      	ldr	r1, [sp, #4]
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	f7ff fbef 	bl	80062b8 <CopyBig>
 8006ada:	9801      	ldr	r0, [sp, #4]
 8006adc:	f7ff fd08 	bl	80064f0 <CountBits>
 8006ae0:	4240      	negs	r0, r0
 8006ae2:	f000 051f 	and.w	r5, r0, #31
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	9801      	ldr	r0, [sp, #4]
 8006aea:	f7ff fe3b 	bl	8006764 <LeftShift>
 8006aee:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006af2:	9901      	ldr	r1, [sp, #4]
 8006af4:	4602      	mov	r2, r0
 8006af6:	464b      	mov	r3, r9
 8006af8:	f7ff ff2c 	bl	8006954 <SubBig>
 8006afc:	4607      	mov	r7, r0
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d143      	bne.n	8006b8a <MontyInit+0x15e>
 8006b02:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006b06:	b35b      	cbz	r3, 8006b60 <MontyInit+0x134>
 8006b08:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	3b01      	subs	r3, #1
 8006b12:	6802      	ldr	r2, [r0, #0]
 8006b14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b18:	2101      	movs	r1, #1
 8006b1a:	f7ff fdf1 	bl	8006700 <FastMulInnerBase>
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d03e      	beq.n	8006ba0 <MontyInit+0x174>
 8006b22:	9901      	ldr	r1, [sp, #4]
 8006b24:	4640      	mov	r0, r8
 8006b26:	f7ff fbc7 	bl	80062b8 <CopyBig>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	9801      	ldr	r0, [sp, #4]
 8006b2e:	f7ff fe59 	bl	80067e4 <MulBigbyUnInt>
 8006b32:	4629      	mov	r1, r5
 8006b34:	9801      	ldr	r0, [sp, #4]
 8006b36:	f7ff fe15 	bl	8006764 <LeftShift>
 8006b3a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006b3e:	9901      	ldr	r1, [sp, #4]
 8006b40:	4602      	mov	r2, r0
 8006b42:	464b      	mov	r3, r9
 8006b44:	f7ff ff06 	bl	8006954 <SubBig>
 8006b48:	f8db 2004 	ldr.w	r2, [fp, #4]
 8006b4c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	d1e3      	bne.n	8006b22 <MontyInit+0xf6>
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	d3d3      	bcc.n	8006b08 <MontyInit+0xdc>
 8006b60:	a801      	add	r0, sp, #4
 8006b62:	4649      	mov	r1, r9
 8006b64:	f7ff fb7e 	bl	8006264 <StFreeBig>
 8006b68:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	f7ff fc75 	bl	800645c <CompareBig>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	dd06      	ble.n	8006b84 <MontyInit+0x158>
 8006b76:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f7ff fee8 	bl	8006954 <SubBig>
 8006b84:	f8cb 900c 	str.w	r9, [fp, #12]
 8006b88:	e762      	b.n	8006a50 <MontyInit+0x24>
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	f7ff fb69 	bl	8006264 <StFreeBig>
 8006b92:	a801      	add	r0, sp, #4
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7ff fb65 	bl	8006264 <StFreeBig>
 8006b9a:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8006b9e:	e757      	b.n	8006a50 <MontyInit+0x24>
 8006ba0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006ba4:	e7d9      	b.n	8006b5a <MontyInit+0x12e>
 8006ba6:	bf00      	nop

08006ba8 <MontyKillR2>:
 8006ba8:	b508      	push	{r3, lr}
 8006baa:	4603      	mov	r3, r0
 8006bac:	3004      	adds	r0, #4
 8006bae:	68d9      	ldr	r1, [r3, #12]
 8006bb0:	f7ff fb58 	bl	8006264 <StFreeBig>
 8006bb4:	bd08      	pop	{r3, pc}
 8006bb6:	bf00      	nop

08006bb8 <MontyKillAll>:
 8006bb8:	6841      	ldr	r1, [r0, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	b508      	push	{r3, lr}
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	6002      	str	r2, [r0, #0]
 8006bc2:	6082      	str	r2, [r0, #8]
 8006bc4:	b119      	cbz	r1, 8006bce <MontyKillAll+0x16>
 8006bc6:	3004      	adds	r0, #4
 8006bc8:	68d9      	ldr	r1, [r3, #12]
 8006bca:	f7ff fb4b 	bl	8006264 <StFreeBig>
 8006bce:	bd08      	pop	{r3, pc}

08006bd0 <MontyMul>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	b09f      	sub	sp, #124	; 0x7c
 8006bd6:	9312      	str	r3, [sp, #72]	; 0x48
 8006bd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006bda:	921a      	str	r2, [sp, #104]	; 0x68
 8006bdc:	682c      	ldr	r4, [r5, #0]
 8006bde:	ab1e      	add	r3, sp, #120	; 0x78
 8006be0:	9315      	str	r3, [sp, #84]	; 0x54
 8006be2:	68ab      	ldr	r3, [r5, #8]
 8006be4:	88a5      	ldrh	r5, [r4, #4]
 8006be6:	9318      	str	r3, [sp, #96]	; 0x60
 8006be8:	950a      	str	r5, [sp, #40]	; 0x28
 8006bea:	79a3      	ldrb	r3, [r4, #6]
 8006bec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006bee:	6824      	ldr	r4, [r4, #0]
 8006bf0:	9414      	str	r4, [sp, #80]	; 0x50
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	f845 4d04 	str.w	r4, [r5, #-4]!
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bfe:	9515      	str	r5, [sp, #84]	; 0x54
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c06:	4605      	mov	r5, r0
 8006c08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006c0a:	f7ff fb0d 	bl	8006228 <StAllocBig>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	b120      	cbz	r0, 8006c1c <MontyMul+0x4c>
 8006c12:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006c16:	b01f      	add	sp, #124	; 0x7c
 8006c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006c1e:	4631      	mov	r1, r6
 8006c20:	f7ff fb2e 	bl	8006280 <InitBig>
 8006c24:	88a0      	ldrh	r0, [r4, #4]
 8006c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c28:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8006c2a:	941b      	str	r4, [sp, #108]	; 0x6c
 8006c2c:	4283      	cmp	r3, r0
 8006c2e:	6827      	ldr	r7, [r4, #0]
 8006c30:	d907      	bls.n	8006c42 <MontyMul+0x72>
 8006c32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006c34:	1a1a      	subs	r2, r3, r0
 8006c36:	4631      	mov	r1, r6
 8006c38:	0092      	lsls	r2, r2, #2
 8006c3a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006c3e:	f000 ff95 	bl	8007b6c <memset>
 8006c42:	88ab      	ldrh	r3, [r5, #4]
 8006c44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c46:	429c      	cmp	r4, r3
 8006c48:	f240 80c5 	bls.w	8006dd6 <MontyMul+0x206>
 8006c4c:	6828      	ldr	r0, [r5, #0]
 8006c4e:	1ae2      	subs	r2, r4, r3
 8006c50:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	2100      	movs	r1, #0
 8006c58:	f000 ff88 	bl	8007b6c <memset>
 8006c5c:	6829      	ldr	r1, [r5, #0]
 8006c5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006c60:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8006c64:	00ab      	lsls	r3, r5, #2
 8006c66:	3801      	subs	r0, #1
 8006c68:	1f1a      	subs	r2, r3, #4
 8006c6a:	0080      	lsls	r0, r0, #2
 8006c6c:	3904      	subs	r1, #4
 8006c6e:	18ba      	adds	r2, r7, r2
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	9007      	str	r0, [sp, #28]
 8006c74:	2000      	movs	r0, #0
 8006c76:	9116      	str	r1, [sp, #88]	; 0x58
 8006c78:	9219      	str	r2, [sp, #100]	; 0x64
 8006c7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c7e:	46bc      	mov	ip, r7
 8006c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006c84:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8006c88:	9106      	str	r1, [sp, #24]
 8006c8a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006c8c:	6821      	ldr	r1, [r4, #0]
 8006c8e:	9806      	ldr	r0, [sp, #24]
 8006c90:	f8dc 2000 	ldr.w	r2, [ip]
 8006c94:	682c      	ldr	r4, [r5, #0]
 8006c96:	9316      	str	r3, [sp, #88]	; 0x58
 8006c98:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	fbe1 2300 	umlal	r2, r3, r1, r0
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	fb02 fe05 	mul.w	lr, r2, r5
 8006caa:	4010      	ands	r0, r2
 8006cac:	4019      	ands	r1, r3
 8006cae:	fbe4 010e 	umlal	r0, r1, r4, lr
 8006cb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cb4:	2c01      	cmp	r4, #1
 8006cb6:	d02c      	beq.n	8006d12 <MontyMul+0x142>
 8006cb8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006cba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006cbc:	4666      	mov	r6, ip
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	469b      	mov	fp, r3
 8006cc2:	f04f 0900 	mov.w	r9, #0
 8006cc6:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8006cca:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006cce:	9104      	str	r1, [sp, #16]
 8006cd0:	f8cd 9014 	str.w	r9, [sp, #20]
 8006cd4:	9303      	str	r3, [sp, #12]
 8006cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cda:	eb1b 0a02 	adds.w	sl, fp, r2
 8006cde:	9a03      	ldr	r2, [sp, #12]
 8006ce0:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006ce4:	fbee 0102 	umlal	r0, r1, lr, r2
 8006ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8006cec:	9806      	ldr	r0, [sp, #24]
 8006cee:	9a07      	ldr	r2, [sp, #28]
 8006cf0:	f149 0b00 	adc.w	fp, r9, #0
 8006cf4:	fbe0 ab03 	umlal	sl, fp, r0, r3
 8006cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cfc:	eb10 000a 	adds.w	r0, r0, sl
 8006d00:	f84c 0004 	str.w	r0, [ip, r4]
 8006d04:	f104 0404 	add.w	r4, r4, #4
 8006d08:	f141 0100 	adc.w	r1, r1, #0
 8006d0c:	4294      	cmp	r4, r2
 8006d0e:	d1d8      	bne.n	8006cc2 <MontyMul+0xf2>
 8006d10:	465b      	mov	r3, fp
 8006d12:	2500      	movs	r5, #0
 8006d14:	9308      	str	r3, [sp, #32]
 8006d16:	9509      	str	r5, [sp, #36]	; 0x24
 8006d18:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006d1a:	910c      	str	r1, [sp, #48]	; 0x30
 8006d1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	950d      	str	r5, [sp, #52]	; 0x34
 8006d24:	18c0      	adds	r0, r0, r3
 8006d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d2a:	f141 0100 	adc.w	r1, r1, #0
 8006d2e:	9110      	str	r1, [sp, #64]	; 0x40
 8006d30:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006d32:	950f      	str	r5, [sp, #60]	; 0x3c
 8006d34:	1812      	adds	r2, r2, r0
 8006d36:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006d38:	600a      	str	r2, [r1, #0]
 8006d3a:	f143 0300 	adc.w	r3, r3, #0
 8006d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d40:	930e      	str	r3, [sp, #56]	; 0x38
 8006d42:	9511      	str	r5, [sp, #68]	; 0x44
 8006d44:	4403      	add	r3, r0
 8006d46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	42ab      	cmp	r3, r5
 8006d50:	950b      	str	r5, [sp, #44]	; 0x2c
 8006d52:	d895      	bhi.n	8006c80 <MontyMul+0xb0>
 8006d54:	4667      	mov	r7, ip
 8006d56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006d58:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8006d5a:	1c6b      	adds	r3, r5, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	80a3      	strh	r3, [r4, #4]
 8006d62:	d915      	bls.n	8006d90 <MontyMul+0x1c0>
 8006d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006d6e:	b97b      	cbnz	r3, 8006d90 <MontyMul+0x1c0>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	e005      	b.n	8006d80 <MontyMul+0x1b0>
 8006d74:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006d78:	1e59      	subs	r1, r3, #1
 8006d7a:	b289      	uxth	r1, r1
 8006d7c:	bb12      	cbnz	r2, 8006dc4 <MontyMul+0x1f4>
 8006d7e:	460b      	mov	r3, r1
 8006d80:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d8a:	d1f3      	bne.n	8006d74 <MontyMul+0x1a4>
 8006d8c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006d8e:	80ab      	strh	r3, [r5, #4]
 8006d90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006d92:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006d94:	6821      	ldr	r1, [r4, #0]
 8006d96:	f7ff fb61 	bl	800645c <CompareBig>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	db15      	blt.n	8006dca <MontyMul+0x1fa>
 8006d9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006da0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006da2:	6829      	ldr	r1, [r5, #0]
 8006da4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006da6:	f7ff fd57 	bl	8006858 <Sub_Moduli_Big>
 8006daa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	71eb      	strb	r3, [r5, #7]
 8006db2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006db4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006db6:	68d9      	ldr	r1, [r3, #12]
 8006db8:	f7ff fa54 	bl	8006264 <StFreeBig>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	b01f      	add	sp, #124	; 0x7c
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8006dc6:	80a3      	strh	r3, [r4, #4]
 8006dc8:	e7e2      	b.n	8006d90 <MontyMul+0x1c0>
 8006dca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006dcc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006dce:	f7ff fa73 	bl	80062b8 <CopyBig>
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	e7ed      	b.n	8006db2 <MontyMul+0x1e2>
 8006dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0bc      	beq.n	8006d56 <MontyMul+0x186>
 8006ddc:	e73e      	b.n	8006c5c <MontyMul+0x8c>
 8006dde:	bf00      	nop

08006de0 <MontyExit>:
 8006de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de2:	b083      	sub	sp, #12
 8006de4:	ac02      	add	r4, sp, #8
 8006de6:	2300      	movs	r3, #0
 8006de8:	4606      	mov	r6, r0
 8006dea:	f844 3d04 	str.w	r3, [r4, #-4]!
 8006dee:	4615      	mov	r5, r2
 8006df0:	460f      	mov	r7, r1
 8006df2:	4620      	mov	r0, r4
 8006df4:	79b1      	ldrb	r1, [r6, #6]
 8006df6:	68d2      	ldr	r2, [r2, #12]
 8006df8:	f7ff fa16 	bl	8006228 <StAllocBig>
 8006dfc:	b118      	cbz	r0, 8006e06 <MontyExit+0x26>
 8006dfe:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006e02:	b003      	add	sp, #12
 8006e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e06:	9801      	ldr	r0, [sp, #4]
 8006e08:	2101      	movs	r1, #1
 8006e0a:	f7ff fa39 	bl	8006280 <InitBig>
 8006e0e:	463a      	mov	r2, r7
 8006e10:	9901      	ldr	r1, [sp, #4]
 8006e12:	462b      	mov	r3, r5
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7ff fedb 	bl	8006bd0 <MontyMul>
 8006e1a:	68e9      	ldr	r1, [r5, #12]
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f7ff fa20 	bl	8006264 <StFreeBig>
 8006e24:	4630      	mov	r0, r6
 8006e26:	b003      	add	sp, #12
 8006e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2a:	bf00      	nop

08006e2c <ModularExpSlidWin>:
 8006e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	460f      	mov	r7, r1
 8006e32:	8889      	ldrh	r1, [r1, #4]
 8006e34:	b091      	sub	sp, #68	; 0x44
 8006e36:	2901      	cmp	r1, #1
 8006e38:	4681      	mov	r9, r0
 8006e3a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	469a      	mov	sl, r3
 8006e40:	f240 80d0 	bls.w	8006fe4 <ModularExpSlidWin+0x1b8>
 8006e44:	f06f 0108 	mvn.w	r1, #8
 8006e48:	2308      	movs	r3, #8
 8006e4a:	9106      	str	r1, [sp, #24]
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	2104      	movs	r1, #4
 8006e50:	469c      	mov	ip, r3
 8006e52:	9205      	str	r2, [sp, #20]
 8006e54:	f04f 0820 	mov.w	r8, #32
 8006e58:	f04f 0b03 	mov.w	fp, #3
 8006e5c:	9104      	str	r1, [sp, #16]
 8006e5e:	79b2      	ldrb	r2, [r6, #6]
 8006e60:	88e5      	ldrh	r5, [r4, #6]
 8006e62:	00d1      	lsls	r1, r2, #3
 8006e64:	0092      	lsls	r2, r2, #2
 8006e66:	311c      	adds	r1, #28
 8006e68:	3211      	adds	r2, #17
 8006e6a:	fb02 1303 	mla	r3, r2, r3, r1
 8006e6e:	88a1      	ldrh	r1, [r4, #4]
 8006e70:	442b      	add	r3, r5
 8006e72:	4299      	cmp	r1, r3
 8006e74:	da05      	bge.n	8006e82 <ModularExpSlidWin+0x56>
 8006e76:	f240 35ed 	movw	r5, #1005	; 0x3ed
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	b011      	add	sp, #68	; 0x44
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	9203      	str	r2, [sp, #12]
 8006e86:	eb08 0305 	add.w	r3, r8, r5
 8006e8a:	80e3      	strh	r3, [r4, #6]
 8006e8c:	1953      	adds	r3, r2, r5
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	d0f1      	beq.n	8006e76 <ModularExpSlidWin+0x4a>
 8006e92:	a90c      	add	r1, sp, #48	; 0x30
 8006e94:	4630      	mov	r0, r6
 8006e96:	4622      	mov	r2, r4
 8006e98:	f8cd c004 	str.w	ip, [sp, #4]
 8006e9c:	f7ff fdc6 	bl	8006a2c <MontyInit>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d1e8      	bne.n	8006e76 <ModularExpSlidWin+0x4a>
 8006ea4:	ab0c      	add	r3, sp, #48	; 0x30
 8006ea6:	4648      	mov	r0, r9
 8006ea8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006eaa:	464a      	mov	r2, r9
 8006eac:	f7ff fe90 	bl	8006bd0 <MontyMul>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d1df      	bne.n	8006e76 <ModularExpSlidWin+0x4a>
 8006eb6:	a80c      	add	r0, sp, #48	; 0x30
 8006eb8:	9302      	str	r3, [sp, #8]
 8006eba:	f7ff fe75 	bl	8006ba8 <MontyKillR2>
 8006ebe:	9b02      	ldr	r3, [sp, #8]
 8006ec0:	9308      	str	r3, [sp, #32]
 8006ec2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006ec6:	9b07      	ldr	r3, [sp, #28]
 8006ec8:	970b      	str	r7, [sp, #44]	; 0x2c
 8006eca:	9f08      	ldr	r7, [sp, #32]
 8006ecc:	9509      	str	r5, [sp, #36]	; 0x24
 8006ece:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006ed2:	4665      	mov	r5, ip
 8006ed4:	4698      	mov	r8, r3
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	79b1      	ldrb	r1, [r6, #6]
 8006eda:	4622      	mov	r2, r4
 8006edc:	3701      	adds	r7, #1
 8006ede:	f108 0804 	add.w	r8, r8, #4
 8006ee2:	f7ff f9a1 	bl	8006228 <StAllocBig>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d1c5      	bne.n	8006e76 <ModularExpSlidWin+0x4a>
 8006eea:	42af      	cmp	r7, r5
 8006eec:	dbf3      	blt.n	8006ed6 <ModularExpSlidWin+0xaa>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	46ac      	mov	ip, r5
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	4650      	mov	r0, sl
 8006ef6:	9202      	str	r2, [sp, #8]
 8006ef8:	f8cd c004 	str.w	ip, [sp, #4]
 8006efc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006efe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006f02:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006f04:	f7ff f9bc 	bl	8006280 <InitBig>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	5959      	ldr	r1, [r3, r5]
 8006f0e:	f7ff f9d3 	bl	80062b8 <CopyBig>
 8006f12:	9a02      	ldr	r2, [sp, #8]
 8006f14:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006f18:	f1bb 0f00 	cmp.w	fp, #0
 8006f1c:	d013      	beq.n	8006f46 <ModularExpSlidWin+0x11a>
 8006f1e:	4623      	mov	r3, r4
 8006f20:	9e07      	ldr	r6, [sp, #28]
 8006f22:	f8cd c00c 	str.w	ip, [sp, #12]
 8006f26:	4614      	mov	r4, r2
 8006f28:	461d      	mov	r5, r3
 8006f2a:	6830      	ldr	r0, [r6, #0]
 8006f2c:	ab0c      	add	r3, sp, #48	; 0x30
 8006f2e:	4601      	mov	r1, r0
 8006f30:	4602      	mov	r2, r0
 8006f32:	3401      	adds	r4, #1
 8006f34:	f7ff fe4c 	bl	8006bd0 <MontyMul>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d19c      	bne.n	8006e76 <ModularExpSlidWin+0x4a>
 8006f3c:	455c      	cmp	r4, fp
 8006f3e:	d1f4      	bne.n	8006f2a <ModularExpSlidWin+0xfe>
 8006f40:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006f44:	462c      	mov	r4, r5
 8006f46:	f1bc 0f01 	cmp.w	ip, #1
 8006f4a:	d010      	beq.n	8006f6e <ModularExpSlidWin+0x142>
 8006f4c:	9907      	ldr	r1, [sp, #28]
 8006f4e:	2601      	movs	r6, #1
 8006f50:	1f0d      	subs	r5, r1, #4
 8006f52:	46e3      	mov	fp, ip
 8006f54:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8006f58:	4649      	mov	r1, r9
 8006f5a:	686a      	ldr	r2, [r5, #4]
 8006f5c:	ab0c      	add	r3, sp, #48	; 0x30
 8006f5e:	3601      	adds	r6, #1
 8006f60:	f7ff fe36 	bl	8006bd0 <MontyMul>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d186      	bne.n	8006e76 <ModularExpSlidWin+0x4a>
 8006f68:	455e      	cmp	r6, fp
 8006f6a:	d1f3      	bne.n	8006f54 <ModularExpSlidWin+0x128>
 8006f6c:	46dc      	mov	ip, fp
 8006f6e:	88bb      	ldrh	r3, [r7, #4]
 8006f70:	f8cd c004 	str.w	ip, [sp, #4]
 8006f74:	2600      	movs	r6, #0
 8006f76:	3b01      	subs	r3, #1
 8006f78:	4648      	mov	r0, r9
 8006f7a:	4651      	mov	r1, sl
 8006f7c:	9603      	str	r6, [sp, #12]
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	f7ff f99a 	bl	80062b8 <CopyBig>
 8006f84:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006f88:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006f8c:	4635      	mov	r5, r6
 8006f8e:	46b4      	mov	ip, r6
 8006f90:	940a      	str	r4, [sp, #40]	; 0x28
 8006f92:	4634      	mov	r4, r6
 8006f94:	9e04      	ldr	r6, [sp, #16]
 8006f96:	f04f 0b01 	mov.w	fp, #1
 8006f9a:	f1bb 0b01 	subs.w	fp, fp, #1
 8006f9e:	d109      	bne.n	8006fb4 <ModularExpSlidWin+0x188>
 8006fa0:	9a08      	ldr	r2, [sp, #32]
 8006fa2:	1c53      	adds	r3, r2, #1
 8006fa4:	d05f      	beq.n	8007066 <ModularExpSlidWin+0x23a>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8006fac:	3a01      	subs	r2, #1
 8006fae:	f04f 0b20 	mov.w	fp, #32
 8006fb2:	9208      	str	r2, [sp, #32]
 8006fb4:	0fe3      	lsrs	r3, r4, #31
 8006fb6:	0064      	lsls	r4, r4, #1
 8006fb8:	f1bc 0f00 	cmp.w	ip, #0
 8006fbc:	d01f      	beq.n	8006ffe <ModularExpSlidWin+0x1d2>
 8006fbe:	f1bc 0f01 	cmp.w	ip, #1
 8006fc2:	d101      	bne.n	8006fc8 <ModularExpSlidWin+0x19c>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d040      	beq.n	800704a <ModularExpSlidWin+0x21e>
 8006fc8:	3501      	adds	r5, #1
 8006fca:	9903      	ldr	r1, [sp, #12]
 8006fcc:	1b72      	subs	r2, r6, r5
 8006fce:	4093      	lsls	r3, r2
 8006fd0:	4319      	orrs	r1, r3
 8006fd2:	42b5      	cmp	r5, r6
 8006fd4:	9103      	str	r1, [sp, #12]
 8006fd6:	d019      	beq.n	800700c <ModularExpSlidWin+0x1e0>
 8006fd8:	f1bb 0b01 	subs.w	fp, fp, #1
 8006fdc:	f04f 0c02 	mov.w	ip, #2
 8006fe0:	d1e8      	bne.n	8006fb4 <ModularExpSlidWin+0x188>
 8006fe2:	e7dd      	b.n	8006fa0 <ModularExpSlidWin+0x174>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f06f 0101 	mvn.w	r1, #1
 8006fea:	2202      	movs	r2, #2
 8006fec:	469c      	mov	ip, r3
 8006fee:	9304      	str	r3, [sp, #16]
 8006ff0:	9106      	str	r1, [sp, #24]
 8006ff2:	9205      	str	r2, [sp, #20]
 8006ff4:	f04f 0804 	mov.w	r8, #4
 8006ff8:	f04f 0b00 	mov.w	fp, #0
 8006ffc:	e72f      	b.n	8006e5e <ModularExpSlidWin+0x32>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0cb      	beq.n	8006f9a <ModularExpSlidWin+0x16e>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0e0      	beq.n	8006fc8 <ModularExpSlidWin+0x19c>
 8007006:	f04f 0c01 	mov.w	ip, #1
 800700a:	e7c6      	b.n	8006f9a <ModularExpSlidWin+0x16e>
 800700c:	2500      	movs	r5, #0
 800700e:	4650      	mov	r0, sl
 8007010:	4651      	mov	r1, sl
 8007012:	4652      	mov	r2, sl
 8007014:	ab0c      	add	r3, sp, #48	; 0x30
 8007016:	3501      	adds	r5, #1
 8007018:	f7ff fdda 	bl	8006bd0 <MontyMul>
 800701c:	2800      	cmp	r0, #0
 800701e:	f47f af2a 	bne.w	8006e76 <ModularExpSlidWin+0x4a>
 8007022:	42ae      	cmp	r6, r5
 8007024:	dcf3      	bgt.n	800700e <ModularExpSlidWin+0x1e2>
 8007026:	9a03      	ldr	r2, [sp, #12]
 8007028:	9906      	ldr	r1, [sp, #24]
 800702a:	ea02 0301 	and.w	r3, r2, r1
 800702e:	9a07      	ldr	r2, [sp, #28]
 8007030:	4650      	mov	r0, sl
 8007032:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007036:	4652      	mov	r2, sl
 8007038:	ab0c      	add	r3, sp, #48	; 0x30
 800703a:	f7ff fdc9 	bl	8006bd0 <MontyMul>
 800703e:	2800      	cmp	r0, #0
 8007040:	f47f af19 	bne.w	8006e76 <ModularExpSlidWin+0x4a>
 8007044:	9003      	str	r0, [sp, #12]
 8007046:	4605      	mov	r5, r0
 8007048:	e7dd      	b.n	8007006 <ModularExpSlidWin+0x1da>
 800704a:	4650      	mov	r0, sl
 800704c:	4651      	mov	r1, sl
 800704e:	4652      	mov	r2, sl
 8007050:	ab0c      	add	r3, sp, #48	; 0x30
 8007052:	f8cd c004 	str.w	ip, [sp, #4]
 8007056:	f7ff fdbb 	bl	8006bd0 <MontyMul>
 800705a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800705e:	2800      	cmp	r0, #0
 8007060:	f47f af09 	bne.w	8006e76 <ModularExpSlidWin+0x4a>
 8007064:	e799      	b.n	8006f9a <ModularExpSlidWin+0x16e>
 8007066:	4663      	mov	r3, ip
 8007068:	2b02      	cmp	r3, #2
 800706a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800706e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007070:	d11f      	bne.n	80070b2 <ModularExpSlidWin+0x286>
 8007072:	2d00      	cmp	r5, #0
 8007074:	dd1d      	ble.n	80070b2 <ModularExpSlidWin+0x286>
 8007076:	9e03      	ldr	r6, [sp, #12]
 8007078:	4667      	mov	r7, ip
 800707a:	e001      	b.n	8007080 <ModularExpSlidWin+0x254>
 800707c:	45ab      	cmp	fp, r5
 800707e:	d017      	beq.n	80070b0 <ModularExpSlidWin+0x284>
 8007080:	4650      	mov	r0, sl
 8007082:	4651      	mov	r1, sl
 8007084:	4652      	mov	r2, sl
 8007086:	ab0c      	add	r3, sp, #48	; 0x30
 8007088:	0076      	lsls	r6, r6, #1
 800708a:	f10b 0b01 	add.w	fp, fp, #1
 800708e:	f7ff fd9f 	bl	8006bd0 <MontyMul>
 8007092:	2800      	cmp	r0, #0
 8007094:	f47f aeef 	bne.w	8006e76 <ModularExpSlidWin+0x4a>
 8007098:	9b05      	ldr	r3, [sp, #20]
 800709a:	4233      	tst	r3, r6
 800709c:	d0ee      	beq.n	800707c <ModularExpSlidWin+0x250>
 800709e:	4650      	mov	r0, sl
 80070a0:	4649      	mov	r1, r9
 80070a2:	4652      	mov	r2, sl
 80070a4:	ab0c      	add	r3, sp, #48	; 0x30
 80070a6:	f7ff fd93 	bl	8006bd0 <MontyMul>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d0e6      	beq.n	800707c <ModularExpSlidWin+0x250>
 80070ae:	e6e2      	b.n	8006e76 <ModularExpSlidWin+0x4a>
 80070b0:	46bc      	mov	ip, r7
 80070b2:	4650      	mov	r0, sl
 80070b4:	4651      	mov	r1, sl
 80070b6:	aa0c      	add	r2, sp, #48	; 0x30
 80070b8:	f8cd c004 	str.w	ip, [sp, #4]
 80070bc:	f7ff fe90 	bl	8006de0 <MontyExit>
 80070c0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80070c4:	4605      	mov	r5, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f47f aed5 	bne.w	8006e76 <ModularExpSlidWin+0x4a>
 80070cc:	a80c      	add	r0, sp, #48	; 0x30
 80070ce:	f8cd c004 	str.w	ip, [sp, #4]
 80070d2:	f7ff fd71 	bl	8006bb8 <MontyKillAll>
 80070d6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80070da:	462e      	mov	r6, r5
 80070dc:	4667      	mov	r7, ip
 80070de:	9907      	ldr	r1, [sp, #28]
 80070e0:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80070e4:	4621      	mov	r1, r4
 80070e6:	3601      	adds	r6, #1
 80070e8:	f7ff f8bc 	bl	8006264 <StFreeBig>
 80070ec:	42be      	cmp	r6, r7
 80070ee:	dbf6      	blt.n	80070de <ModularExpSlidWin+0x2b2>
 80070f0:	88e3      	ldrh	r3, [r4, #6]
 80070f2:	ebc8 0803 	rsb	r8, r8, r3
 80070f6:	f8a4 8006 	strh.w	r8, [r4, #6]
 80070fa:	e6be      	b.n	8006e7a <ModularExpSlidWin+0x4e>

080070fc <RSASP1>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4c97      	ldr	r4, [pc, #604]	; (8007360 <RSASP1+0x264>)
 8007102:	f8df c260 	ldr.w	ip, [pc, #608]	; 8007364 <RSASP1+0x268>
 8007106:	b08f      	sub	sp, #60	; 0x3c
 8007108:	2501      	movs	r5, #1
 800710a:	2700      	movs	r7, #0
 800710c:	9709      	str	r7, [sp, #36]	; 0x24
 800710e:	6025      	str	r5, [r4, #0]
 8007110:	6824      	ldr	r4, [r4, #0]
 8007112:	9409      	str	r4, [sp, #36]	; 0x24
 8007114:	f8dc 4000 	ldr.w	r4, [ip]
 8007118:	9409      	str	r4, [sp, #36]	; 0x24
 800711a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800711e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	4616      	mov	r6, r2
 8007128:	469a      	mov	sl, r3
 800712a:	d057      	beq.n	80071dc <RSASP1+0xe0>
 800712c:	970a      	str	r7, [sp, #40]	; 0x28
 800712e:	970b      	str	r7, [sp, #44]	; 0x2c
 8007130:	970c      	str	r7, [sp, #48]	; 0x30
 8007132:	970d      	str	r7, [sp, #52]	; 0x34
 8007134:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8007138:	6887      	ldr	r7, [r0, #8]
 800713a:	f8d0 8000 	ldr.w	r8, [r0]
 800713e:	6843      	ldr	r3, [r0, #4]
 8007140:	2900      	cmp	r1, #0
 8007142:	d033      	beq.n	80071ac <RSASP1+0xb0>
 8007144:	2f00      	cmp	r7, #0
 8007146:	d031      	beq.n	80071ac <RSASP1+0xb0>
 8007148:	f1b8 0f00 	cmp.w	r8, #0
 800714c:	d02e      	beq.n	80071ac <RSASP1+0xb0>
 800714e:	f112 0c02 	adds.w	ip, r2, #2
 8007152:	d02b      	beq.n	80071ac <RSASP1+0xb0>
 8007154:	f1b9 0f00 	cmp.w	r9, #0
 8007158:	dd28      	ble.n	80071ac <RSASP1+0xb0>
 800715a:	f103 3bff 	add.w	fp, r3, #4294967295
 800715e:	f1bb 0f00 	cmp.w	fp, #0
 8007162:	dd23      	ble.n	80071ac <RSASP1+0xb0>
 8007164:	45d9      	cmp	r9, fp
 8007166:	dc21      	bgt.n	80071ac <RSASP1+0xb0>
 8007168:	3302      	adds	r3, #2
 800716a:	089b      	lsrs	r3, r3, #2
 800716c:	aa0a      	add	r2, sp, #40	; 0x28
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	4652      	mov	r2, sl
 8007176:	9303      	str	r3, [sp, #12]
 8007178:	f8cd c010 	str.w	ip, [sp, #16]
 800717c:	f7ff f854 	bl	8006228 <StAllocBig>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007186:	2800      	cmp	r0, #0
 8007188:	d130      	bne.n	80071ec <RSASP1+0xf0>
 800718a:	aa0c      	add	r2, sp, #48	; 0x30
 800718c:	9206      	str	r2, [sp, #24]
 800718e:	4610      	mov	r0, r2
 8007190:	4619      	mov	r1, r3
 8007192:	4652      	mov	r2, sl
 8007194:	f8cd c010 	str.w	ip, [sp, #16]
 8007198:	f7ff f846 	bl	8006228 <StAllocBig>
 800719c:	2800      	cmp	r0, #0
 800719e:	f000 80b1 	beq.w	8007304 <RSASP1+0x208>
 80071a2:	9805      	ldr	r0, [sp, #20]
 80071a4:	4651      	mov	r1, sl
 80071a6:	f7ff f85d 	bl	8006264 <StFreeBig>
 80071aa:	e01f      	b.n	80071ec <RSASP1+0xf0>
 80071ac:	461c      	mov	r4, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	930a      	str	r3, [sp, #40]	; 0x28
 80071b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071b4:	930c      	str	r3, [sp, #48]	; 0x30
 80071b6:	930d      	str	r3, [sp, #52]	; 0x34
 80071b8:	b155      	cbz	r5, 80071d0 <RSASP1+0xd4>
 80071ba:	b14f      	cbz	r7, 80071d0 <RSASP1+0xd4>
 80071bc:	f1b8 0f00 	cmp.w	r8, #0
 80071c0:	d006      	beq.n	80071d0 <RSASP1+0xd4>
 80071c2:	b12e      	cbz	r6, 80071d0 <RSASP1+0xd4>
 80071c4:	4599      	cmp	r9, r3
 80071c6:	dd03      	ble.n	80071d0 <RSASP1+0xd4>
 80071c8:	429c      	cmp	r4, r3
 80071ca:	dd01      	ble.n	80071d0 <RSASP1+0xd4>
 80071cc:	45a1      	cmp	r9, r4
 80071ce:	dd66      	ble.n	800729e <RSASP1+0x1a2>
 80071d0:	f241 3bef 	movw	fp, #5103	; 0x13ef
 80071d4:	4658      	mov	r0, fp
 80071d6:	b00f      	add	sp, #60	; 0x3c
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071de:	f8cc 3000 	str.w	r3, [ip]
 80071e2:	f8dc 3000 	ldr.w	r3, [ip]
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ea:	b933      	cbnz	r3, 80071fa <RSASP1+0xfe>
 80071ec:	68a7      	ldr	r7, [r4, #8]
 80071ee:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80071f2:	f8d4 8000 	ldr.w	r8, [r4]
 80071f6:	6864      	ldr	r4, [r4, #4]
 80071f8:	e7d9      	b.n	80071ae <RSASP1+0xb2>
 80071fa:	970a      	str	r7, [sp, #40]	; 0x28
 80071fc:	970b      	str	r7, [sp, #44]	; 0x2c
 80071fe:	970c      	str	r7, [sp, #48]	; 0x30
 8007200:	970d      	str	r7, [sp, #52]	; 0x34
 8007202:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8007206:	6887      	ldr	r7, [r0, #8]
 8007208:	6803      	ldr	r3, [r0, #0]
 800720a:	6842      	ldr	r2, [r0, #4]
 800720c:	2900      	cmp	r1, #0
 800720e:	d043      	beq.n	8007298 <RSASP1+0x19c>
 8007210:	2f00      	cmp	r7, #0
 8007212:	d041      	beq.n	8007298 <RSASP1+0x19c>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d03f      	beq.n	8007298 <RSASP1+0x19c>
 8007218:	f116 0b02 	adds.w	fp, r6, #2
 800721c:	d03c      	beq.n	8007298 <RSASP1+0x19c>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	dd39      	ble.n	8007298 <RSASP1+0x19c>
 8007224:	f102 38ff 	add.w	r8, r2, #4294967295
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	dd34      	ble.n	8007298 <RSASP1+0x19c>
 800722e:	45c1      	cmp	r9, r8
 8007230:	dc32      	bgt.n	8007298 <RSASP1+0x19c>
 8007232:	3202      	adds	r2, #2
 8007234:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8007238:	aa0a      	add	r2, sp, #40	; 0x28
 800723a:	9205      	str	r2, [sp, #20]
 800723c:	4661      	mov	r1, ip
 800723e:	4610      	mov	r0, r2
 8007240:	4652      	mov	r2, sl
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	f8cd c010 	str.w	ip, [sp, #16]
 8007248:	f7fe ffee 	bl	8006228 <StAllocBig>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007252:	2800      	cmp	r0, #0
 8007254:	d1ca      	bne.n	80071ec <RSASP1+0xf0>
 8007256:	aa0c      	add	r2, sp, #48	; 0x30
 8007258:	9206      	str	r2, [sp, #24]
 800725a:	4610      	mov	r0, r2
 800725c:	4661      	mov	r1, ip
 800725e:	4652      	mov	r2, sl
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	f7fe ffe1 	bl	8006228 <StAllocBig>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	2800      	cmp	r0, #0
 800726a:	d19a      	bne.n	80071a2 <RSASP1+0xa6>
 800726c:	4618      	mov	r0, r3
 800726e:	4641      	mov	r1, r8
 8007270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007272:	f7ff f983 	bl	800657c <W8_to_Big>
 8007276:	4641      	mov	r1, r8
 8007278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800727a:	4628      	mov	r0, r5
 800727c:	f7ff f97e 	bl	800657c <W8_to_Big>
 8007280:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007284:	f7ff f8ea 	bl	800645c <CompareBig>
 8007288:	2800      	cmp	r0, #0
 800728a:	f2c0 808d 	blt.w	80073a8 <RSASP1+0x2ac>
 800728e:	9806      	ldr	r0, [sp, #24]
 8007290:	4651      	mov	r1, sl
 8007292:	f7fe ffe7 	bl	8006264 <StFreeBig>
 8007296:	e784      	b.n	80071a2 <RSASP1+0xa6>
 8007298:	4614      	mov	r4, r2
 800729a:	4698      	mov	r8, r3
 800729c:	e787      	b.n	80071ae <RSASP1+0xb2>
 800729e:	1ce3      	adds	r3, r4, #3
 80072a0:	089b      	lsrs	r3, r3, #2
 80072a2:	aa0a      	add	r2, sp, #40	; 0x28
 80072a4:	9205      	str	r2, [sp, #20]
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	4652      	mov	r2, sl
 80072ac:	9303      	str	r3, [sp, #12]
 80072ae:	f7fe ffbb 	bl	8006228 <StAllocBig>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	4683      	mov	fp, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d18c      	bne.n	80071d4 <RSASP1+0xd8>
 80072ba:	aa0c      	add	r2, sp, #48	; 0x30
 80072bc:	9206      	str	r2, [sp, #24]
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	4652      	mov	r2, sl
 80072c4:	f7fe ffb0 	bl	8006228 <StAllocBig>
 80072c8:	4683      	mov	fp, r0
 80072ca:	b120      	cbz	r0, 80072d6 <RSASP1+0x1da>
 80072cc:	9805      	ldr	r0, [sp, #20]
 80072ce:	4651      	mov	r1, sl
 80072d0:	f7fe ffc8 	bl	8006264 <StFreeBig>
 80072d4:	e77e      	b.n	80071d4 <RSASP1+0xd8>
 80072d6:	4621      	mov	r1, r4
 80072d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072da:	4640      	mov	r0, r8
 80072dc:	f7ff f94e 	bl	800657c <W8_to_Big>
 80072e0:	4621      	mov	r1, r4
 80072e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072e4:	4628      	mov	r0, r5
 80072e6:	f7ff f949 	bl	800657c <W8_to_Big>
 80072ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072ee:	f7ff f8b5 	bl	800645c <CompareBig>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	db38      	blt.n	8007368 <RSASP1+0x26c>
 80072f6:	f241 3bf2 	movw	fp, #5106	; 0x13f2
 80072fa:	9806      	ldr	r0, [sp, #24]
 80072fc:	4651      	mov	r1, sl
 80072fe:	f7fe ffb1 	bl	8006264 <StFreeBig>
 8007302:	e7e3      	b.n	80072cc <RSASP1+0x1d0>
 8007304:	4659      	mov	r1, fp
 8007306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007308:	4640      	mov	r0, r8
 800730a:	f7ff f937 	bl	800657c <W8_to_Big>
 800730e:	4659      	mov	r1, fp
 8007310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007312:	4628      	mov	r0, r5
 8007314:	f7ff f932 	bl	800657c <W8_to_Big>
 8007318:	980a      	ldr	r0, [sp, #40]	; 0x28
 800731a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800731c:	f7ff f89e 	bl	800645c <CompareBig>
 8007320:	2800      	cmp	r0, #0
 8007322:	dab4      	bge.n	800728e <RSASP1+0x192>
 8007324:	ab0d      	add	r3, sp, #52	; 0x34
 8007326:	f109 0103 	add.w	r1, r9, #3
 800732a:	4618      	mov	r0, r3
 800732c:	0889      	lsrs	r1, r1, #2
 800732e:	4652      	mov	r2, sl
 8007330:	9307      	str	r3, [sp, #28]
 8007332:	f7fe ff79 	bl	8006228 <StAllocBig>
 8007336:	2800      	cmp	r0, #0
 8007338:	d1a9      	bne.n	800728e <RSASP1+0x192>
 800733a:	4638      	mov	r0, r7
 800733c:	4649      	mov	r1, r9
 800733e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007340:	f7ff f91c 	bl	800657c <W8_to_Big>
 8007344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007346:	af0b      	add	r7, sp, #44	; 0x2c
 8007348:	7999      	ldrb	r1, [r3, #6]
 800734a:	4638      	mov	r0, r7
 800734c:	4652      	mov	r2, sl
 800734e:	f7fe ff6b 	bl	8006228 <StAllocBig>
 8007352:	2800      	cmp	r0, #0
 8007354:	d05d      	beq.n	8007412 <RSASP1+0x316>
 8007356:	9807      	ldr	r0, [sp, #28]
 8007358:	4651      	mov	r1, sl
 800735a:	f7fe ff83 	bl	8006264 <StFreeBig>
 800735e:	e796      	b.n	800728e <RSASP1+0x192>
 8007360:	40023008 	.word	0x40023008
 8007364:	40023000 	.word	0x40023000
 8007368:	ab0d      	add	r3, sp, #52	; 0x34
 800736a:	f109 0103 	add.w	r1, r9, #3
 800736e:	4618      	mov	r0, r3
 8007370:	0889      	lsrs	r1, r1, #2
 8007372:	4652      	mov	r2, sl
 8007374:	9307      	str	r3, [sp, #28]
 8007376:	f7fe ff57 	bl	8006228 <StAllocBig>
 800737a:	4683      	mov	fp, r0
 800737c:	2800      	cmp	r0, #0
 800737e:	d1bc      	bne.n	80072fa <RSASP1+0x1fe>
 8007380:	4638      	mov	r0, r7
 8007382:	4649      	mov	r1, r9
 8007384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007386:	f7ff f8f9 	bl	800657c <W8_to_Big>
 800738a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800738c:	af0b      	add	r7, sp, #44	; 0x2c
 800738e:	7999      	ldrb	r1, [r3, #6]
 8007390:	4638      	mov	r0, r7
 8007392:	4652      	mov	r2, sl
 8007394:	f7fe ff48 	bl	8006228 <StAllocBig>
 8007398:	4683      	mov	fp, r0
 800739a:	2800      	cmp	r0, #0
 800739c:	d073      	beq.n	8007486 <RSASP1+0x38a>
 800739e:	9807      	ldr	r0, [sp, #28]
 80073a0:	4651      	mov	r1, sl
 80073a2:	f7fe ff5f 	bl	8006264 <StFreeBig>
 80073a6:	e7a8      	b.n	80072fa <RSASP1+0x1fe>
 80073a8:	ab0d      	add	r3, sp, #52	; 0x34
 80073aa:	f109 0103 	add.w	r1, r9, #3
 80073ae:	4618      	mov	r0, r3
 80073b0:	0889      	lsrs	r1, r1, #2
 80073b2:	4652      	mov	r2, sl
 80073b4:	9307      	str	r3, [sp, #28]
 80073b6:	f7fe ff37 	bl	8006228 <StAllocBig>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f47f af67 	bne.w	800728e <RSASP1+0x192>
 80073c0:	4638      	mov	r0, r7
 80073c2:	4649      	mov	r1, r9
 80073c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073c6:	f7ff f8d9 	bl	800657c <W8_to_Big>
 80073ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073cc:	af0b      	add	r7, sp, #44	; 0x2c
 80073ce:	7999      	ldrb	r1, [r3, #6]
 80073d0:	4638      	mov	r0, r7
 80073d2:	4652      	mov	r2, sl
 80073d4:	f7fe ff28 	bl	8006228 <StAllocBig>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d1bc      	bne.n	8007356 <RSASP1+0x25a>
 80073dc:	f8cd a000 	str.w	sl, [sp]
 80073e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80073e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e8:	f7ff fd20 	bl	8006e2c <ModularExpSlidWin>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d145      	bne.n	800747c <RSASP1+0x380>
 80073f0:	4681      	mov	r9, r0
 80073f2:	4603      	mov	r3, r0
 80073f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80073f6:	9303      	str	r3, [sp, #12]
 80073f8:	f7ff f89e 	bl	8006538 <CountBytes>
 80073fc:	ebc0 0008 	rsb	r0, r0, r8
 8007400:	4581      	cmp	r9, r0
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	da64      	bge.n	80074d0 <RSASP1+0x3d4>
 8007406:	eb06 0209 	add.w	r2, r6, r9
 800740a:	f109 0901 	add.w	r9, r9, #1
 800740e:	7093      	strb	r3, [r2, #2]
 8007410:	e7f0      	b.n	80073f4 <RSASP1+0x2f8>
 8007412:	f8cd a000 	str.w	sl, [sp]
 8007416:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007418:	990d      	ldr	r1, [sp, #52]	; 0x34
 800741a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800741c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741e:	f7ff fd05 	bl	8006e2c <ModularExpSlidWin>
 8007422:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007426:	bb48      	cbnz	r0, 800747c <RSASP1+0x380>
 8007428:	463a      	mov	r2, r7
 800742a:	4680      	mov	r8, r0
 800742c:	462f      	mov	r7, r5
 800742e:	4681      	mov	r9, r0
 8007430:	4625      	mov	r5, r4
 8007432:	4664      	mov	r4, ip
 8007434:	e005      	b.n	8007442 <RSASP1+0x346>
 8007436:	eb06 0308 	add.w	r3, r6, r8
 800743a:	f108 0801 	add.w	r8, r8, #1
 800743e:	f883 9002 	strb.w	r9, [r3, #2]
 8007442:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007444:	9204      	str	r2, [sp, #16]
 8007446:	f7ff f877 	bl	8006538 <CountBytes>
 800744a:	ebc0 000b 	rsb	r0, r0, fp
 800744e:	4580      	cmp	r8, r0
 8007450:	9a04      	ldr	r2, [sp, #16]
 8007452:	dbf0      	blt.n	8007436 <RSASP1+0x33a>
 8007454:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007458:	46a4      	mov	ip, r4
 800745a:	4640      	mov	r0, r8
 800745c:	f8cd c010 	str.w	ip, [sp, #16]
 8007460:	462c      	mov	r4, r5
 8007462:	463d      	mov	r5, r7
 8007464:	4617      	mov	r7, r2
 8007466:	f7ff f867 	bl	8006538 <CountBytes>
 800746a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800746e:	ebc0 010b 	rsb	r1, r0, fp
 8007472:	4461      	add	r1, ip
 8007474:	4640      	mov	r0, r8
 8007476:	2200      	movs	r2, #0
 8007478:	f7ff f902 	bl	8006680 <Big_to_W8>
 800747c:	4638      	mov	r0, r7
 800747e:	4651      	mov	r1, sl
 8007480:	f7fe fef0 	bl	8006264 <StFreeBig>
 8007484:	e767      	b.n	8007356 <RSASP1+0x25a>
 8007486:	f8cd a000 	str.w	sl, [sp]
 800748a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800748c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800748e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007492:	f7ff fccb 	bl	8006e2c <ModularExpSlidWin>
 8007496:	4683      	mov	fp, r0
 8007498:	b9a8      	cbnz	r0, 80074c6 <RSASP1+0x3ca>
 800749a:	4605      	mov	r5, r0
 800749c:	4680      	mov	r8, r0
 800749e:	e002      	b.n	80074a6 <RSASP1+0x3aa>
 80074a0:	f806 8005 	strb.w	r8, [r6, r5]
 80074a4:	3501      	adds	r5, #1
 80074a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80074a8:	f7ff f846 	bl	8006538 <CountBytes>
 80074ac:	1a20      	subs	r0, r4, r0
 80074ae:	4285      	cmp	r5, r0
 80074b0:	dbf6      	blt.n	80074a0 <RSASP1+0x3a4>
 80074b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80074b4:	4628      	mov	r0, r5
 80074b6:	f7ff f83f 	bl	8006538 <CountBytes>
 80074ba:	1a21      	subs	r1, r4, r0
 80074bc:	4431      	add	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	2200      	movs	r2, #0
 80074c2:	f7ff f8dd 	bl	8006680 <Big_to_W8>
 80074c6:	4638      	mov	r0, r7
 80074c8:	4651      	mov	r1, sl
 80074ca:	f7fe fecb 	bl	8006264 <StFreeBig>
 80074ce:	e766      	b.n	800739e <RSASP1+0x2a2>
 80074d0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80074d4:	4648      	mov	r0, r9
 80074d6:	f7ff f82f 	bl	8006538 <CountBytes>
 80074da:	ebc0 0108 	rsb	r1, r0, r8
 80074de:	4459      	add	r1, fp
 80074e0:	4648      	mov	r0, r9
 80074e2:	2200      	movs	r2, #0
 80074e4:	f7ff f8cc 	bl	8006680 <Big_to_W8>
 80074e8:	e7c8      	b.n	800747c <RSASP1+0x380>
 80074ea:	bf00      	nop

080074ec <RSAVP1>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	b089      	sub	sp, #36	; 0x24
 80074f2:	2400      	movs	r4, #0
 80074f4:	469a      	mov	sl, r3
 80074f6:	460d      	mov	r5, r1
 80074f8:	4690      	mov	r8, r2
 80074fa:	6886      	ldr	r6, [r0, #8]
 80074fc:	68c3      	ldr	r3, [r0, #12]
 80074fe:	9404      	str	r4, [sp, #16]
 8007500:	e890 0880 	ldmia.w	r0, {r7, fp}
 8007504:	9405      	str	r4, [sp, #20]
 8007506:	9406      	str	r4, [sp, #24]
 8007508:	9407      	str	r4, [sp, #28]
 800750a:	b141      	cbz	r1, 800751e <RSAVP1+0x32>
 800750c:	b13e      	cbz	r6, 800751e <RSAVP1+0x32>
 800750e:	b137      	cbz	r7, 800751e <RSAVP1+0x32>
 8007510:	b12a      	cbz	r2, 800751e <RSAVP1+0x32>
 8007512:	42a3      	cmp	r3, r4
 8007514:	dd03      	ble.n	800751e <RSAVP1+0x32>
 8007516:	45a3      	cmp	fp, r4
 8007518:	dd01      	ble.n	800751e <RSAVP1+0x32>
 800751a:	455b      	cmp	r3, fp
 800751c:	dd05      	ble.n	800752a <RSAVP1+0x3e>
 800751e:	f241 34ef 	movw	r4, #5103	; 0x13ef
 8007522:	4620      	mov	r0, r4
 8007524:	b009      	add	sp, #36	; 0x24
 8007526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752a:	f10b 0203 	add.w	r2, fp, #3
 800752e:	ea4f 0992 	mov.w	r9, r2, lsr #2
 8007532:	4649      	mov	r1, r9
 8007534:	a804      	add	r0, sp, #16
 8007536:	4652      	mov	r2, sl
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	f7fe fe75 	bl	8006228 <StAllocBig>
 800753e:	4604      	mov	r4, r0
 8007540:	2800      	cmp	r0, #0
 8007542:	d1ee      	bne.n	8007522 <RSAVP1+0x36>
 8007544:	4649      	mov	r1, r9
 8007546:	a806      	add	r0, sp, #24
 8007548:	4652      	mov	r2, sl
 800754a:	f7fe fe6d 	bl	8006228 <StAllocBig>
 800754e:	4604      	mov	r4, r0
 8007550:	b120      	cbz	r0, 800755c <RSAVP1+0x70>
 8007552:	a804      	add	r0, sp, #16
 8007554:	4651      	mov	r1, sl
 8007556:	f7fe fe85 	bl	8006264 <StFreeBig>
 800755a:	e7e2      	b.n	8007522 <RSAVP1+0x36>
 800755c:	4659      	mov	r1, fp
 800755e:	9a06      	ldr	r2, [sp, #24]
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff f80b 	bl	800657c <W8_to_Big>
 8007566:	4659      	mov	r1, fp
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	4628      	mov	r0, r5
 800756c:	f7ff f806 	bl	800657c <W8_to_Big>
 8007570:	9804      	ldr	r0, [sp, #16]
 8007572:	9906      	ldr	r1, [sp, #24]
 8007574:	f7fe ff72 	bl	800645c <CompareBig>
 8007578:	2800      	cmp	r0, #0
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	db06      	blt.n	800758c <RSAVP1+0xa0>
 800757e:	f241 34f2 	movw	r4, #5106	; 0x13f2
 8007582:	a806      	add	r0, sp, #24
 8007584:	4651      	mov	r1, sl
 8007586:	f7fe fe6d 	bl	8006264 <StFreeBig>
 800758a:	e7e2      	b.n	8007552 <RSAVP1+0x66>
 800758c:	1cd9      	adds	r1, r3, #3
 800758e:	a807      	add	r0, sp, #28
 8007590:	0889      	lsrs	r1, r1, #2
 8007592:	4652      	mov	r2, sl
 8007594:	f7fe fe48 	bl	8006228 <StAllocBig>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	4604      	mov	r4, r0
 800759c:	2800      	cmp	r0, #0
 800759e:	d1f0      	bne.n	8007582 <RSAVP1+0x96>
 80075a0:	4619      	mov	r1, r3
 80075a2:	9a07      	ldr	r2, [sp, #28]
 80075a4:	4630      	mov	r0, r6
 80075a6:	f7fe ffe9 	bl	800657c <W8_to_Big>
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	a805      	add	r0, sp, #20
 80075ae:	7999      	ldrb	r1, [r3, #6]
 80075b0:	4652      	mov	r2, sl
 80075b2:	f7fe fe39 	bl	8006228 <StAllocBig>
 80075b6:	4604      	mov	r4, r0
 80075b8:	b120      	cbz	r0, 80075c4 <RSAVP1+0xd8>
 80075ba:	a807      	add	r0, sp, #28
 80075bc:	4651      	mov	r1, sl
 80075be:	f7fe fe51 	bl	8006264 <StFreeBig>
 80075c2:	e7de      	b.n	8007582 <RSAVP1+0x96>
 80075c4:	f8cd a000 	str.w	sl, [sp]
 80075c8:	9804      	ldr	r0, [sp, #16]
 80075ca:	9907      	ldr	r1, [sp, #28]
 80075cc:	9a06      	ldr	r2, [sp, #24]
 80075ce:	9b05      	ldr	r3, [sp, #20]
 80075d0:	f7ff fc2c 	bl	8006e2c <ModularExpSlidWin>
 80075d4:	4604      	mov	r4, r0
 80075d6:	b9b8      	cbnz	r0, 8007608 <RSAVP1+0x11c>
 80075d8:	4605      	mov	r5, r0
 80075da:	4606      	mov	r6, r0
 80075dc:	e002      	b.n	80075e4 <RSAVP1+0xf8>
 80075de:	f808 6005 	strb.w	r6, [r8, r5]
 80075e2:	3501      	adds	r5, #1
 80075e4:	9805      	ldr	r0, [sp, #20]
 80075e6:	f7fe ffa7 	bl	8006538 <CountBytes>
 80075ea:	ebc0 000b 	rsb	r0, r0, fp
 80075ee:	4285      	cmp	r5, r0
 80075f0:	dbf5      	blt.n	80075de <RSAVP1+0xf2>
 80075f2:	9d05      	ldr	r5, [sp, #20]
 80075f4:	4628      	mov	r0, r5
 80075f6:	f7fe ff9f 	bl	8006538 <CountBytes>
 80075fa:	ebc0 010b 	rsb	r1, r0, fp
 80075fe:	4441      	add	r1, r8
 8007600:	4628      	mov	r0, r5
 8007602:	2200      	movs	r2, #0
 8007604:	f7ff f83c 	bl	8006680 <Big_to_W8>
 8007608:	a805      	add	r0, sp, #20
 800760a:	4651      	mov	r1, sl
 800760c:	f7fe fe2a 	bl	8006264 <StFreeBig>
 8007610:	e7d3      	b.n	80075ba <RSAVP1+0xce>
 8007612:	bf00      	nop

08007614 <RSA_PKCS1v15_Encrypt>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	b08b      	sub	sp, #44	; 0x2c
 800761a:	4606      	mov	r6, r0
 800761c:	2000      	movs	r0, #0
 800761e:	460c      	mov	r4, r1
 8007620:	4617      	mov	r7, r2
 8007622:	4698      	mov	r8, r3
 8007624:	9009      	str	r0, [sp, #36]	; 0x24
 8007626:	b18e      	cbz	r6, 800764c <RSA_PKCS1v15_Encrypt+0x38>
 8007628:	b181      	cbz	r1, 800764c <RSA_PKCS1v15_Encrypt+0x38>
 800762a:	b17a      	cbz	r2, 800764c <RSA_PKCS1v15_Encrypt+0x38>
 800762c:	b173      	cbz	r3, 800764c <RSA_PKCS1v15_Encrypt+0x38>
 800762e:	680b      	ldr	r3, [r1, #0]
 8007630:	b163      	cbz	r3, 800764c <RSA_PKCS1v15_Encrypt+0x38>
 8007632:	688b      	ldr	r3, [r1, #8]
 8007634:	b153      	cbz	r3, 800764c <RSA_PKCS1v15_Encrypt+0x38>
 8007636:	684b      	ldr	r3, [r1, #4]
 8007638:	4283      	cmp	r3, r0
 800763a:	dd07      	ble.n	800764c <RSA_PKCS1v15_Encrypt+0x38>
 800763c:	6872      	ldr	r2, [r6, #4]
 800763e:	f1a2 010a 	sub.w	r1, r2, #10
 8007642:	428b      	cmp	r3, r1
 8007644:	db07      	blt.n	8007656 <RSA_PKCS1v15_Encrypt+0x42>
 8007646:	f241 30f2 	movw	r0, #5106	; 0x13f2
 800764a:	e001      	b.n	8007650 <RSA_PKCS1v15_Encrypt+0x3c>
 800764c:	f241 30f0 	movw	r0, #5104	; 0x13f0
 8007650:	b00b      	add	sp, #44	; 0x2c
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800765a:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 800765e:	1855      	adds	r5, r2, r1
 8007660:	45ac      	cmp	ip, r5
 8007662:	da02      	bge.n	800766a <RSA_PKCS1v15_Encrypt+0x56>
 8007664:	f241 30ee 	movw	r0, #5102	; 0x13ee
 8007668:	e7f2      	b.n	8007650 <RSA_PKCS1v15_Encrypt+0x3c>
 800766a:	f8d8 c000 	ldr.w	ip, [r8]
 800766e:	f8a8 5006 	strh.w	r5, [r8, #6]
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	eb0c 0b01 	add.w	fp, ip, r1
 8007678:	f1a2 0a03 	sub.w	sl, r2, #3
 800767c:	2302      	movs	r3, #2
 800767e:	4582      	cmp	sl, r0
 8007680:	f80c 0001 	strb.w	r0, [ip, r1]
 8007684:	9206      	str	r2, [sp, #24]
 8007686:	f88b 3001 	strb.w	r3, [fp, #1]
 800768a:	dd58      	ble.n	800773e <RSA_PKCS1v15_Encrypt+0x12a>
 800768c:	2500      	movs	r5, #0
 800768e:	9604      	str	r6, [sp, #16]
 8007690:	9407      	str	r4, [sp, #28]
 8007692:	f8cd 8014 	str.w	r8, [sp, #20]
 8007696:	1cab      	adds	r3, r5, #2
 8007698:	eb1b 0303 	adds.w	r3, fp, r3
 800769c:	ebc5 080a 	rsb	r8, r5, sl
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	d073      	beq.n	800778c <RSA_PKCS1v15_Encrypt+0x178>
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	b95b      	cbnz	r3, 80076c0 <RSA_PKCS1v15_Encrypt+0xac>
 80076a8:	9e04      	ldr	r6, [sp, #16]
 80076aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80076ae:	f241 30ee 	movw	r0, #5102	; 0x13ee
 80076b2:	6873      	ldr	r3, [r6, #4]
 80076b4:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	f8a8 3006 	strh.w	r3, [r8, #6]
 80076be:	e7c7      	b.n	8007650 <RSA_PKCS1v15_Encrypt+0x3c>
 80076c0:	ea5f 4918 	movs.w	r9, r8, lsr #16
 80076c4:	bf08      	it	eq
 80076c6:	4649      	moveq	r1, r9
 80076c8:	d014      	beq.n	80076f4 <RSA_PKCS1v15_Encrypt+0xe0>
 80076ca:	9c03      	ldr	r4, [sp, #12]
 80076cc:	2600      	movs	r6, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	4621      	mov	r1, r4
 80076d2:	4613      	mov	r3, r2
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7fe fae5 	bl	8005ca4 <crl_DRBG_AES128_Generate.part.25.constprop.36>
 80076da:	3601      	adds	r6, #1
 80076dc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d1e1      	bne.n	80076a8 <RSA_PKCS1v15_Encrypt+0x94>
 80076e4:	454e      	cmp	r6, r9
 80076e6:	d1f2      	bne.n	80076ce <RSA_PKCS1v15_Encrypt+0xba>
 80076e8:	ea4f 4109 	mov.w	r1, r9, lsl #16
 80076ec:	ebc9 0901 	rsb	r9, r9, r1
 80076f0:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80076f4:	eb08 0309 	add.w	r3, r8, r9
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	dcd4      	bgt.n	80076a8 <RSA_PKCS1v15_Encrypt+0x94>
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	4419      	add	r1, r3
 8007706:	4638      	mov	r0, r7
 8007708:	4613      	mov	r3, r2
 800770a:	f7fe fbef 	bl	8005eec <crl_DRBG_AES128_Generate.part.25>
 800770e:	2800      	cmp	r0, #0
 8007710:	d1ca      	bne.n	80076a8 <RSA_PKCS1v15_Encrypt+0x94>
 8007712:	462b      	mov	r3, r5
 8007714:	eb0b 0203 	add.w	r2, fp, r3
 8007718:	7892      	ldrb	r2, [r2, #2]
 800771a:	b13a      	cbz	r2, 800772c <RSA_PKCS1v15_Encrypt+0x118>
 800771c:	429d      	cmp	r5, r3
 800771e:	bf18      	it	ne
 8007720:	eb0b 0105 	addne.w	r1, fp, r5
 8007724:	f105 0501 	add.w	r5, r5, #1
 8007728:	bf18      	it	ne
 800772a:	708a      	strbne	r2, [r1, #2]
 800772c:	3301      	adds	r3, #1
 800772e:	459a      	cmp	sl, r3
 8007730:	dcf0      	bgt.n	8007714 <RSA_PKCS1v15_Encrypt+0x100>
 8007732:	45aa      	cmp	sl, r5
 8007734:	dcaf      	bgt.n	8007696 <RSA_PKCS1v15_Encrypt+0x82>
 8007736:	9e04      	ldr	r6, [sp, #16]
 8007738:	9c07      	ldr	r4, [sp, #28]
 800773a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800773e:	9906      	ldr	r1, [sp, #24]
 8007740:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <RSA_PKCS1v15_Encrypt+0x1c0>)
 8007742:	4825      	ldr	r0, [pc, #148]	; (80077d8 <RSA_PKCS1v15_Encrypt+0x1c4>)
 8007744:	4459      	add	r1, fp
 8007746:	2300      	movs	r3, #0
 8007748:	2501      	movs	r5, #1
 800774a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800774e:	6015      	str	r5, [r2, #0]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	9209      	str	r2, [sp, #36]	; 0x24
 8007754:	6802      	ldr	r2, [r0, #0]
 8007756:	9209      	str	r2, [sp, #36]	; 0x24
 8007758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775a:	3201      	adds	r2, #1
 800775c:	d01a      	beq.n	8007794 <RSA_PKCS1v15_Encrypt+0x180>
 800775e:	6862      	ldr	r2, [r4, #4]
 8007760:	2a00      	cmp	r2, #0
 8007762:	dd0a      	ble.n	800777a <RSA_PKCS1v15_Encrypt+0x166>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	5cd2      	ldrb	r2, [r2, r3]
 8007768:	3204      	adds	r2, #4
 800776a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800776e:	0052      	lsls	r2, r2, #1
 8007770:	54ca      	strb	r2, [r1, r3]
 8007772:	6862      	ldr	r2, [r4, #4]
 8007774:	3301      	adds	r3, #1
 8007776:	429a      	cmp	r2, r3
 8007778:	dcf4      	bgt.n	8007764 <RSA_PKCS1v15_Encrypt+0x150>
 800777a:	4659      	mov	r1, fp
 800777c:	68a2      	ldr	r2, [r4, #8]
 800777e:	4630      	mov	r0, r6
 8007780:	4643      	mov	r3, r8
 8007782:	f7ff feb3 	bl	80074ec <RSAVP1>
 8007786:	2800      	cmp	r0, #0
 8007788:	d191      	bne.n	80076ae <RSA_PKCS1v15_Encrypt+0x9a>
 800778a:	e792      	b.n	80076b2 <RSA_PKCS1v15_Encrypt+0x9e>
 800778c:	f1b8 0f00 	cmp.w	r8, #0
 8007790:	dc8a      	bgt.n	80076a8 <RSA_PKCS1v15_Encrypt+0x94>
 8007792:	e787      	b.n	80076a4 <RSA_PKCS1v15_Encrypt+0x90>
 8007794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007796:	6002      	str	r2, [r0, #0]
 8007798:	6802      	ldr	r2, [r0, #0]
 800779a:	9209      	str	r2, [sp, #36]	; 0x24
 800779c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779e:	b16a      	cbz	r2, 80077bc <RSA_PKCS1v15_Encrypt+0x1a8>
 80077a0:	6862      	ldr	r2, [r4, #4]
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	dde9      	ble.n	800777a <RSA_PKCS1v15_Encrypt+0x166>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	5cd2      	ldrb	r2, [r2, r3]
 80077aa:	3207      	adds	r2, #7
 80077ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80077b0:	54ca      	strb	r2, [r1, r3]
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	3301      	adds	r3, #1
 80077b6:	429a      	cmp	r2, r3
 80077b8:	dcf5      	bgt.n	80077a6 <RSA_PKCS1v15_Encrypt+0x192>
 80077ba:	e7de      	b.n	800777a <RSA_PKCS1v15_Encrypt+0x166>
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dddb      	ble.n	800777a <RSA_PKCS1v15_Encrypt+0x166>
 80077c2:	4613      	mov	r3, r2
 80077c4:	6822      	ldr	r2, [r4, #0]
 80077c6:	5cd2      	ldrb	r2, [r2, r3]
 80077c8:	54ca      	strb	r2, [r1, r3]
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	3301      	adds	r3, #1
 80077ce:	429a      	cmp	r2, r3
 80077d0:	dcf8      	bgt.n	80077c4 <RSA_PKCS1v15_Encrypt+0x1b0>
 80077d2:	e7d2      	b.n	800777a <RSA_PKCS1v15_Encrypt+0x166>
 80077d4:	40023008 	.word	0x40023008
 80077d8:	40023000 	.word	0x40023000

080077dc <RSA_PKCS1v15_Decrypt>:
 80077dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	b083      	sub	sp, #12
 80077e2:	2500      	movs	r5, #0
 80077e4:	9501      	str	r5, [sp, #4]
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	461f      	mov	r7, r3
 80077ec:	4605      	mov	r5, r0
 80077ee:	b150      	cbz	r0, 8007806 <RSA_PKCS1v15_Decrypt+0x2a>
 80077f0:	b149      	cbz	r1, 8007806 <RSA_PKCS1v15_Decrypt+0x2a>
 80077f2:	b142      	cbz	r2, 8007806 <RSA_PKCS1v15_Decrypt+0x2a>
 80077f4:	6809      	ldr	r1, [r1, #0]
 80077f6:	b131      	cbz	r1, 8007806 <RSA_PKCS1v15_Decrypt+0x2a>
 80077f8:	68a2      	ldr	r2, [r4, #8]
 80077fa:	b122      	cbz	r2, 8007806 <RSA_PKCS1v15_Decrypt+0x2a>
 80077fc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8007800:	6842      	ldr	r2, [r0, #4]
 8007802:	4594      	cmp	ip, r2
 8007804:	d004      	beq.n	8007810 <RSA_PKCS1v15_Decrypt+0x34>
 8007806:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800780a:	b003      	add	sp, #12
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8007814:	889a      	ldrh	r2, [r3, #4]
 8007816:	44cc      	add	ip, r9
 8007818:	4562      	cmp	r2, ip
 800781a:	dbf4      	blt.n	8007806 <RSA_PKCS1v15_Decrypt+0x2a>
 800781c:	f8d3 a000 	ldr.w	sl, [r3]
 8007820:	f8a3 c006 	strh.w	ip, [r3, #6]
 8007824:	eb0a 0809 	add.w	r8, sl, r9
 8007828:	4642      	mov	r2, r8
 800782a:	f7ff fc67 	bl	80070fc <RSASP1>
 800782e:	b130      	cbz	r0, 800783e <RSA_PKCS1v15_Decrypt+0x62>
 8007830:	686b      	ldr	r3, [r5, #4]
 8007832:	f241 30f4 	movw	r0, #5108	; 0x13f4
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	80fb      	strh	r3, [r7, #6]
 800783c:	e7e5      	b.n	800780a <RSA_PKCS1v15_Decrypt+0x2e>
 800783e:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8007842:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007846:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800784a:	f082 0a02 	eor.w	sl, r2, #2
 800784e:	f1b9 0f02 	cmp.w	r9, #2
 8007852:	ea4a 0a03 	orr.w	sl, sl, r3
 8007856:	4602      	mov	r2, r0
 8007858:	dd10      	ble.n	800787c <RSA_PKCS1v15_Decrypt+0xa0>
 800785a:	f108 0102 	add.w	r1, r8, #2
 800785e:	eb08 0c09 	add.w	ip, r8, r9
 8007862:	2301      	movs	r3, #1
 8007864:	f811 0b01 	ldrb.w	r0, [r1], #1
 8007868:	ea40 1010 	orr.w	r0, r0, r0, lsr #4
 800786c:	ea40 0090 	orr.w	r0, r0, r0, lsr #2
 8007870:	ea40 0050 	orr.w	r0, r0, r0, lsr #1
 8007874:	4003      	ands	r3, r0
 8007876:	4561      	cmp	r1, ip
 8007878:	441a      	add	r2, r3
 800787a:	d1f3      	bne.n	8007864 <RSA_PKCS1v15_Decrypt+0x88>
 800787c:	f022 0b07 	bic.w	fp, r2, #7
 8007880:	ea4b 2b2b 	orr.w	fp, fp, fp, asr #8
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	4843      	ldr	r0, [pc, #268]	; (8007994 <RSA_PKCS1v15_Decrypt+0x1b8>)
 8007888:	4943      	ldr	r1, [pc, #268]	; (8007998 <RSA_PKCS1v15_Decrypt+0x1bc>)
 800788a:	ea4b 1b2b 	orr.w	fp, fp, fp, asr #4
 800788e:	ea4b 0bab 	orr.w	fp, fp, fp, asr #2
 8007892:	ebc2 0c09 	rsb	ip, r2, r9
 8007896:	ea4b 0b6b 	orr.w	fp, fp, fp, asr #1
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	3b03      	subs	r3, #3
 800789e:	f1ac 0c03 	sub.w	ip, ip, #3
 80078a2:	f00b 0b01 	and.w	fp, fp, #1
 80078a6:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 80078aa:	f08b 0b01 	eor.w	fp, fp, #1
 80078ae:	fb93 fcf9 	sdiv	ip, r3, r9
 80078b2:	fb09 391c 	mls	r9, r9, ip, r3
 80078b6:	ea4a 0a0b 	orr.w	sl, sl, fp
 80078ba:	f04f 0c01 	mov.w	ip, #1
 80078be:	ea0a 030c 	and.w	r3, sl, ip
 80078c2:	f8c6 9000 	str.w	r9, [r6]
 80078c6:	f8c0 c000 	str.w	ip, [r0]
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	9001      	str	r0, [sp, #4]
 80078ce:	ea83 030c 	eor.w	r3, r3, ip
 80078d2:	fa03 fc0c 	lsl.w	ip, r3, ip
 80078d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80078da:	680b      	ldr	r3, [r1, #0]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	ea4c 0c8c 	orr.w	ip, ip, ip, lsl #2
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	ea4c 1c0c 	orr.w	ip, ip, ip, lsl #4
 80078e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80078ec:	3301      	adds	r3, #1
 80078ee:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80078f2:	d01d      	beq.n	8007930 <RSA_PKCS1v15_Decrypt+0x154>
 80078f4:	686b      	ldr	r3, [r5, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	dd13      	ble.n	8007922 <RSA_PKCS1v15_Decrypt+0x146>
 80078fa:	2300      	movs	r3, #0
 80078fc:	4619      	mov	r1, r3
 80078fe:	fa5f f98c 	uxtb.w	r9, ip
 8007902:	f818 6003 	ldrb.w	r6, [r8, r3]
 8007906:	68a0      	ldr	r0, [r4, #8]
 8007908:	ea06 0609 	and.w	r6, r6, r9
 800790c:	5446      	strb	r6, [r0, r1]
 800790e:	6868      	ldr	r0, [r5, #4]
 8007910:	3301      	adds	r3, #1
 8007912:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 8007916:	4298      	cmp	r0, r3
 8007918:	4431      	add	r1, r6
 800791a:	f1a2 0205 	sub.w	r2, r2, #5
 800791e:	dcf0      	bgt.n	8007902 <RSA_PKCS1v15_Decrypt+0x126>
 8007920:	4603      	mov	r3, r0
 8007922:	ea6f 0c0c 	mvn.w	ip, ip
 8007926:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800792a:	ea0c 0000 	and.w	r0, ip, r0
 800792e:	e782      	b.n	8007836 <RSA_PKCS1v15_Decrypt+0x5a>
 8007930:	9b01      	ldr	r3, [sp, #4]
 8007932:	600b      	str	r3, [r1, #0]
 8007934:	680b      	ldr	r3, [r1, #0]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	686b      	ldr	r3, [r5, #4]
 800793c:	b1a9      	cbz	r1, 800796a <RSA_PKCS1v15_Decrypt+0x18e>
 800793e:	2b00      	cmp	r3, #0
 8007940:	ddef      	ble.n	8007922 <RSA_PKCS1v15_Decrypt+0x146>
 8007942:	2300      	movs	r3, #0
 8007944:	3a03      	subs	r2, #3
 8007946:	4619      	mov	r1, r3
 8007948:	fa5f f98c 	uxtb.w	r9, ip
 800794c:	f818 6003 	ldrb.w	r6, [r8, r3]
 8007950:	68a0      	ldr	r0, [r4, #8]
 8007952:	ea06 0609 	and.w	r6, r6, r9
 8007956:	5446      	strb	r6, [r0, r1]
 8007958:	6868      	ldr	r0, [r5, #4]
 800795a:	18d6      	adds	r6, r2, r3
 800795c:	3301      	adds	r3, #1
 800795e:	f3c6 6640 	ubfx	r6, r6, #25, #1
 8007962:	4298      	cmp	r0, r3
 8007964:	4431      	add	r1, r6
 8007966:	dcf1      	bgt.n	800794c <RSA_PKCS1v15_Decrypt+0x170>
 8007968:	e7da      	b.n	8007920 <RSA_PKCS1v15_Decrypt+0x144>
 800796a:	2b00      	cmp	r3, #0
 800796c:	ddd9      	ble.n	8007922 <RSA_PKCS1v15_Decrypt+0x146>
 800796e:	460b      	mov	r3, r1
 8007970:	3202      	adds	r2, #2
 8007972:	fa5f f98c 	uxtb.w	r9, ip
 8007976:	f818 6003 	ldrb.w	r6, [r8, r3]
 800797a:	68a0      	ldr	r0, [r4, #8]
 800797c:	ea06 0609 	and.w	r6, r6, r9
 8007980:	5446      	strb	r6, [r0, r1]
 8007982:	6868      	ldr	r0, [r5, #4]
 8007984:	1ad6      	subs	r6, r2, r3
 8007986:	3301      	adds	r3, #1
 8007988:	4298      	cmp	r0, r3
 800798a:	eb01 71d6 	add.w	r1, r1, r6, lsr #31
 800798e:	dcf2      	bgt.n	8007976 <RSA_PKCS1v15_Decrypt+0x19a>
 8007990:	e7c6      	b.n	8007920 <RSA_PKCS1v15_Decrypt+0x144>
 8007992:	bf00      	nop
 8007994:	40023008 	.word	0x40023008
 8007998:	40023000 	.word	0x40023000

0800799c <crl_DRBG_AES128_Instantiate>:
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	b0d3      	sub	sp, #332	; 0x14c
 80079a2:	ad12      	add	r5, sp, #72	; 0x48
 80079a4:	4616      	mov	r6, r2
 80079a6:	4604      	mov	r4, r0
 80079a8:	2250      	movs	r2, #80	; 0x50
 80079aa:	460f      	mov	r7, r1
 80079ac:	4628      	mov	r0, r5
 80079ae:	2100      	movs	r1, #0
 80079b0:	4698      	mov	r8, r3
 80079b2:	f000 f8db 	bl	8007b6c <memset>
 80079b6:	22b0      	movs	r2, #176	; 0xb0
 80079b8:	a826      	add	r0, sp, #152	; 0x98
 80079ba:	4944      	ldr	r1, [pc, #272]	; (8007acc <crl_DRBG_AES128_Instantiate+0x130>)
 80079bc:	f000 f8c8 	bl	8007b50 <memcpy>
 80079c0:	f1a6 0210 	sub.w	r2, r6, #16
 80079c4:	2a10      	cmp	r2, #16
 80079c6:	d904      	bls.n	80079d2 <crl_DRBG_AES128_Instantiate+0x36>
 80079c8:	f241 7076 	movw	r0, #6006	; 0x1776
 80079cc:	b053      	add	sp, #332	; 0x14c
 80079ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d2:	985e      	ldr	r0, [sp, #376]	; 0x178
 80079d4:	2820      	cmp	r0, #32
 80079d6:	dd04      	ble.n	80079e2 <crl_DRBG_AES128_Instantiate+0x46>
 80079d8:	f241 7077 	movw	r0, #6007	; 0x1777
 80079dc:	b053      	add	sp, #332	; 0x14c
 80079de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e2:	995c      	ldr	r1, [sp, #368]	; 0x170
 80079e4:	2910      	cmp	r1, #16
 80079e6:	dd02      	ble.n	80079ee <crl_DRBG_AES128_Instantiate+0x52>
 80079e8:	f241 707a 	movw	r0, #6010	; 0x177a
 80079ec:	e7ee      	b.n	80079cc <crl_DRBG_AES128_Instantiate+0x30>
 80079ee:	4639      	mov	r1, r7
 80079f0:	4628      	mov	r0, r5
 80079f2:	4632      	mov	r2, r6
 80079f4:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 80079f6:	f8dd 9178 	ldr.w	r9, [sp, #376]	; 0x178
 80079fa:	f000 f8a9 	bl	8007b50 <memcpy>
 80079fe:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8007a00:	4437      	add	r7, r6
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	44b9      	add	r9, r7
 8007a06:	dd04      	ble.n	8007a12 <crl_DRBG_AES128_Instantiate+0x76>
 8007a08:	19a8      	adds	r0, r5, r6
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f000 f89f 	bl	8007b50 <memcpy>
 8007a12:	985e      	ldr	r0, [sp, #376]	; 0x178
 8007a14:	2800      	cmp	r0, #0
 8007a16:	dd04      	ble.n	8007a22 <crl_DRBG_AES128_Instantiate+0x86>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	995d      	ldr	r1, [sp, #372]	; 0x174
 8007a1c:	19e8      	adds	r0, r5, r7
 8007a1e:	f000 f897 	bl	8007b50 <memcpy>
 8007a22:	2100      	movs	r1, #0
 8007a24:	2210      	movs	r2, #16
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f8a0 	bl	8007b6c <memset>
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	aa02      	add	r2, sp, #8
 8007a30:	4628      	mov	r0, r5
 8007a32:	f7fd fff3 	bl	8005a1c <DRBG_AES128_Block_cipher_df.constprop.37>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d1c8      	bne.n	80079cc <crl_DRBG_AES128_Instantiate+0x30>
 8007a3a:	ae0a      	add	r6, sp, #40	; 0x28
 8007a3c:	68e7      	ldr	r7, [r4, #12]
 8007a3e:	2310      	movs	r3, #16
 8007a40:	3701      	adds	r7, #1
 8007a42:	4631      	mov	r1, r6
 8007a44:	4620      	mov	r0, r4
 8007a46:	aa26      	add	r2, sp, #152	; 0x98
 8007a48:	441e      	add	r6, r3
 8007a4a:	60e7      	str	r7, [r4, #12]
 8007a4c:	b957      	cbnz	r7, 8007a64 <crl_DRBG_AES128_Instantiate+0xc8>
 8007a4e:	68a7      	ldr	r7, [r4, #8]
 8007a50:	3701      	adds	r7, #1
 8007a52:	60a7      	str	r7, [r4, #8]
 8007a54:	b937      	cbnz	r7, 8007a64 <crl_DRBG_AES128_Instantiate+0xc8>
 8007a56:	6867      	ldr	r7, [r4, #4]
 8007a58:	3701      	adds	r7, #1
 8007a5a:	6067      	str	r7, [r4, #4]
 8007a5c:	b917      	cbnz	r7, 8007a64 <crl_DRBG_AES128_Instantiate+0xc8>
 8007a5e:	6827      	ldr	r7, [r4, #0]
 8007a60:	3701      	adds	r7, #1
 8007a62:	6027      	str	r7, [r4, #0]
 8007a64:	f7fd fe52 	bl	800570c <AES_general_SW_enc>
 8007a68:	42ae      	cmp	r6, r5
 8007a6a:	d1e7      	bne.n	8007a3c <crl_DRBG_AES128_Instantiate+0xa0>
 8007a6c:	a902      	add	r1, sp, #8
 8007a6e:	e891 010e 	ldmia.w	r1, {r1, r2, r3, r8}
 8007a72:	9d07      	ldr	r5, [sp, #28]
 8007a74:	9500      	str	r5, [sp, #0]
 8007a76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007a78:	9f06      	ldr	r7, [sp, #24]
 8007a7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007a7e:	9001      	str	r0, [sp, #4]
 8007a80:	4069      	eors	r1, r5
 8007a82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007a84:	6121      	str	r1, [r4, #16]
 8007a86:	407e      	eors	r6, r7
 8007a88:	e89d 0082 	ldmia.w	sp, {r1, r7}
 8007a8c:	406a      	eors	r2, r5
 8007a8e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8007a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a94:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a9a:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8007a9e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8007aa2:	6162      	str	r2, [r4, #20]
 8007aa4:	406b      	eors	r3, r5
 8007aa6:	ea80 0009 	eor.w	r0, r0, r9
 8007aaa:	ea87 0501 	eor.w	r5, r7, r1
 8007aae:	ea88 0c0c 	eor.w	ip, r8, ip
 8007ab2:	ea8b 070a 	eor.w	r7, fp, sl
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	60e0      	str	r0, [r4, #12]
 8007aba:	61a3      	str	r3, [r4, #24]
 8007abc:	f8c4 c01c 	str.w	ip, [r4, #28]
 8007ac0:	6026      	str	r6, [r4, #0]
 8007ac2:	6065      	str	r5, [r4, #4]
 8007ac4:	60a7      	str	r7, [r4, #8]
 8007ac6:	6221      	str	r1, [r4, #32]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e77f      	b.n	80079cc <crl_DRBG_AES128_Instantiate+0x30>
 8007acc:	08007da4 	.word	0x08007da4

08007ad0 <RNGinit>:
 8007ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	b191      	cbz	r1, 8007afe <RNGinit+0x2e>
 8007ad8:	b188      	cbz	r0, 8007afe <RNGinit+0x2e>
 8007ada:	e890 008e 	ldmia.w	r0, {r1, r2, r3, r7}
 8007ade:	6906      	ldr	r6, [r0, #16]
 8007ae0:	6945      	ldr	r5, [r0, #20]
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ae6:	62a0      	str	r0, [r4, #40]	; 0x28
 8007ae8:	9700      	str	r7, [sp, #0]
 8007aea:	9601      	str	r6, [sp, #4]
 8007aec:	9502      	str	r5, [sp, #8]
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff ff54 	bl	800799c <crl_DRBG_AES128_Instantiate>
 8007af4:	b928      	cbnz	r0, 8007b02 <RNGinit+0x32>
 8007af6:	2301      	movs	r3, #1
 8007af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007afa:	b005      	add	sp, #20
 8007afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007afe:	f241 7074 	movw	r0, #6004	; 0x1774
 8007b02:	b005      	add	sp, #20
 8007b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b06:	bf00      	nop

08007b08 <__libc_init_array>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4d0d      	ldr	r5, [pc, #52]	; (8007b40 <__libc_init_array+0x38>)
 8007b0c:	4c0d      	ldr	r4, [pc, #52]	; (8007b44 <__libc_init_array+0x3c>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	2600      	movs	r6, #0
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	d109      	bne.n	8007b2c <__libc_init_array+0x24>
 8007b18:	4d0b      	ldr	r5, [pc, #44]	; (8007b48 <__libc_init_array+0x40>)
 8007b1a:	4c0c      	ldr	r4, [pc, #48]	; (8007b4c <__libc_init_array+0x44>)
 8007b1c:	f000 f82e 	bl	8007b7c <_init>
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	2600      	movs	r6, #0
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d105      	bne.n	8007b36 <__libc_init_array+0x2e>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7ee      	b.n	8007b14 <__libc_init_array+0xc>
 8007b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3a:	4798      	blx	r3
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	e7f2      	b.n	8007b26 <__libc_init_array+0x1e>
 8007b40:	080086d8 	.word	0x080086d8
 8007b44:	080086d8 	.word	0x080086d8
 8007b48:	080086d8 	.word	0x080086d8
 8007b4c:	080086dc 	.word	0x080086dc

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_init>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr

08007b88 <_fini>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr
